/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataChartDescription = /*@__PURE__*/ (() => {
    class DataChartDescription extends SeriesViewerDescription {
        get_type() {
            return "DataChart";
        }
        constructor() {
            super();
            this.g9 = false;
            this.hz = 0;
            this.h0 = 0;
            this.hr = 0;
            this.hs = 0;
            this.g8 = false;
            this.ha = false;
            this.il = null;
            this.g7 = false;
            this.hu = 0;
            this.ht = 0;
            this.hd = false;
            this.hb = false;
            this.hc = false;
            this.he = false;
            this.ig = null;
            this.ik = null;
            this.ii = null;
            this.ij = null;
            this.g5 = null;
            this.ho = 0;
            this.hq = 0;
            this.hp = 0;
            this.hn = 0;
            this.ih = null;
            this.io = null;
            this.ip = null;
            this.hw = 0;
            this.hy = 0;
            this.hx = 0;
            this.hv = 0;
            this.iq = null;
            this.im = null;
        }
        get isSquare() {
            return this.g9;
        }
        set isSquare(a) {
            this.g9 = a;
            this.g("IsSquare");
        }
        get windowScaleHorizontal() {
            return this.hz;
        }
        set windowScaleHorizontal(a) {
            this.hz = a;
            this.g("WindowScaleHorizontal");
        }
        get windowScaleVertical() {
            return this.h0;
        }
        set windowScaleVertical(a) {
            this.h0 = a;
            this.g("WindowScaleVertical");
        }
        get actualWindowScaleHorizontal() {
            return this.hr;
        }
        set actualWindowScaleHorizontal(a) {
            this.hr = a;
            this.g("ActualWindowScaleHorizontal");
        }
        get actualWindowScaleVertical() {
            return this.hs;
        }
        set actualWindowScaleVertical(a) {
            this.hs = a;
            this.g("ActualWindowScaleVertical");
        }
        get isHorizontalZoomEnabled() {
            return this.g8;
        }
        set isHorizontalZoomEnabled(a) {
            this.g8 = a;
            this.g("IsHorizontalZoomEnabled");
        }
        get isVerticalZoomEnabled() {
            return this.ha;
        }
        set isVerticalZoomEnabled(a) {
            this.ha = a;
            this.g("IsVerticalZoomEnabled");
        }
        get gridMode() {
            return this.il;
        }
        set gridMode(a) {
            this.il = a;
            this.g("GridMode");
        }
        get alignsGridLinesToPixels() {
            return this.g7;
        }
        set alignsGridLinesToPixels(a) {
            this.g7 = a;
            this.g("AlignsGridLinesToPixels");
        }
        get autoExpandMarginMaximumValue() {
            return this.hu;
        }
        set autoExpandMarginMaximumValue(a) {
            this.hu = a;
            this.g("AutoExpandMarginMaximumValue");
        }
        get autoExpandMarginExtraPadding() {
            return this.ht;
        }
        set autoExpandMarginExtraPadding(a) {
            this.ht = a;
            this.g("AutoExpandMarginExtraPadding");
        }
        get shouldSuppressAxisLabelTruncation() {
            return this.hd;
        }
        set shouldSuppressAxisLabelTruncation(a) {
            this.hd = a;
            this.g("ShouldSuppressAxisLabelTruncation");
        }
        get shouldAutoExpandMarginForInitialLabels() {
            return this.hb;
        }
        set shouldAutoExpandMarginForInitialLabels(a) {
            this.hb = a;
            this.g("ShouldAutoExpandMarginForInitialLabels");
        }
        get shouldConsiderAutoRotationForInitialLabels() {
            return this.hc;
        }
        set shouldConsiderAutoRotationForInitialLabels(a) {
            this.hc = a;
            this.g("ShouldConsiderAutoRotationForInitialLabels");
        }
        get suppressAutoMarginAndAngleRecalculation() {
            return this.he;
        }
        set suppressAutoMarginAndAngleRecalculation(a) {
            this.he = a;
            this.g("SuppressAutoMarginAndAngleRecalculation");
        }
        get autoMarginAndAngleUpdateMode() {
            return this.ig;
        }
        set autoMarginAndAngleUpdateMode(a) {
            this.ig = a;
            this.g("AutoMarginAndAngleUpdateMode");
        }
        get defaultAxisStroke() {
            return this.ik;
        }
        set defaultAxisStroke(a) {
            this.ik = a;
            this.g("DefaultAxisStroke");
        }
        get defaultAxisMajorStroke() {
            return this.ii;
        }
        set defaultAxisMajorStroke(a) {
            this.ii = a;
            this.g("DefaultAxisMajorStroke");
        }
        get defaultAxisMinorStroke() {
            return this.ij;
        }
        set defaultAxisMinorStroke(a) {
            this.ij = a;
            this.g("DefaultAxisMinorStroke");
        }
        get axes() {
            return this.g5;
        }
        set axes(a) {
            this.g5 = a;
            this.g("Axes");
        }
        get actualPlotAreaMarginLeft() {
            return this.ho;
        }
        set actualPlotAreaMarginLeft(a) {
            this.ho = a;
            this.g("ActualPlotAreaMarginLeft");
        }
        get actualPlotAreaMarginTop() {
            return this.hq;
        }
        set actualPlotAreaMarginTop(a) {
            this.hq = a;
            this.g("ActualPlotAreaMarginTop");
        }
        get actualPlotAreaMarginRight() {
            return this.hp;
        }
        set actualPlotAreaMarginRight(a) {
            this.hp = a;
            this.g("ActualPlotAreaMarginRight");
        }
        get actualPlotAreaMarginBottom() {
            return this.hn;
        }
        set actualPlotAreaMarginBottom(a) {
            this.hn = a;
            this.g("ActualPlotAreaMarginBottom");
        }
        get computedPlotAreaMarginMode() {
            return this.ih;
        }
        set computedPlotAreaMarginMode(a) {
            this.ih = a;
            this.g("ComputedPlotAreaMarginMode");
        }
        get seriesPlotAreaMarginHorizontalMode() {
            return this.io;
        }
        set seriesPlotAreaMarginHorizontalMode(a) {
            this.io = a;
            this.g("SeriesPlotAreaMarginHorizontalMode");
        }
        get seriesPlotAreaMarginVerticalMode() {
            return this.ip;
        }
        set seriesPlotAreaMarginVerticalMode(a) {
            this.ip = a;
            this.g("SeriesPlotAreaMarginVerticalMode");
        }
        get plotAreaMarginLeft() {
            return this.hw;
        }
        set plotAreaMarginLeft(a) {
            this.hw = a;
            this.g("PlotAreaMarginLeft");
        }
        get plotAreaMarginTop() {
            return this.hy;
        }
        set plotAreaMarginTop(a) {
            this.hy = a;
            this.g("PlotAreaMarginTop");
        }
        get plotAreaMarginRight() {
            return this.hx;
        }
        set plotAreaMarginRight(a) {
            this.hx = a;
            this.g("PlotAreaMarginRight");
        }
        get plotAreaMarginBottom() {
            return this.hv;
        }
        set plotAreaMarginBottom(a) {
            this.hv = a;
            this.g("PlotAreaMarginBottom");
        }
        get width() {
            return this.iq;
        }
        set width(a) {
            this.iq = a;
            this.g("Width");
        }
        get height() {
            return this.im;
        }
        set height(a) {
            this.im = a;
            this.g("Height");
        }
    }
    DataChartDescription.$t = /*@__PURE__*/ markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
})();
