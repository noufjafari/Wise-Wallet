/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { BaseDataSourceDescription } from "./BaseDataSourceDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let VirtualDataSourceDescription = /*@__PURE__*/ (() => {
    class VirtualDataSourceDescription extends BaseDataSourceDescription {
        get_type() {
            return "VirtualDataSource";
        }
        constructor() {
            super();
            this.az = false;
            this.a0 = false;
            this.a6 = 0;
            this.a5 = 0;
            this.a4 = 0;
            this.ba = null;
            this.ay = false;
        }
        get isSectionCollapsable() {
            return this.az;
        }
        set isSectionCollapsable(a) {
            this.az = a;
            this.g("IsSectionCollapsable");
        }
        get isSectionExpandedDefault() {
            return this.a0;
        }
        set isSectionExpandedDefault(a) {
            this.a0 = a;
            this.g("IsSectionExpandedDefault");
        }
        get pageSizeRequested() {
            return this.a6;
        }
        set pageSizeRequested(a) {
            this.a6 = a;
            this.g("PageSizeRequested");
        }
        get maxCachedPages() {
            return this.a5;
        }
        set maxCachedPages(a) {
            this.a5 = a;
            this.g("MaxCachedPages");
        }
        get actualPageSize() {
            return this.a4;
        }
        set actualPageSize(a) {
            this.a4 = a;
            this.g("ActualPageSize");
        }
        get concurrencyTag() {
            return this.ba;
        }
        set concurrencyTag(a) {
            this.ba = a;
            this.g("ConcurrencyTag");
        }
        get isBatchingEnabled() {
            return this.ay;
        }
        set isBatchingEnabled(a) {
            this.ay = a;
            this.g("IsBatchingEnabled");
        }
    }
    VirtualDataSourceDescription.$t = /*@__PURE__*/ markType(VirtualDataSourceDescription, 'VirtualDataSourceDescription', BaseDataSourceDescription.$);
    return VirtualDataSourceDescription;
})();
