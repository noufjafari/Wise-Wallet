/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DefinitionBaseDescription } from "./DefinitionBaseDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let DataGridColumnDescription = /*@__PURE__*/ (() => {
    class DataGridColumnDescription extends DefinitionBaseDescription {
        get_type() {
            return "DataGridColumn";
        }
        constructor() {
            super();
            this.dk = 0;
            this.dm = 0;
            this.dl = 0;
            this.dj = 0;
            this.ej = null;
            this.ed = null;
            this.ef = null;
            this.d1 = null;
            this.en = null;
            this.d5 = null;
            this.el = null;
            this.d3 = null;
            this.em = null;
            this.d4 = null;
            this.cc = null;
            this.b8 = null;
            this.da = 0;
            this.cq = false;
            this.ck = false;
            this.b6 = null;
            this.ca = null;
            this.ce = null;
            this.cp = false;
            this.cs = false;
            this.cr = false;
            this.ct = false;
            this.eo = null;
            this.ek = null;
            this.dx = null;
            this.d6 = null;
            this.dz = null;
            this.d8 = null;
            this.d7 = null;
            this.dy = null;
            this.ch = false;
            this.cl = false;
            this.cj = false;
            this.cn = false;
            this.ci = false;
            this.cm = false;
            this.co = false;
            this.d9 = null;
            this.d0 = null;
            this.c9 = 0;
            this.c7 = 0;
            this.ea = null;
            this.c8 = 0;
            this.eb = null;
            this.ec = null;
            this.eh = null;
            this.eg = null;
            this.ei = null;
            this.dg = 0;
            this.di = 0;
            this.dh = 0;
            this.df = 0;
            this.ee = null;
            this.b4 = null;
            this.d2 = null;
        }
        get paddingLeft() {
            return this.dk;
        }
        set paddingLeft(a) {
            this.dk = a;
            this.g("PaddingLeft");
        }
        get paddingTop() {
            return this.dm;
        }
        set paddingTop(a) {
            this.dm = a;
            this.g("PaddingTop");
        }
        get paddingRight() {
            return this.dl;
        }
        set paddingRight(a) {
            this.dl = a;
            this.g("PaddingRight");
        }
        get paddingBottom() {
            return this.dj;
        }
        set paddingBottom(a) {
            this.dj = a;
            this.g("PaddingBottom");
        }
        get name() {
            return this.ej;
        }
        set name(a) {
            this.ej = a;
            this.g("Name");
        }
        get field() {
            return this.ed;
        }
        set field(a) {
            this.ed = a;
            this.g("Field");
        }
        get headerText() {
            return this.ef;
        }
        set headerText(a) {
            this.ef = a;
            this.g("HeaderText");
        }
        get actualHeaderText() {
            return this.d1;
        }
        set actualHeaderText(a) {
            this.d1 = a;
            this.g("ActualHeaderText");
        }
        get selectedBackground() {
            return this.en;
        }
        set selectedBackground(a) {
            this.en = a;
            this.g("SelectedBackground");
        }
        get actualSelectedBackground() {
            return this.d5;
        }
        set actualSelectedBackground(a) {
            this.d5 = a;
            this.g("ActualSelectedBackground");
        }
        get rowHoverBackground() {
            return this.el;
        }
        set rowHoverBackground(a) {
            this.el = a;
            this.g("RowHoverBackground");
        }
        get actualHoverBackground() {
            return this.d3;
        }
        set actualHoverBackground(a) {
            this.d3 = a;
            this.g("ActualHoverBackground");
        }
        get rowHoverTextColor() {
            return this.em;
        }
        set rowHoverTextColor(a) {
            this.em = a;
            this.g("RowHoverTextColor");
        }
        get actualRowHoverTextColor() {
            return this.d4;
        }
        set actualRowHoverTextColor(a) {
            this.d4 = a;
            this.g("ActualRowHoverTextColor");
        }
        get animationSettings() {
            return this.cc;
        }
        set animationSettings(a) {
            this.cc = a;
            this.g("AnimationSettings");
        }
        get width() {
            return this.b8;
        }
        set width(a) {
            this.b8 = a;
            this.g("Width");
        }
        get minWidth() {
            return this.da;
        }
        set minWidth(a) {
            this.da = a;
            this.g("MinWidth");
        }
        get isFromMarkup() {
            return this.cq;
        }
        set isFromMarkup(a) {
            this.cq = a;
            this.g("IsFromMarkup");
        }
        get isAutoGenerated() {
            return this.ck;
        }
        set isAutoGenerated(a) {
            this.ck = a;
            this.g("IsAutoGenerated");
        }
        get filter() {
            return this.b6;
        }
        set filter(a) {
            this.b6 = a;
            this.g("Filter");
        }
        get filterExpression() {
            return this.ca;
        }
        set filterExpression(a) {
            this.ca = a;
            this.g("FilterExpression");
        }
        get header() {
            return this.ce;
        }
        set header(a) {
            this.ce = a;
            this.g("Header");
        }
        get isFilteringEnabled() {
            return this.cp;
        }
        set isFilteringEnabled(a) {
            this.cp = a;
            this.g("IsFilteringEnabled");
        }
        get isResizingEnabled() {
            return this.cs;
        }
        set isResizingEnabled(a) {
            this.cs = a;
            this.g("IsResizingEnabled");
        }
        get isHidden() {
            return this.cr;
        }
        set isHidden(a) {
            this.cr = a;
            this.g("IsHidden");
        }
        get shouldRemoveWhenHidden() {
            return this.ct;
        }
        set shouldRemoveWhenHidden(a) {
            this.ct = a;
            this.g("ShouldRemoveWhenHidden");
        }
        get sortDirection() {
            return this.eo;
        }
        set sortDirection(a) {
            this.eo = a;
            this.g("SortDirection");
        }
        get pinned() {
            return this.ek;
        }
        set pinned(a) {
            this.ek = a;
            this.g("Pinned");
        }
        get actualColumnOptionsIconAlignment() {
            return this.dx;
        }
        set actualColumnOptionsIconAlignment(a) {
            this.dx = a;
            this.g("ActualColumnOptionsIconAlignment");
        }
        get columnOptionsIconAlignment() {
            return this.d6;
        }
        set columnOptionsIconAlignment(a) {
            this.d6 = a;
            this.g("ColumnOptionsIconAlignment");
        }
        get actualColumnOptionsIconColor() {
            return this.dz;
        }
        set actualColumnOptionsIconColor(a) {
            this.dz = a;
            this.g("ActualColumnOptionsIconColor");
        }
        get columnOptionsIconColor() {
            return this.d8;
        }
        set columnOptionsIconColor(a) {
            this.d8 = a;
            this.g("ColumnOptionsIconColor");
        }
        get columnOptionsIconBehavior() {
            return this.d7;
        }
        set columnOptionsIconBehavior(a) {
            this.d7 = a;
            this.g("ColumnOptionsIconBehavior");
        }
        get actualColumnOptionsIconBehavior() {
            return this.dy;
        }
        set actualColumnOptionsIconBehavior(a) {
            this.dy = a;
            this.g("ActualColumnOptionsIconBehavior");
        }
        get actualIsColumnOptionsEnabled() {
            return this.ch;
        }
        set actualIsColumnOptionsEnabled(a) {
            this.ch = a;
            this.g("ActualIsColumnOptionsEnabled");
        }
        get isColumnOptionsEnabled() {
            return this.cl;
        }
        set isColumnOptionsEnabled(a) {
            this.cl = a;
            this.g("IsColumnOptionsEnabled");
        }
        get actualIsColumnOptionsSummariesEnabled() {
            return this.cj;
        }
        set actualIsColumnOptionsSummariesEnabled(a) {
            this.cj = a;
            this.g("ActualIsColumnOptionsSummariesEnabled");
        }
        get isColumnOptionsSummariesEnabled() {
            return this.cn;
        }
        set isColumnOptionsSummariesEnabled(a) {
            this.cn = a;
            this.g("IsColumnOptionsSummariesEnabled");
        }
        get actualIsColumnOptionsGroupingEnabled() {
            return this.ci;
        }
        set actualIsColumnOptionsGroupingEnabled(a) {
            this.ci = a;
            this.g("ActualIsColumnOptionsGroupingEnabled");
        }
        get isColumnOptionsGroupingEnabled() {
            return this.cm;
        }
        set isColumnOptionsGroupingEnabled(a) {
            this.cm = a;
            this.g("IsColumnOptionsGroupingEnabled");
        }
        get isEditable() {
            return this.co;
        }
        set isEditable(a) {
            this.co = a;
            this.g("IsEditable");
        }
        get deletedTextColor() {
            return this.d9;
        }
        set deletedTextColor(a) {
            this.d9 = a;
            this.g("DeletedTextColor");
        }
        get actualDeletedTextColor() {
            return this.d0;
        }
        set actualDeletedTextColor(a) {
            this.d0 = a;
            this.g("ActualDeletedTextColor");
        }
        get editOpacity() {
            return this.c9;
        }
        set editOpacity(a) {
            this.c9 = a;
            this.g("EditOpacity");
        }
        get actualEditOpacity() {
            return this.c7;
        }
        set actualEditOpacity(a) {
            this.c7 = a;
            this.g("ActualEditOpacity");
        }
        get editFontFamily() {
            return this.ea;
        }
        set editFontFamily(a) {
            this.ea = a;
            this.g("EditFontFamily");
        }
        get editFontSize() {
            return this.c8;
        }
        set editFontSize(a) {
            this.c8 = a;
            this.g("EditFontSize");
        }
        get editFontStyle() {
            return this.eb;
        }
        set editFontStyle(a) {
            this.eb = a;
            this.g("EditFontStyle");
        }
        get editFontWeight() {
            return this.ec;
        }
        set editFontWeight(a) {
            this.ec = a;
            this.g("EditFontWeight");
        }
        get mergedCellMode() {
            return this.eh;
        }
        set mergedCellMode(a) {
            this.eh = a;
            this.g("MergedCellMode");
        }
        get mergedCellEvaluationCriteria() {
            return this.eg;
        }
        set mergedCellEvaluationCriteria(a) {
            this.eg = a;
            this.g("MergedCellEvaluationCriteria");
        }
        get mergedCellVerticalAlignment() {
            return this.ei;
        }
        set mergedCellVerticalAlignment(a) {
            this.ei = a;
            this.g("MergedCellVerticalAlignment");
        }
        get mergedCellPaddingLeft() {
            return this.dg;
        }
        set mergedCellPaddingLeft(a) {
            this.dg = a;
            this.g("MergedCellPaddingLeft");
        }
        get mergedCellPaddingTop() {
            return this.di;
        }
        set mergedCellPaddingTop(a) {
            this.di = a;
            this.g("MergedCellPaddingTop");
        }
        get mergedCellPaddingRight() {
            return this.dh;
        }
        set mergedCellPaddingRight(a) {
            this.dh = a;
            this.g("MergedCellPaddingRight");
        }
        get mergedCellPaddingBottom() {
            return this.df;
        }
        set mergedCellPaddingBottom(a) {
            this.df = a;
            this.g("MergedCellPaddingBottom");
        }
        get filterComparisonType() {
            return this.ee;
        }
        set filterComparisonType(a) {
            this.ee = a;
            this.g("FilterComparisonType");
        }
        get filterOperands() {
            return this.b4;
        }
        set filterOperands(a) {
            this.b4 = a;
            this.g("FilterOperands");
        }
        get actualHeaderTextChangeRef() {
            return this.d2;
        }
        set actualHeaderTextChangeRef(a) {
            this.d2 = a;
            this.g("ActualHeaderTextChangeRef");
        }
    }
    DataGridColumnDescription.$t = /*@__PURE__*/ markType(DataGridColumnDescription, 'DataGridColumnDescription', DefinitionBaseDescription.$);
    DataGridColumnDescription.__canMarshalByValue = true;
    DataGridColumnDescription.__marshalByValueAlias = "DataGridColumn";
    return DataGridColumnDescription;
})();
