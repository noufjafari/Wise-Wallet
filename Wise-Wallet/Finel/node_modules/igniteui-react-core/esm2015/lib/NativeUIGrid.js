/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { NativeUIContainer } from "./NativeUIContainer";
import { NativeUIBoxSizing_$type } from "./NativeUIBoxSizing";
import { enumGetBox, EnumUtil, markType } from "./type";
/**
 * @hidden
 */
export let NativeUIGrid = /*@__PURE__*/ (() => {
    class NativeUIGrid extends NativeUIContainer {
        constructor() {
            super(...arguments);
            this.bp = null;
        }
        get_e() {
            return 7;
        }
        get bv() {
            return this.bn.getRowDefinitionsCount(this.ak);
        }
        get bs() {
            return this.bn.getColumnDefinitionsCount(this.ak);
        }
        get bn() {
            return this.d;
        }
        get bo() {
            let a = this.ae(38);
            return EnumUtil.getEnumValue(NativeUIBoxSizing_$type, a);
        }
        set bo(a) {
            this.a0(38, enumGetBox(NativeUIBoxSizing_$type, a));
        }
        get br() {
            return this.ae(37);
        }
        set br(a) {
            this.a0(37, a);
        }
        by(a, b, c) {
            this.bn.addRowDefinition(this.ak, a, b, c);
        }
        b6(a, b, c) {
            this.bn.updateRowDefinition(this.ak, a, b, c);
        }
        bw(a, b, c) {
            this.bn.addColumnDefinition(this.ak, a, b, c);
        }
        bx(a, b, c, d) {
            this.bn.addColumnDefinitionWithMin(this.ak, a, b, c, d);
        }
        b5(a, b, c) {
            this.bn.updateColumnDefinition(this.ak, a, b, c);
        }
        bz(a, b, c) {
            this.bn.insertColumnDefinition(this.ak, a, b, c);
        }
        b0(a, b, c, d) {
            this.bn.insertColumnDefinitionWithMin(this.ak, a, b, c, d);
        }
        b4(a, b) {
            this.bn.setRow(this.ak, a, b);
        }
        b3(a, b) {
            this.bn.setColumn(this.ak, a, b);
        }
        bu(a) {
            return this.bn.getRow(this.ak, a);
        }
        bt(a) {
            return this.bn.getColumn(this.ak, a);
        }
        b2(a) {
            this.bn.removeRowDefinition(this.ak, a);
        }
        b1(a) {
            this.bn.removeColumnDefinition(this.ak, a);
        }
        get bq() {
            return this.bp;
        }
        set bq(a) {
            let b = this.bp;
            this.bp = a;
            if (this.bp != b) {
                if (b != null) {
                    this.ay(1, b);
                }
                if (this.bp != null) {
                    this.an(1, this.bp);
                }
            }
        }
    }
    NativeUIGrid.$t = /*@__PURE__*/ markType(NativeUIGrid, 'NativeUIGrid', NativeUIContainer.$);
    return NativeUIGrid;
})();
