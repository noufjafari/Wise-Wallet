/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { XYChartDescription } from "./XYChartDescription";
import { markType } from "./type";
/**
 * @hidden
 */
export let FinancialChartDescription = /*@__PURE__*/ (() => {
    class FinancialChartDescription extends XYChartDescription {
        get tooltipTemplateRef() {
            return this.v5;
        }
        set tooltipTemplateRef(a) {
            this.v5 = a;
            this.g("TooltipTemplateRef");
        }
        get width() {
            return this.v7;
        }
        set width(a) {
            this.v7 = a;
            this.g("Width");
        }
        get height() {
            return this.v4;
        }
        set height(a) {
            this.v4 = a;
            this.g("Height");
        }
        get background() {
            return this.v2;
        }
        set background(a) {
            this.v2 = a;
            this.g("Background");
        }
        get_type() {
            return "FinancialChart";
        }
        constructor() {
            super();
            this.v5 = null;
            this.v7 = null;
            this.v4 = null;
            this.v2 = null;
            this.ur = 0;
            this.t3 = false;
            this.uv = 0;
            this.ub = false;
            this.vu = 0;
            this.u2 = 0;
            this.u4 = 0;
            this.u3 = 0;
            this.u5 = 0;
            this.v6 = null;
            this.v8 = null;
            this.ux = 0;
            this.u0 = 0;
            this.uy = 0;
            this.uz = 0;
            this.u1 = 0;
            this.wa = null;
            this.t5 = false;
            this.v3 = null;
            this.v9 = null;
            this.t7 = false;
            this.tf = null;
            this.tk = null;
            this.t9 = false;
            this.uu = 0;
            this.t8 = false;
            this.ua = false;
            this.wb = null;
            this.tg = null;
            this.th = null;
            this.ti = null;
            this.tj = null;
            this.tn = null;
            this.tm = null;
            this.te = null;
            this.tc = null;
            this.uw = 0;
            this.ut = 0;
            this.us = 0;
            this.uq = 0;
            this.td = null;
            this.vq = 0;
            this.up = 0;
            this.vt = 0;
            this.vr = 0;
            this.vp = 0;
            this.vs = 0;
            this.tl = null;
            this.tb = null;
            this.t6 = false;
            this.wc = null;
            this.u6 = 0;
            this.t4 = false;
            this.um = new Date();
            this.ul = new Date();
            this.to = null;
            this.v1 = null;
        }
        get leftMargin() {
            return this.ur;
        }
        set leftMargin(a) {
            this.ur = a;
            this.g("LeftMargin");
        }
        get isHorizontalZoomEnabled() {
            return this.t3;
        }
        set isHorizontalZoomEnabled(a) {
            this.t3 = a;
            this.g("IsHorizontalZoomEnabled");
        }
        get toolbarHeight() {
            return this.uv;
        }
        set toolbarHeight(a) {
            this.uv = a;
            this.g("ToolbarHeight");
        }
        get yAxisIsLogarithmic() {
            return this.ub;
        }
        set yAxisIsLogarithmic(a) {
            this.ub = a;
            this.g("YAxisIsLogarithmic");
        }
        get yAxisLogarithmBase() {
            return this.vu;
        }
        set yAxisLogarithmBase(a) {
            this.vu = a;
            this.g("YAxisLogarithmBase");
        }
        get yAxisInterval() {
            return this.u2;
        }
        set yAxisInterval(a) {
            this.u2 = a;
            this.g("YAxisInterval");
        }
        get yAxisMinimumValue() {
            return this.u4;
        }
        set yAxisMinimumValue(a) {
            this.u4 = a;
            this.g("YAxisMinimumValue");
        }
        get yAxisMaximumValue() {
            return this.u3;
        }
        set yAxisMaximumValue(a) {
            this.u3 = a;
            this.g("YAxisMaximumValue");
        }
        get yAxisMinorInterval() {
            return this.u5;
        }
        set yAxisMinorInterval(a) {
            this.u5 = a;
            this.g("YAxisMinorInterval");
        }
        get volumeType() {
            return this.v6;
        }
        set volumeType(a) {
            this.v6 = a;
            this.g("VolumeType");
        }
        get xAxisMode() {
            return this.v8;
        }
        set xAxisMode(a) {
            this.v8 = a;
            this.g("XAxisMode");
        }
        get xAxisZoomMaximumCategoryRange() {
            return this.ux;
        }
        set xAxisZoomMaximumCategoryRange(a) {
            this.ux = a;
            this.g("XAxisZoomMaximumCategoryRange");
        }
        get xAxisZoomToCategoryStart() {
            return this.u0;
        }
        set xAxisZoomToCategoryStart(a) {
            this.u0 = a;
            this.g("XAxisZoomToCategoryStart");
        }
        get xAxisZoomMaximumItemSpan() {
            return this.uy;
        }
        set xAxisZoomMaximumItemSpan(a) {
            this.uy = a;
            this.g("XAxisZoomMaximumItemSpan");
        }
        get xAxisZoomToCategoryRange() {
            return this.uz;
        }
        set xAxisZoomToCategoryRange(a) {
            this.uz = a;
            this.g("XAxisZoomToCategoryRange");
        }
        get xAxisZoomToItemSpan() {
            return this.u1;
        }
        set xAxisZoomToItemSpan(a) {
            this.u1 = a;
            this.g("XAxisZoomToItemSpan");
        }
        get yAxisMode() {
            return this.wa;
        }
        set yAxisMode(a) {
            this.wa = a;
            this.g("YAxisMode");
        }
        get isToolbarVisible() {
            return this.t5;
        }
        set isToolbarVisible(a) {
            this.t5 = a;
            this.g("IsToolbarVisible");
        }
        get chartType() {
            return this.v3;
        }
        set chartType(a) {
            this.v3 = a;
            this.g("ChartType");
        }
        get yAxisLabelHorizontalAlignment() {
            return this.v9;
        }
        set yAxisLabelHorizontalAlignment(a) {
            this.v9 = a;
            this.g("YAxisLabelHorizontalAlignment");
        }
        get isWindowSyncedToVisibleRange() {
            return this.t7;
        }
        set isWindowSyncedToVisibleRange(a) {
            this.t7 = a;
            this.g("IsWindowSyncedToVisibleRange");
        }
        get indicatorTypes() {
            return this.tf;
        }
        set indicatorTypes(a) {
            this.tf = a;
            this.g("IndicatorTypes");
        }
        get overlayTypes() {
            return this.tk;
        }
        set overlayTypes(a) {
            this.tk = a;
            this.g("OverlayTypes");
        }
        get yAxisAbbreviateLargeNumbers() {
            return this.t9;
        }
        set yAxisAbbreviateLargeNumbers(a) {
            this.t9 = a;
            this.g("YAxisAbbreviateLargeNumbers");
        }
        get resolution() {
            return this.uu;
        }
        set resolution(a) {
            this.uu = a;
            this.g("Resolution");
        }
        get xAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.t8;
        }
        set xAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.t8 = a;
            this.g("XAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get yAxisEnhancedIntervalPreferMoreCategoryLabels() {
            return this.ua;
        }
        set yAxisEnhancedIntervalPreferMoreCategoryLabels(a) {
            this.ua = a;
            this.g("YAxisEnhancedIntervalPreferMoreCategoryLabels");
        }
        get zoomSliderType() {
            return this.wb;
        }
        set zoomSliderType(a) {
            this.wb = a;
            this.g("ZoomSliderType");
        }
        get negativeBrushes() {
            return this.tg;
        }
        set negativeBrushes(a) {
            this.tg = a;
            this.g("NegativeBrushes");
        }
        get negativeOutlines() {
            return this.th;
        }
        set negativeOutlines(a) {
            this.th = a;
            this.g("NegativeOutlines");
        }
        get overlayBrushes() {
            return this.ti;
        }
        set overlayBrushes(a) {
            this.ti = a;
            this.g("OverlayBrushes");
        }
        get overlayOutlines() {
            return this.tj;
        }
        set overlayOutlines(a) {
            this.tj = a;
            this.g("OverlayOutlines");
        }
        get volumeOutlines() {
            return this.tn;
        }
        set volumeOutlines(a) {
            this.tn = a;
            this.g("VolumeOutlines");
        }
        get volumeBrushes() {
            return this.tm;
        }
        set volumeBrushes(a) {
            this.tm = a;
            this.g("VolumeBrushes");
        }
        get indicatorNegativeBrushes() {
            return this.te;
        }
        set indicatorNegativeBrushes(a) {
            this.te = a;
            this.g("IndicatorNegativeBrushes");
        }
        get indicatorBrushes() {
            return this.tc;
        }
        set indicatorBrushes(a) {
            this.tc = a;
            this.g("IndicatorBrushes");
        }
        get volumeThickness() {
            return this.uw;
        }
        set volumeThickness(a) {
            this.uw = a;
            this.g("VolumeThickness");
        }
        get overlayThickness() {
            return this.ut;
        }
        set overlayThickness(a) {
            this.ut = a;
            this.g("OverlayThickness");
        }
        get overlayMultiplier() {
            return this.us;
        }
        set overlayMultiplier(a) {
            this.us = a;
            this.g("OverlayMultiplier");
        }
        get indicatorThickness() {
            return this.uq;
        }
        set indicatorThickness(a) {
            this.uq = a;
            this.g("IndicatorThickness");
        }
        get indicatorDisplayTypes() {
            return this.td;
        }
        set indicatorDisplayTypes(a) {
            this.td = a;
            this.g("IndicatorDisplayTypes");
        }
        get indicatorPeriod() {
            return this.vq;
        }
        set indicatorPeriod(a) {
            this.vq = a;
            this.g("IndicatorPeriod");
        }
        get indicatorMultiplier() {
            return this.up;
        }
        set indicatorMultiplier(a) {
            this.up = a;
            this.g("IndicatorMultiplier");
        }
        get indicatorSmoothingPeriod() {
            return this.vt;
        }
        set indicatorSmoothingPeriod(a) {
            this.vt = a;
            this.g("IndicatorSmoothingPeriod");
        }
        get indicatorShortPeriod() {
            return this.vr;
        }
        set indicatorShortPeriod(a) {
            this.vr = a;
            this.g("IndicatorShortPeriod");
        }
        get indicatorLongPeriod() {
            return this.vp;
        }
        set indicatorLongPeriod(a) {
            this.vp = a;
            this.g("IndicatorLongPeriod");
        }
        get indicatorSignalPeriod() {
            return this.vs;
        }
        set indicatorSignalPeriod(a) {
            this.vs = a;
            this.g("IndicatorSignalPeriod");
        }
        get rangeSelectorOptions() {
            return this.tl;
        }
        set rangeSelectorOptions(a) {
            this.tl = a;
            this.g("RangeSelectorOptions");
        }
        get customIndicatorNames() {
            return this.tb;
        }
        set customIndicatorNames(a) {
            this.tb = a;
            this.g("CustomIndicatorNames");
        }
        get isVerticalZoomEnabled() {
            return this.t6;
        }
        set isVerticalZoomEnabled(a) {
            this.t6 = a;
            this.g("IsVerticalZoomEnabled");
        }
        get zoomSliderXAxisMajorStroke() {
            return this.wc;
        }
        set zoomSliderXAxisMajorStroke(a) {
            this.wc = a;
            this.g("ZoomSliderXAxisMajorStroke");
        }
        get zoomSliderXAxisMajorStrokeThickness() {
            return this.u6;
        }
        set zoomSliderXAxisMajorStrokeThickness(a) {
            this.u6 = a;
            this.g("ZoomSliderXAxisMajorStrokeThickness");
        }
        get isLegendVisible() {
            return this.t4;
        }
        set isLegendVisible(a) {
            this.t4 = a;
            this.g("IsLegendVisible");
        }
        get xAxisMinimumValue() {
            return this.um;
        }
        set xAxisMinimumValue(a) {
            this.um = a;
            this.g("XAxisMinimumValue");
        }
        get xAxisMaximumValue() {
            return this.ul;
        }
        set xAxisMaximumValue(a) {
            this.ul = a;
            this.g("XAxisMaximumValue");
        }
        get xAxisBreaks() {
            return this.to;
        }
        set xAxisBreaks(a) {
            this.to = a;
            this.g("XAxisBreaks");
        }
        get applyCustomIndicatorsRef() {
            return this.v1;
        }
        set applyCustomIndicatorsRef(a) {
            this.v1 = a;
            this.g("ApplyCustomIndicatorsRef");
        }
    }
    FinancialChartDescription.$t = /*@__PURE__*/ markType(FinancialChartDescription, 'FinancialChartDescription', XYChartDescription.$);
    return FinancialChartDescription;
})();
