/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SeriesViewerDescription } from "./SeriesViewerDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var DataChartDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(DataChartDescription, _super);
    function DataChartDescription() {
        var _this = _super.call(this) || this;
        _this.g9 = false;
        _this.hz = 0;
        _this.h0 = 0;
        _this.hr = 0;
        _this.hs = 0;
        _this.g8 = false;
        _this.ha = false;
        _this.il = null;
        _this.g7 = false;
        _this.hu = 0;
        _this.ht = 0;
        _this.hd = false;
        _this.hb = false;
        _this.hc = false;
        _this.he = false;
        _this.ig = null;
        _this.ik = null;
        _this.ii = null;
        _this.ij = null;
        _this.g5 = null;
        _this.ho = 0;
        _this.hq = 0;
        _this.hp = 0;
        _this.hn = 0;
        _this.ih = null;
        _this.io = null;
        _this.ip = null;
        _this.hw = 0;
        _this.hy = 0;
        _this.hx = 0;
        _this.hv = 0;
        _this.iq = null;
        _this.im = null;
        return _this;
    }
    DataChartDescription.prototype.get_type = function () {
        return "DataChart";
    };
    Object.defineProperty(DataChartDescription.prototype, "isSquare", {
        get: function () {
            return this.g9;
        },
        set: function (a) {
            this.g9 = a;
            this.g("IsSquare");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "windowScaleHorizontal", {
        get: function () {
            return this.hz;
        },
        set: function (a) {
            this.hz = a;
            this.g("WindowScaleHorizontal");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "windowScaleVertical", {
        get: function () {
            return this.h0;
        },
        set: function (a) {
            this.h0 = a;
            this.g("WindowScaleVertical");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualWindowScaleHorizontal", {
        get: function () {
            return this.hr;
        },
        set: function (a) {
            this.hr = a;
            this.g("ActualWindowScaleHorizontal");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualWindowScaleVertical", {
        get: function () {
            return this.hs;
        },
        set: function (a) {
            this.hs = a;
            this.g("ActualWindowScaleVertical");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "isHorizontalZoomEnabled", {
        get: function () {
            return this.g8;
        },
        set: function (a) {
            this.g8 = a;
            this.g("IsHorizontalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "isVerticalZoomEnabled", {
        get: function () {
            return this.ha;
        },
        set: function (a) {
            this.ha = a;
            this.g("IsVerticalZoomEnabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "gridMode", {
        get: function () {
            return this.il;
        },
        set: function (a) {
            this.il = a;
            this.g("GridMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "alignsGridLinesToPixels", {
        get: function () {
            return this.g7;
        },
        set: function (a) {
            this.g7 = a;
            this.g("AlignsGridLinesToPixels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoExpandMarginMaximumValue", {
        get: function () {
            return this.hu;
        },
        set: function (a) {
            this.hu = a;
            this.g("AutoExpandMarginMaximumValue");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoExpandMarginExtraPadding", {
        get: function () {
            return this.ht;
        },
        set: function (a) {
            this.ht = a;
            this.g("AutoExpandMarginExtraPadding");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldSuppressAxisLabelTruncation", {
        get: function () {
            return this.hd;
        },
        set: function (a) {
            this.hd = a;
            this.g("ShouldSuppressAxisLabelTruncation");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldAutoExpandMarginForInitialLabels", {
        get: function () {
            return this.hb;
        },
        set: function (a) {
            this.hb = a;
            this.g("ShouldAutoExpandMarginForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "shouldConsiderAutoRotationForInitialLabels", {
        get: function () {
            return this.hc;
        },
        set: function (a) {
            this.hc = a;
            this.g("ShouldConsiderAutoRotationForInitialLabels");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "suppressAutoMarginAndAngleRecalculation", {
        get: function () {
            return this.he;
        },
        set: function (a) {
            this.he = a;
            this.g("SuppressAutoMarginAndAngleRecalculation");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "autoMarginAndAngleUpdateMode", {
        get: function () {
            return this.ig;
        },
        set: function (a) {
            this.ig = a;
            this.g("AutoMarginAndAngleUpdateMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisStroke", {
        get: function () {
            return this.ik;
        },
        set: function (a) {
            this.ik = a;
            this.g("DefaultAxisStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisMajorStroke", {
        get: function () {
            return this.ii;
        },
        set: function (a) {
            this.ii = a;
            this.g("DefaultAxisMajorStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "defaultAxisMinorStroke", {
        get: function () {
            return this.ij;
        },
        set: function (a) {
            this.ij = a;
            this.g("DefaultAxisMinorStroke");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "axes", {
        get: function () {
            return this.g5;
        },
        set: function (a) {
            this.g5 = a;
            this.g("Axes");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginLeft", {
        get: function () {
            return this.ho;
        },
        set: function (a) {
            this.ho = a;
            this.g("ActualPlotAreaMarginLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginTop", {
        get: function () {
            return this.hq;
        },
        set: function (a) {
            this.hq = a;
            this.g("ActualPlotAreaMarginTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginRight", {
        get: function () {
            return this.hp;
        },
        set: function (a) {
            this.hp = a;
            this.g("ActualPlotAreaMarginRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "actualPlotAreaMarginBottom", {
        get: function () {
            return this.hn;
        },
        set: function (a) {
            this.hn = a;
            this.g("ActualPlotAreaMarginBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "computedPlotAreaMarginMode", {
        get: function () {
            return this.ih;
        },
        set: function (a) {
            this.ih = a;
            this.g("ComputedPlotAreaMarginMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "seriesPlotAreaMarginHorizontalMode", {
        get: function () {
            return this.io;
        },
        set: function (a) {
            this.io = a;
            this.g("SeriesPlotAreaMarginHorizontalMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "seriesPlotAreaMarginVerticalMode", {
        get: function () {
            return this.ip;
        },
        set: function (a) {
            this.ip = a;
            this.g("SeriesPlotAreaMarginVerticalMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginLeft", {
        get: function () {
            return this.hw;
        },
        set: function (a) {
            this.hw = a;
            this.g("PlotAreaMarginLeft");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginTop", {
        get: function () {
            return this.hy;
        },
        set: function (a) {
            this.hy = a;
            this.g("PlotAreaMarginTop");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginRight", {
        get: function () {
            return this.hx;
        },
        set: function (a) {
            this.hx = a;
            this.g("PlotAreaMarginRight");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "plotAreaMarginBottom", {
        get: function () {
            return this.hv;
        },
        set: function (a) {
            this.hv = a;
            this.g("PlotAreaMarginBottom");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "width", {
        get: function () {
            return this.iq;
        },
        set: function (a) {
            this.iq = a;
            this.g("Width");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(DataChartDescription.prototype, "height", {
        get: function () {
            return this.im;
        },
        set: function (a) {
            this.im = a;
            this.g("Height");
        },
        enumerable: false,
        configurable: true
    });
    DataChartDescription.$t = markType(DataChartDescription, 'DataChartDescription', SeriesViewerDescription.$);
    return DataChartDescription;
}(SeriesViewerDescription));
export { DataChartDescription };
