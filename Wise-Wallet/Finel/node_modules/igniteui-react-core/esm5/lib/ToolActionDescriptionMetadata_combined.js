/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { Base, String_$type, markType } from "./type";
import { Dictionary$2 } from "./Dictionary$2";
import { ToolCommandEventArgsDescriptionMetadata } from "./ToolCommandEventArgsDescriptionMetadata";
import { ToolActionEventDetailDescription } from "./ToolActionEventDetailDescription";
import { ToolActionPerformedEventArgsDescription } from "./ToolActionPerformedEventArgsDescription";
/**
 * @hidden
 */
var ToolActionDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolActionDescriptionMetadata, _super);
    function ToolActionDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolActionDescriptionMetadata.b = function (a) {
        if (ToolActionDescriptionMetadata.a == null) {
            ToolActionDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ToolActionDescriptionMetadata.c(ToolActionDescriptionMetadata.a);
        }
        if (a.k(ToolActionDescriptionMetadata.a)) {
            return;
        }
        a.ab(ToolActionDescriptionMetadata.a);
        ToolCommandEventArgsDescriptionMetadata.d(a);
        ToolActionPerformedEventArgsDescriptionMetadata.d(a);
    };
    ToolActionDescriptionMetadata.c = function (a) {
        a.item("Actions", "Collection:ToolAction:ToolActionCollection:ToolAction");
        a.item("Width", "Number:double");
        a.item("ParentId", "String");
        a.item("BeforeId", "String");
        a.item("AfterId", "String");
        a.item("OverlayId", "String");
        a.item("CommandId", "String");
        a.item("CommandArgument", "String");
        a.item("CommandArgumentValue", "Unknown");
        a.item("PaddingLeft", "Number:double");
        a.item("ActualPaddingLeft", "Number:double");
        a.item("PaddingRight", "Number:double");
        a.item("ActualPaddingRight", "Number:double");
        a.item("PaddingBottom", "Number:double");
        a.item("ActualPaddingBottom", "Number:double");
        a.item("PaddingTop", "Number:double");
        a.item("ActualPaddingTop", "Number:double");
        a.item("ActualHoverBackground", "Brush");
        a.item("HoverBackground", "Brush");
        a.item("ActualBackground", "Brush");
        a.item("Background", "Brush");
        a.item("ActualTextColor", "Brush");
        a.item("TextColor", "Brush");
        a.item("ActualDisabledTextColor", "Brush");
        a.item("DisabledTextColor", "Brush");
        a.item("FontFamily", "(w:FontFamily/FontFamilyTransform,xam:FontFamily,wf:FontFamily,web:textStyle/FontFamilyTransform)String");
        a.item("FontSize", "(w:FontSize,xam:FontSize,wf:FontSize,web:textStyle/FontSizeTransform)Number:double");
        a.item("FontStyle", "(w:FontStyle/FontStyleTransform,xam:FontFamily/FontStyleTransform,wf:FontFamily/FontStyleTransform,web:textStyle/FontStyleTransform)String");
        a.item("FontWeight", "(w:FontWeight/FontWeightTransform,xam:FontFamily/FontWeightTransform,wf:FontFamily/FontWeightTransform,web:textStyle/FontWeightTransform)String");
        a.item("IsDisabled", "Boolean");
        a.item("Name", "String");
        a.item("Title", "String");
        a.item("Subtitle", "String");
        a.item("IconName", "String");
        a.item("IconCollectionName", "String");
        a.item("IconViewBoxLeft", "Number:double");
        a.item("IconViewBoxTop", "Number:double");
        a.item("IconViewBoxWidth", "Number:double");
        a.item("IconViewBoxHeight", "Number:double");
        a.item("IconFill", "Brush");
        a.item("ActualIconFill", "Brush");
        a.item("IconStroke", "Brush");
        a.item("ActualIconStroke", "Brush");
        a.item("Visibility", "ExportedType:string:Visibility");
        a.item("Visibility@names", "Visible;Collapsed");
        a.item("OnCommandRef", "EventRef::onCommand");
        a.item("PerformedRef", "EventRef::performed");
    };
    ToolActionDescriptionMetadata.d = function (a) {
        ToolActionDescriptionMetadata.b(a);
        a.ac("ToolAction", ToolActionDescriptionMetadata.a);
    };
    ToolActionDescriptionMetadata.$t = markType(ToolActionDescriptionMetadata, 'ToolActionDescriptionMetadata');
    ToolActionDescriptionMetadata.a = null;
    return ToolActionDescriptionMetadata;
}(Base));
export { ToolActionDescriptionMetadata };
/**
 * @hidden
 */
var ToolActionEventDetailDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolActionEventDetailDescriptionMetadata, _super);
    function ToolActionEventDetailDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolActionEventDetailDescriptionMetadata.b = function (a) {
        if (ToolActionEventDetailDescriptionMetadata.a == null) {
            ToolActionEventDetailDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ToolActionEventDetailDescriptionMetadata.c(ToolActionEventDetailDescriptionMetadata.a);
        }
        if (a.k(ToolActionEventDetailDescriptionMetadata.a)) {
            return;
        }
        a.ab(ToolActionEventDetailDescriptionMetadata.a);
        ToolActionDescriptionMetadata.d(a);
    };
    ToolActionEventDetailDescriptionMetadata.c = function (a) {
        a.item("Action", "ExportedType:ToolAction");
        a.item("ActionType", "ExportedType:string:ToolActionType");
        a.item("ActionType@names", "Unknown;GroupHeader;Checkbox;IconButton;Label;NumberInput;Radio;Separator;IconMenu;Button");
        a.item("IsModified", "Boolean");
        a.item("BoolValue", "Boolean");
        a.item("NumberValue", "Number:double");
        a.item("DateTimeValue", "Date");
        a.item("UntypedValueRef", "(w:UntypedValue,wf:UntypedValue)DataRef");
    };
    ToolActionEventDetailDescriptionMetadata.d = function (a) {
        ToolActionEventDetailDescriptionMetadata.b(a);
        a.ad("ToolActionEventDetail", function () { return new ToolActionEventDetailDescription(); });
        a.ac("ToolActionEventDetail", ToolActionEventDetailDescriptionMetadata.a);
    };
    ToolActionEventDetailDescriptionMetadata.$t = markType(ToolActionEventDetailDescriptionMetadata, 'ToolActionEventDetailDescriptionMetadata');
    ToolActionEventDetailDescriptionMetadata.a = null;
    return ToolActionEventDetailDescriptionMetadata;
}(Base));
export { ToolActionEventDetailDescriptionMetadata };
/**
 * @hidden
 */
var ToolActionPerformedEventArgsDescriptionMetadata = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(ToolActionPerformedEventArgsDescriptionMetadata, _super);
    function ToolActionPerformedEventArgsDescriptionMetadata() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ToolActionPerformedEventArgsDescriptionMetadata.b = function (a) {
        if (ToolActionPerformedEventArgsDescriptionMetadata.a == null) {
            ToolActionPerformedEventArgsDescriptionMetadata.a = new Dictionary$2(String_$type, String_$type, 0);
            ToolActionPerformedEventArgsDescriptionMetadata.c(ToolActionPerformedEventArgsDescriptionMetadata.a);
        }
        if (a.k(ToolActionPerformedEventArgsDescriptionMetadata.a)) {
            return;
        }
        a.ab(ToolActionPerformedEventArgsDescriptionMetadata.a);
        ToolActionEventDetailDescriptionMetadata.d(a);
    };
    ToolActionPerformedEventArgsDescriptionMetadata.c = function (a) {
        a.item("IsAggregate", "Boolean");
        a.item("Detail", "ExportedType:ToolActionEventDetail");
        a.item("DetailCollection", "Collection:ToolActionEventDetail:ToolActionEventDetailCollection:ToolActionEventDetail");
    };
    ToolActionPerformedEventArgsDescriptionMetadata.d = function (a) {
        ToolActionPerformedEventArgsDescriptionMetadata.b(a);
        a.ad("ToolActionPerformedEventArgs", function () { return new ToolActionPerformedEventArgsDescription(); });
        a.ac("ToolActionPerformedEventArgs", ToolActionPerformedEventArgsDescriptionMetadata.a);
    };
    ToolActionPerformedEventArgsDescriptionMetadata.$t = markType(ToolActionPerformedEventArgsDescriptionMetadata, 'ToolActionPerformedEventArgsDescriptionMetadata');
    ToolActionPerformedEventArgsDescriptionMetadata.a = null;
    return ToolActionPerformedEventArgsDescriptionMetadata;
}(Base));
export { ToolActionPerformedEventArgsDescriptionMetadata };
