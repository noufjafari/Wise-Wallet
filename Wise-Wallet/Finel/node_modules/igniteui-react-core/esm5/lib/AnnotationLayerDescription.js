/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { SeriesDescription } from "./SeriesDescription";
import { markType } from "./type";
/**
 * @hidden
 */
var AnnotationLayerDescription = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(AnnotationLayerDescription, _super);
    function AnnotationLayerDescription() {
        var _this = _super.call(this) || this;
        _this.dp = false;
        _this.dq = false;
        _this.dk = null;
        _this.dm = false;
        _this.ea = null;
        _this.d7 = null;
        _this.dz = 0;
        _this.dw = 0;
        _this.eb = null;
        _this.d8 = null;
        _this.ec = null;
        _this.d9 = null;
        _this.dy = 0;
        _this.dv = 0;
        _this.d0 = 0;
        _this.dx = 0;
        _this.de = null;
        _this.dc = null;
        _this.df = null;
        _this.dd = null;
        _this.dn = false;
        return _this;
    }
    AnnotationLayerDescription.prototype.get_type = function () {
        return "AnnotationLayer";
    };
    Object.defineProperty(AnnotationLayerDescription.prototype, "useIndex", {
        get: function () {
            return this.dp;
        },
        set: function (a) {
            this.dp = a;
            this.g("UseIndex");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "useLegend", {
        get: function () {
            return this.dq;
        },
        set: function (a) {
            this.dq = a;
            this.g("UseLegend");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "cursorPosition", {
        get: function () {
            return this.dk;
        },
        set: function (a) {
            this.dk = a;
            this.g("CursorPosition");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "isDefaultCrosshairDisabled", {
        get: function () {
            return this.dm;
        },
        set: function (a) {
            this.dm = a;
            this.g("IsDefaultCrosshairDisabled");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "appearanceMode", {
        get: function () {
            return this.ea;
        },
        set: function (a) {
            this.ea = a;
            this.g("AppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualAppearanceMode", {
        get: function () {
            return this.d7;
        },
        set: function (a) {
            this.d7 = a;
            this.g("ActualAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "shiftAmount", {
        get: function () {
            return this.dz;
        },
        set: function (a) {
            this.dz = a;
            this.g("ShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualShiftAmount", {
        get: function () {
            return this.dw;
        },
        set: function (a) {
            this.dw = a;
            this.g("ActualShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "horizontalAppearanceMode", {
        get: function () {
            return this.eb;
        },
        set: function (a) {
            this.eb = a;
            this.g("HorizontalAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualHorizontalAppearanceMode", {
        get: function () {
            return this.d8;
        },
        set: function (a) {
            this.d8 = a;
            this.g("ActualHorizontalAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "verticalAppearanceMode", {
        get: function () {
            return this.ec;
        },
        set: function (a) {
            this.ec = a;
            this.g("VerticalAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualVerticalAppearanceMode", {
        get: function () {
            return this.d9;
        },
        set: function (a) {
            this.d9 = a;
            this.g("ActualVerticalAppearanceMode");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "horizontalShiftAmount", {
        get: function () {
            return this.dy;
        },
        set: function (a) {
            this.dy = a;
            this.g("HorizontalShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualHorizontalShiftAmount", {
        get: function () {
            return this.dv;
        },
        set: function (a) {
            this.dv = a;
            this.g("ActualHorizontalShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "verticalShiftAmount", {
        get: function () {
            return this.d0;
        },
        set: function (a) {
            this.d0 = a;
            this.g("VerticalShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualVerticalShiftAmount", {
        get: function () {
            return this.dx;
        },
        set: function (a) {
            this.dx = a;
            this.g("ActualVerticalShiftAmount");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "horizontalDashArray", {
        get: function () {
            return this.de;
        },
        set: function (a) {
            this.de = a;
            this.g("HorizontalDashArray");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualHorizontalDashArray", {
        get: function () {
            return this.dc;
        },
        set: function (a) {
            this.dc = a;
            this.g("ActualHorizontalDashArray");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "verticalDashArray", {
        get: function () {
            return this.df;
        },
        set: function (a) {
            this.df = a;
            this.g("VerticalDashArray");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "actualVerticalDashArray", {
        get: function () {
            return this.dd;
        },
        set: function (a) {
            this.dd = a;
            this.g("ActualVerticalDashArray");
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(AnnotationLayerDescription.prototype, "shouldRenderAsOverlay", {
        get: function () {
            return this.dn;
        },
        set: function (a) {
            this.dn = a;
            this.g("ShouldRenderAsOverlay");
        },
        enumerable: false,
        configurable: true
    });
    AnnotationLayerDescription.$t = markType(AnnotationLayerDescription, 'AnnotationLayerDescription', SeriesDescription.$);
    return AnnotationLayerDescription;
}(SeriesDescription));
export { AnnotationLayerDescription };
