import { Description } from "./Description";
import { RadialGaugeRangeDescription } from "./RadialGaugeRangeDescription";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare class RadialGaugeDescription extends Description {
    static $t: Type;
    private cv;
    get fontFamily(): string;
    set fontFamily(a: string);
    private ad;
    get fontSize(): number;
    set fontSize(a: number);
    private cx;
    get fontWeight(): string;
    set fontWeight(a: string);
    private cw;
    get fontStyle(): string;
    set fontStyle(a: string);
    private de;
    get width(): string;
    set width(a: string);
    private cz;
    get height(): string;
    set height(a: string);
    private co;
    get background(): string;
    set background(a: string);
    protected get_type(): string;
    get type(): string;
    constructor();
    private i;
    get rangeBrushes(): string[];
    set rangeBrushes(a: string[]);
    private j;
    get rangeOutlines(): string[];
    set rangeOutlines(a: string[]);
    private ai;
    get minimumValue(): number;
    set minimumValue(a: number);
    private u;
    get actualMinimumValue(): number;
    set actualMinimumValue(a: number);
    private ah;
    get maximumValue(): number;
    set maximumValue(a: number);
    private t;
    get actualMaximumValue(): number;
    set actualMaximumValue(a: number);
    private ae;
    get interval(): number;
    set interval(a: number);
    private ab;
    get centerX(): number;
    set centerX(a: number);
    private ac;
    get centerY(): number;
    set centerY(a: number);
    private ba;
    get value(): number;
    set value(a: number);
    private a4;
    get scaleStartAngle(): number;
    set scaleStartAngle(a: number);
    private a1;
    get scaleEndAngle(): number;
    set scaleEndAngle(a: number);
    private da;
    get scaleSweepDirection(): string;
    set scaleSweepDirection(a: string);
    private cj;
    get transitionDuration(): number;
    set transitionDuration(a: number);
    private dc;
    get transitionEasingFunctionRef(): string;
    set transitionEasingFunctionRef(a: string);
    private c2;
    get needleBrush(): string;
    set needleBrush(a: string);
    private c3;
    get needleOutline(): string;
    set needleOutline(a: string);
    private aw;
    get needleStartExtent(): number;
    set needleStartExtent(a: number);
    private ap;
    get needleEndExtent(): number;
    set needleEndExtent(a: number);
    private c7;
    get needleShape(): string;
    set needleShape(a: string);
    private ax;
    get needleStartWidthRatio(): number;
    set needleStartWidthRatio(a: number);
    private aq;
    get needleEndWidthRatio(): number;
    set needleEndWidthRatio(a: number);
    private ao;
    get needleBaseFeatureWidthRatio(): number;
    set needleBaseFeatureWidthRatio(a: number);
    private an;
    get needleBaseFeatureExtent(): number;
    set needleBaseFeatureExtent(a: number);
    private av;
    get needlePointFeatureWidthRatio(): number;
    set needlePointFeatureWidthRatio(a: number);
    private au;
    get needlePointFeatureExtent(): number;
    set needlePointFeatureExtent(a: number);
    private at;
    get needlePivotWidthRatio(): number;
    set needlePivotWidthRatio(a: number);
    private ar;
    get needlePivotInnerWidthRatio(): number;
    set needlePivotInnerWidthRatio(a: number);
    private c6;
    get needlePivotShape(): string;
    set needlePivotShape(a: string);
    private a5;
    get scaleStartExtent(): number;
    set scaleStartExtent(a: number);
    private c4;
    get needlePivotBrush(): string;
    set needlePivotBrush(a: string);
    private c5;
    get needlePivotOutline(): string;
    set needlePivotOutline(a: string);
    private ay;
    get needleStrokeThickness(): number;
    set needleStrokeThickness(a: number);
    private as;
    get needlePivotStrokeThickness(): number;
    set needlePivotStrokeThickness(a: number);
    private a2;
    get scaleEndExtent(): number;
    set scaleEndExtent(a: number);
    private af;
    get labelExtent(): number;
    set labelExtent(a: number);
    private ag;
    get labelInterval(): number;
    set labelInterval(a: number);
    private a7;
    get tickStartExtent(): number;
    set tickStartExtent(a: number);
    private a6;
    get tickEndExtent(): number;
    set tickEndExtent(a: number);
    private a8;
    get tickStrokeThickness(): number;
    set tickStrokeThickness(a: number);
    private db;
    get tickBrush(): string;
    set tickBrush(a: string);
    private cu;
    get fontBrush(): string;
    set fontBrush(a: string);
    private al;
    get minorTickStartExtent(): number;
    set minorTickStartExtent(a: number);
    private ak;
    get minorTickEndExtent(): number;
    set minorTickEndExtent(a: number);
    private am;
    get minorTickStrokeThickness(): number;
    set minorTickStrokeThickness(a: number);
    private c1;
    get minorTickBrush(): string;
    set minorTickBrush(a: string);
    private aj;
    get minorTickCount(): number;
    set minorTickCount(a: number);
    private c8;
    get scaleBrush(): string;
    set scaleBrush(a: string);
    private cp;
    get backingBrush(): string;
    set backingBrush(a: string);
    private cq;
    get backingOutline(): string;
    set backingOutline(a: string);
    private aa;
    get backingStrokeThickness(): number;
    set backingStrokeThickness(a: number);
    private y;
    get backingOuterExtent(): number;
    set backingOuterExtent(a: number);
    private z;
    get backingOversweep(): number;
    set backingOversweep(a: number);
    private a3;
    get scaleOversweep(): number;
    set scaleOversweep(a: number);
    private c9;
    get scaleOversweepShape(): string;
    set scaleOversweepShape(a: string);
    private w;
    get backingCornerRadius(): number;
    set backingCornerRadius(a: number);
    private x;
    get backingInnerExtent(): number;
    set backingInnerExtent(a: number);
    private cr;
    get backingShape(): string;
    set backingShape(a: string);
    private k;
    get ranges(): RadialGaugeRangeDescription[];
    set ranges(a: RadialGaugeRangeDescription[]);
    private a0;
    get radiusMultiplier(): number;
    set radiusMultiplier(a: number);
    private cs;
    get duplicateLabelOmissionStrategy(): string;
    set duplicateLabelOmissionStrategy(a: string);
    private q;
    get isNeedleDraggingEnabled(): boolean;
    set isNeedleDraggingEnabled(a: boolean);
    private p;
    get isNeedleDraggingConstrained(): boolean;
    set isNeedleDraggingConstrained(a: boolean);
    private ct;
    get font(): string;
    set font(a: string);
    private c0;
    get labelFormat(): string;
    set labelFormat(a: string);
    private h;
    get labelFormatSpecifiers(): FormatSpecifierDescription[];
    set labelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private a9;
    get transitionProgress(): number;
    set transitionProgress(a: number);
    private az;
    get pixelScalingRatio(): number;
    set pixelScalingRatio(a: number);
    private v;
    get actualPixelScalingRatio(): number;
    set actualPixelScalingRatio(a: number);
    private cy;
    get formatLabelRef(): string;
    set formatLabelRef(a: string);
    private cn;
    get alignLabelRef(): string;
    set alignLabelRef(a: string);
    private dd;
    get valueChangedRef(): string;
    set valueChangedRef(a: string);
    private cm;
    get actualMinimumValueChangeRef(): string;
    set actualMinimumValueChangeRef(a: string);
    private cl;
    get actualMaximumValueChangeRef(): string;
    set actualMaximumValueChangeRef(a: string);
}
