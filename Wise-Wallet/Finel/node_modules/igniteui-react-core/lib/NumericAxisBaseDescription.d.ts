import { AxisDescription } from "./AxisDescription";
import { FormatSpecifierDescription } from "./FormatSpecifierDescription";
import { Type } from "./type";
/**
 * @hidden
 */
export declare abstract class NumericAxisBaseDescription extends AxisDescription {
    static $t: Type;
    protected get_type(): string;
    constructor();
    private es;
    get autoRangeBufferMode(): string;
    set autoRangeBufferMode(a: string);
    private d7;
    get minimumValue(): number;
    set minimumValue(a: number);
    private d1;
    get actualMinimumValue(): number;
    set actualMinimumValue(a: number);
    private d4;
    get actualVisibleMinimumValue(): number;
    set actualVisibleMinimumValue(a: number);
    private d6;
    get maximumValue(): number;
    set maximumValue(a: number);
    private d0;
    get actualMaximumValue(): number;
    set actualMaximumValue(a: number);
    private d3;
    get actualVisibleMaximumValue(): number;
    set actualVisibleMaximumValue(a: number);
    private d5;
    get interval(): number;
    set interval(a: number);
    private dz;
    get actualInterval(): number;
    set actualInterval(a: number);
    private d8;
    get minorInterval(): number;
    set minorInterval(a: number);
    private d2;
    get actualMinorInterval(): number;
    set actualMinorInterval(a: number);
    private d9;
    get referenceValue(): number;
    set referenceValue(a: number);
    private dt;
    get isLogarithmic(): boolean;
    set isLogarithmic(a: boolean);
    private dq;
    get actualIsLogarithmic(): boolean;
    set actualIsLogarithmic(a: boolean);
    private dr;
    get favorLabellingScaleEnd(): boolean;
    set favorLabellingScaleEnd(a: boolean);
    private el;
    get logarithmBase(): number;
    set logarithmBase(a: number);
    private et;
    get formatAbbreviatedLabelRef(): string;
    set formatAbbreviatedLabelRef(a: string);
    private en;
    get abbreviatedLabelFormat(): string;
    set abbreviatedLabelFormat(a: string);
    private dm;
    get abbreviatedLabelFormatSpecifiers(): FormatSpecifierDescription[];
    set abbreviatedLabelFormatSpecifiers(a: FormatSpecifierDescription[]);
    private ds;
    get isFormattingAbbreviatedLargeNumber(): boolean;
    set isFormattingAbbreviatedLargeNumber(a: boolean);
    private dp;
    get abbreviateLargeNumbers(): boolean;
    set abbreviateLargeNumbers(a: boolean);
    private eq;
    get actualMinimumValueChangeRef(): string;
    set actualMinimumValueChangeRef(a: string);
    private ep;
    get actualMaximumValueChangeRef(): string;
    set actualMaximumValueChangeRef(a: string);
    private eo;
    get actualIntervalChangeRef(): string;
    set actualIntervalChangeRef(a: string);
    private er;
    get actualMinorIntervalChangeRef(): string;
    set actualMinorIntervalChangeRef(a: string);
}
