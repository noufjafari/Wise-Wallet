import { Base, Type, INotifyPropertyChanged, PropertyChangedEventArgs } from "./type";
import { DomRenderer, DomWrapper } from "./dom";
import { Size } from "./Size";
import { Brush } from "./Brush";
import { Popup_OuterAnimationInfo } from "./Popup_OuterAnimationInfo";
import { Popup_InnerAnimationInfo } from "./Popup_InnerAnimationInfo";
import { AnimationKeyFrameEffect } from "./AnimationKeyFrameEffect";
import { AnimationKeyFrameEffectTiming } from "./AnimationKeyFrameEffectTiming";
import { UIElementPropertyId } from "./UIElementPropertyId";
import { Rect } from "./Rect";
import { PopupAlignment } from "./PopupAlignment";
import { PopupDirection } from "./PopupDirection";
import { PopupPointerPosition } from "./PopupPointerPosition";
import { PopupAnimationType } from "./PopupAnimationType";
import { OnClosedEventArgs } from "./OnClosedEventArgs";
import { MouseEventArgs } from "./MouseEventArgs";
import { FocusEventArgs } from "./FocusEventArgs";
import { OnPopupEventArgs } from "./OnPopupEventArgs";
import { PopupVisualModelExport } from "./PopupVisualModelExport";
/**
 * @hidden
 */
export declare class PopupView extends Base {
    static $t: Type;
    private t;
    private f;
    private ab;
    private aa;
    private z;
    private w;
    private y;
    private x;
    private ad;
    private k;
    private m;
    protected get g(): Popup;
    protected get u(): DomRenderer;
    protected as(): void;
    a5(): void;
    a3(): void;
    a4(): void;
    a6(): void;
    private at;
    private au;
    private aq;
    private ar;
    ag(): void;
    ah(a: Popup_OuterAnimationInfo, b: Popup_InnerAnimationInfo): {
        p0?: Popup_OuterAnimationInfo;
        p1?: Popup_InnerAnimationInfo;
    };
    ai(a: number): void;
    ay(): void;
    aj(a: any): void;
    private v;
    private ac;
    private ap;
    i(a: any): boolean;
    ax(a: any): void;
    d(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    e(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    ak(): void;
    c(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    b(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    a(a: AnimationKeyFrameEffectTiming): AnimationKeyFrameEffect;
    h(): UIElementPropertyId;
    private a8;
    get a9(): Size;
    private n;
    private o;
    private static af;
    private static ae;
    a7(a: Rect, b: PopupDirection, c: PopupAlignment): Rect;
    private j;
    an(): void;
    private az;
    av(a: DomRenderer): void;
    private l;
    private a2;
    protected al(a: DomWrapper): void;
    am(a: Popup): void;
    ao(): void;
    aw(): void;
    a1(a: boolean): void;
    a0(a: boolean): void;
}
/**
 * @hidden
 */
export declare class Popup extends Base implements INotifyPropertyChanged {
    static $t: Type;
    private o;
    private h;
    private cg;
    private ce;
    private x;
    private y;
    get ch(): Rect;
    get cf(): Rect;
    constructor();
    onClosed: (sender: any, args: OnClosedEventArgs) => void;
    onPopup: (sender: any, args: OnPopupEventArgs) => void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected bt(a: string, b: any, c: any): void;
    popupMouseEnter: (sender: any, args: MouseEventArgs) => void;
    popupMouseLeave: (sender: any, args: MouseEventArgs) => void;
    popupGotFocus: (sender: any, args: FocusEventArgs) => void;
    popupLostFocus: (sender: any, args: FocusEventArgs) => void;
    br(): void;
    bs(): void;
    bp(): void;
    bq(a: any): void;
    s: PopupView;
    private ac;
    get ak(): boolean;
    set ak(a: boolean);
    private au;
    get av(): number;
    set av(a: number);
    private af;
    get ag(): boolean;
    set ag(a: boolean);
    private m;
    get n(): PopupAnimationType;
    set n(a: PopupAnimationType);
    private as;
    get ax(): number;
    set ax(a: number);
    static aw: number;
    private ar;
    get at(): number;
    set at(a: number);
    private an;
    get ao(): boolean;
    static cc: Brush;
    private b3;
    get b8(): Brush;
    set b8(a: Brush);
    static cb: Brush;
    private b2;
    get b7(): Brush;
    set b7(a: Brush);
    static ca: Brush;
    private b1;
    get b6(): Brush;
    set b6(a: Brush);
    private b4;
    get b9(): Brush;
    set b9(a: Brush);
    private ap;
    get aq(): number;
    set aq(a: number);
    private ad;
    get al(): boolean;
    set al(a: boolean);
    private ab;
    get ai(): boolean;
    set ai(a: boolean);
    private ae;
    get am(): boolean;
    set am(a: boolean);
    private p;
    get q(): PopupPointerPosition;
    set q(a: PopupPointerPosition);
    private b5;
    get cd(): Brush;
    set cd(a: Brush);
    protected r(): PopupView;
    protected bv(a: string, b: any, c: any): void;
    bi(): void;
    private v;
    private w;
    private a;
    private b;
    private bl;
    private f;
    private g;
    aj(): boolean;
    bm(): void;
    private bu;
    private by;
    private bz;
    private i;
    private j;
    private l;
    private k;
    contains(a: any): boolean;
    appendPopupContent(a: any): void;
    removePopupContent(a: any): void;
    bj(): void;
    destroy(): void;
    showRelativeToExclusionRect(a: Rect, b: PopupDirection, c: PopupAlignment): void;
    bn(a: Rect): void;
    notifySizeChanged(): void;
    provideRenderer(a: DomRenderer): void;
    ay(): any;
    ba(): string;
    c(): PopupVisualModelExport;
}
