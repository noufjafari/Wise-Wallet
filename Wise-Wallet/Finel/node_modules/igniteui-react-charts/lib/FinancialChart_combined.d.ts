import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { DomWrapper } from "igniteui-react-core";
import { EventArgs, IList, Type } from "igniteui-react-core";
import { IZoomSlider } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DomainType } from "./DomainType";
import { FinancialChartVolumeType } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode } from "./FinancialChartYAxisMode";
import { FinancialChartType } from "./FinancialChartType";
import { HorizontalAlignment } from "igniteui-react-core";
import { FinancialIndicatorTypeCollection } from "./FinancialIndicatorTypeCollection";
import { FinancialOverlayTypeCollection } from "./FinancialOverlayTypeCollection";
import { FinancialChartZoomSliderType } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { IndicatorDisplayTypeCollection } from "./IndicatorDisplayTypeCollection";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { CustomIndicatorNameCollection } from "./CustomIndicatorNameCollection";
import { IChartLegend } from "igniteui-react-core";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { Series } from "./Series";
import { Axis } from "./Axis";
import { DataSeries } from "igniteui-react-core";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerType } from "./MarkerType";
import { IZoomableCategoryAxis } from "./IZoomableCategoryAxis";
import { TitleSettings } from "./TitleSettings";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType } from "igniteui-react-core";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorVisualData } from "./FinancialChartRangeSelectorVisualData";
/**
 * @hidden
 */
export declare class FinancialChart extends XYChart {
    static $t: Type;
    protected sz(a: string, b: any, c: any): void;
    private ale;
    private ald;
    private ala;
    private aln;
    private aes;
    provideGrid(a: DomWrapper): void;
    onDocumentClick(a: Event): void;
    private ahq;
    private aho;
    private ahl;
    private ahn;
    private ahp;
    private ahm;
    getContext(): FinancialChartContext;
    provideContainer(a: any): void;
    private aly;
    private amc;
    private aku;
    private ama;
    setGridRows(): void;
    protected r9(): void;
    private alu;
    private alv;
    private al4;
    private akt;
    private alk;
    protected r6(a: XamDataChart): void;
    private amf;
    private ami;
    private amg;
    private amh;
    ag2(): number;
    sh(source_: any, a: number, b: any): void;
    si(source_: any, a: number, b: any): void;
    sg(source_: any): void;
    sk(source_: any, a: number, b: any, c: any): void;
    protected sc(a: Series, b: number): void;
    private ady;
    private get adz();
    private set adz(value);
    private ah8;
    get aif(): any;
    set aif(a: any);
    private ah9;
    get aig(): any;
    set aig(a: any);
    private ah5;
    get aic(): any;
    set aic(a: any);
    private aia;
    get aih(): any;
    set aih(a: any);
    private aib;
    get aii(): any;
    set aii(a: any);
    private ah6;
    get aid(): any;
    set aid(a: any);
    private ah7;
    get aie(): any;
    set aie(a: any);
    private afg;
    get afh(): IZoomSlider;
    set afh(a: IZoomSlider);
    protected get_im(): number;
    protected set_im(a: number): void;
    protected get_f2(): boolean;
    protected set_f2(a: boolean): void;
    private agq;
    get ag7(): number;
    set ag7(a: number);
    constructor();
    protected v3(): Axis;
    protected v4(): Axis;
    onAttachedToUI(): void;
    onDetachedFromUI(): void;
    protected bc(a: DataSeries): DataSeriesType;
    protected get_gr(): List$1<DataSeriesType>;
    protected get gr(): List$1<DataSeriesType>;
    protected get_gq(): List$1<IDataSeriesAdapterRule>;
    protected get gq(): List$1<IDataSeriesAdapterRule>;
    private adl;
    private aez;
    private adk;
    protected rn(): void;
    protected rj(a: Series, b: number): void;
    protected cq(a: Series): MarkerType;
    protected tf(a: DataSeries): void;
    protected ti(): void;
    private ad3;
    private ad2;
    private aec;
    private ad5;
    private air;
    private adm;
    private ae0;
    private ae6;
    private ae7;
    private ae5;
    private ae8;
    private get afp();
    private aem;
    private get aen();
    private get afs();
    private aek;
    private get ael();
    private get afq();
    private aeo;
    private get aep();
    private get afr();
    private aet;
    private get aeu();
    protected c1(a: DataSeries, b: DataSeriesType): Series;
    protected th(): void;
    protected abf(a: (arg1: Axis) => void, b: string): void;
    protected abk(a: (arg1: Axis) => void, b: boolean): void;
    protected alm(a: (arg1: IZoomableCategoryAxis) => void): void;
    protected abi(a: (arg1: TitleSettings) => void): void;
    protected abn(a: (arg1: TitleSettings) => void): void;
    protected abl(a: (arg1: AxisLabelSettings) => void): void;
    protected abg(a: (arg1: AxisLabelSettings) => void): void;
    protected r5(a: XamDataChart): void;
    private static ah3;
    private aij;
    private ajm;
    private ak4;
    private akq;
    private akr;
    private akw;
    private akz;
    private akx;
    private aky;
    private ak0;
    private ahx;
    protected rv(a: (arg1: Series, arg2: number) => void): void;
    private afc;
    private get volumeChart();
    private set volumeChart(value);
    private alp;
    private aft;
    private afx;
    private afu;
    private afw;
    private alo;
    private ae9;
    private afb;
    private al6;
    j9(): any;
    aio(): string;
    private afa;
    private al5;
    private af2;
    private al3;
    protected r2(): void;
    protected get_f8(): boolean;
    protected get af8(): boolean;
    private amb;
    private alq;
    protected sp(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    private ak2;
    private alz;
    private get af7();
    private ak3;
    private afy;
    private alt;
    private ak7;
    private alc;
    private alb;
    private ak5;
    private ak6;
    private alg;
    private alj;
    private alh;
    private aks;
    private alx;
    private al9;
    private ak8;
    private al7;
    private af1;
    private alf;
    private ak1;
    private al1;
    private al0;
    private als;
    private ak9;
    private af9;
    private al8;
    private akv;
    private al2;
    protected tn(a: Series, b: Series, c: DataSeries): void;
    private aiq;
    protected aba(a: Axis): void;
    protected abc(a: Axis): void;
    private ali;
    protected sa(a: Series, b: number): void;
    protected sv(a: string, b: any, c: any): void;
    protected get_b1(): DomainType;
    get b1(): DomainType;
    private afo;
    get af6(): boolean;
    set af6(a: boolean);
    private ahw;
    get ah4(): number;
    set ah4(a: number);
    private agx;
    get ahg(): number;
    set ahg(a: number);
    private agz;
    get ahi(): number;
    set ahi(a: number);
    private agy;
    get ahh(): number;
    set ahh(a: number);
    private ag0;
    get ahj(): number;
    set ahj(a: number);
    get ahf(): number;
    get ahe(): number;
    private ad4;
    get ad6(): FinancialChartVolumeType;
    set ad6(a: FinancialChartVolumeType);
    private ad7;
    get ad8(): FinancialChartXAxisMode;
    set ad8(a: FinancialChartXAxisMode);
    private ags;
    get ag9(): number;
    set ag9(a: number);
    private agv;
    get ahc(): number;
    set ahc(a: number);
    private agt;
    get aha(): number;
    set aha(a: number);
    private agu;
    get ahb(): number;
    set ahb(a: number);
    private agw;
    get ahd(): number;
    set ahd(a: number);
    private ad9;
    get aea(): FinancialChartYAxisMode;
    set aea(a: FinancialChartYAxisMode);
    private afj;
    get afz(): boolean;
    set afz(a: boolean);
    private ad0;
    get ad1(): FinancialChartType;
    set ad1(a: FinancialChartType);
    protected get_abt(): HorizontalAlignment;
    protected set_abt(a: HorizontalAlignment): void;
    private afk;
    get af0(): boolean;
    set af0(a: boolean);
    private aee;
    get aef(): FinancialIndicatorTypeCollection;
    set aef(a: FinancialIndicatorTypeCollection);
    private aeg;
    get aeh(): FinancialOverlayTypeCollection;
    set aeh(a: FinancialOverlayTypeCollection);
    private agb;
    private get indicatorCharts();
    private set indicatorCharts(value);
    private afm;
    get af4(): boolean;
    set af4(a: boolean);
    protected get_iv(): number;
    protected set_iv(a: number): void;
    private static readonly ajz;
    private afl;
    get af3(): boolean;
    set af3(a: boolean);
    private static readonly aka;
    private afn;
    get af5(): boolean;
    set af5(a: boolean);
    private afd;
    get zoomSliderChart(): XamDataChart;
    set zoomSliderChart(a: XamDataChart);
    private aey;
    private get zoomSliderAxis();
    private set zoomSliderAxis(value);
    private adj;
    private get zoomSliderXAxis();
    private set zoomSliderXAxis(value);
    private aeb;
    get aed(): FinancialChartZoomSliderType;
    set aed(a: FinancialChartZoomSliderType);
    private ac2;
    get ada(): BrushCollection;
    set ada(a: BrushCollection);
    private ac3;
    get adb(): BrushCollection;
    set adb(a: BrushCollection);
    private ac4;
    get adc(): BrushCollection;
    set adc(a: BrushCollection);
    private ac5;
    get add(): BrushCollection;
    set add(a: BrushCollection);
    private ac7;
    get adf(): BrushCollection;
    set adf(a: BrushCollection);
    private ac6;
    get ade(): BrushCollection;
    set ade(a: BrushCollection);
    private ac1;
    get ac9(): BrushCollection;
    set ac9(a: BrushCollection);
    private ac0;
    get ac8(): BrushCollection;
    set ac8(a: BrushCollection);
    private agr;
    get ag8(): number;
    set ag8(a: number);
    private agp;
    get ag6(): number;
    set ag6(a: number);
    private ago;
    get ag5(): number;
    set ag5(a: number);
    private agn;
    get ag4(): number;
    set ag4(a: number);
    private aeq;
    get aer(): IndicatorDisplayTypeCollection;
    set aer(a: IndicatorDisplayTypeCollection);
    private ahs;
    get ahz(): number;
    set ahz(a: number);
    private agm;
    get ag3(): number;
    set ag3(a: number);
    private ahv;
    get ah2(): number;
    set ah2(a: number);
    private aht;
    get ah0(): number;
    set ah0(a: number);
    private ahr;
    get ahy(): number;
    set ahy(a: number);
    private ahu;
    get ah1(): number;
    set ah1(a: number);
    private adv;
    get adx(): FinancialChartRangeSelectorOptionCollection;
    set adx(a: FinancialChartRangeSelectorOptionCollection);
    adw: FinancialChartRangeSelectorOptionCollection;
    private adr;
    get customIndicatorNames(): CustomIndicatorNameCollection;
    set customIndicatorNames(a: CustomIndicatorNameCollection);
    applyCustomIndicators: (sender: any, e: FinancialChartCustomIndicatorArgs) => void;
    protected get_f9(): boolean;
    protected set_f9(a: boolean): void;
    private amd;
    get ame(): Brush;
    set ame(a: Brush);
    private ag1;
    get ahk(): number;
    set ahk(a: number);
    private afi;
    get afv(): boolean;
    set afv(a: boolean);
    private aei;
    get aej(): IChartLegend;
    set aej(a: IChartLegend);
    private adi;
    private get xAxis();
    private set xAxis(value);
    private aex;
    private get yAxis();
    private set yAxis(value);
    private aew;
    private get volumeAxis();
    private set volumeAxis(value);
    private adh;
    private get volumeXAxis();
    private set volumeXAxis(value);
    private aev;
    private get indicatorAxis();
    private set indicatorAxis(value);
    private adg;
    private get indicatorXAxis();
    private set indicatorXAxis(value);
    private aga;
    private get agd();
    private set agd(value);
    private agc;
    private get agf();
    private set agf(value);
    private agj;
    get agl(): Date;
    set agl(a: Date);
    private agi;
    get agk(): Date;
    set agk(a: Date);
    private agg;
    get xAxisBreaks(): ObservableCollection$1<any>;
}
/**
 * @hidden
 */
export declare class FinancialChartToolbar extends TemplatedHtmlControl {
    static $t: Type;
    bg(a: DomWrapper): void;
    bl(a: Event): void;
    private o;
    constructor(a: FinancialChart, b: any);
    private r;
    get s(): FinancialChartRangeSelector;
    set s(a: FinancialChartRangeSelector);
    private z;
    get aa(): FinancialChartTypePicker;
    set aa(a: FinancialChartTypePicker);
    private p;
    get q(): FinancialChartIndicatorMenu;
    set q(a: FinancialChartIndicatorMenu);
    private bm;
    private bh;
    private bi;
    private bj;
    w: FinancialChartToolbarViewModel;
    v(): FinancialChartToolbarContext;
    l(a: any): void;
    private bk;
    private aq;
    get au(): Date;
    set au(a: Date);
    private ap;
    get at(): Date;
    set at(a: Date);
    private ao;
    get as(): Date;
    set as(a: Date);
    private an;
    get ar(): Date;
    set ar(a: Date);
    rangeChanged: (sender: any, e: EventArgs) => void;
    chartTypeChanged: (sender: any, e: EventArgs) => void;
    trendLineTypeChanged: (sender: any, e: EventArgs) => void;
    volumeTypeChanged: (sender: any, e: EventArgs) => void;
    indicatorTypesChanged: (sender: any, e: EventArgs) => void;
    overlayTypesChanged: (sender: any, e: EventArgs) => void;
    bn(): void;
    private x;
    get y(): FinancialChartType;
    set y(a: FinancialChartType);
    private ah;
    get ai(): TrendLineType;
    set ai(a: TrendLineType);
    private ab;
    get ac(): FinancialChartVolumeType;
    set ac(a: FinancialChartVolumeType);
    private ad;
    get ae(): FinancialIndicatorTypeCollection;
    set ae(a: FinancialIndicatorTypeCollection);
    private af;
    get ag(): FinancialOverlayTypeCollection;
    set ag(a: FinancialOverlayTypeCollection);
    static am(a: IList, b: IList): boolean;
    aj(): FinancialChartToolbarVisualData;
    private t;
    get u(): FinancialChartRangeSelectorOptionCollection;
    set u(a: FinancialChartRangeSelectorOptionCollection);
    private ak;
    get al(): boolean;
    set al(a: boolean);
}
/**
 * @hidden
 */
export declare class FinancialChartRangeSelector extends TemplatedHtmlControl {
    static $t: Type;
    private static x;
    q: FinancialChartRangeSelectorViewModel;
    get v(): Date;
    set v(a: Date);
    get u(): Date;
    set u(a: Date);
    get t(): Date;
    set t(a: Date);
    get s(): Date;
    set s(a: Date);
    ab(): void;
    constructor(a: any);
    l(a: any): void;
    private z;
    rangeChanged: (sender: any, e: EventArgs) => void;
    r(): FinancialChartRangeSelectorVisualData;
    get o(): FinancialChartRangeSelectorOptionCollection;
    set o(a: FinancialChartRangeSelectorOptionCollection);
    private aa;
    private p;
}
