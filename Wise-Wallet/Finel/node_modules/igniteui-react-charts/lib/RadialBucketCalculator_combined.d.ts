import { Base, Type, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { RadialFrame } from "./RadialFrame";
import { HighlightingInfo } from "./HighlightingInfo";
import { RadialSeriesRenderManager } from "./RadialSeriesRenderManager";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { AssigningRadialStyleEventArgs } from "./AssigningRadialStyleEventArgs";
import { AssigningRadialMarkerStyleEventArgs } from "./AssigningRadialMarkerStyleEventArgs";
import { RadialAxes } from "./RadialAxes";
import { Pool$1 } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class RadialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: RadialBaseView;
    constructor(a: RadialBaseView);
    c: number;
    d: number;
    b: number;
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class RadialBase extends MarkerSeries implements IHasCategoryModePreference {
    static $t: Type;
    l4(a: SeriesView): void;
    r2: RadialBaseView;
    constructor();
    private su;
    get categoryAxis(): CategoryAxisBase;
    as(): CategoryAxisBase;
    rq(a: number, b: number): any[];
    protected r7: RadialSeriesRenderManager;
    c2(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    private sp;
    r8: SeriesRenderer$2<RadialFrame, RadialBaseView>;
    protected get_ed(): boolean;
    sf: boolean;
    se: boolean;
    protected sa: boolean;
    protected r9: boolean;
    protected get_d0(): boolean;
    private ry;
    private rz;
    protected rv(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rw(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rx(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    ay(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningRadialStyle: (sender: any, args: AssigningRadialStyleEventArgs) => void;
    assigningRadialMarkerStyle: (sender: any, args: AssigningRadialMarkerStyleEventArgs) => void;
    protected sj(): boolean;
    protected si(): boolean;
    protected sx(a: AssigningRadialStyleEventArgs): void;
    protected sw(a: AssigningRadialMarkerStyleEventArgs): void;
    sl(a: SeriesView): number;
    sm(a: SeriesView): number;
    rt: CategoryAngleAxis;
    r0: NumericRadiusAxis;
    ag(): Axis[];
    sd: boolean;
    protected nb(a: Rect, b: Rect): void;
    protected na(a: Rect, b: Rect): void;
    abstract preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    protected l9(a: any, b: string, c: any, d: any): void;
    protected sh(): boolean;
    protected sg(): boolean;
    sc(a: any): boolean;
    sb(a: any): boolean;
    hy(a: Point): any;
    sk(a: Point): number;
    f9(a: Point): number;
    hi(a: Point): number;
    eq(a: any): boolean;
    r5: RadialFrame;
    r6: RadialFrame;
    r3: RadialFrame;
    r4(): RadialFrame;
    abstract getOffsetValue(): number;
    abstract getCategoryWidth(): number;
    abstract sv(a: RadialFrame, b: RadialBaseView): void;
    abstract sy(a: RadialFrame, b: RadialBaseView): void;
    r1: RadialAxes;
    lk(): void;
    fd(a: Rect, b: Rect, c: SeriesView): boolean;
    mo(a: boolean): void;
    sn(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class RadialBaseView extends MarkerSeriesView {
    static $t: Type;
    cs: RadialBucketCalculator;
    cr: RadialBase;
    constructor(a: RadialBase);
    ct: Pool$1<Marker>;
    cf(a: (arg1: Marker) => void): void;
    cu: number;
    cv: Point;
}
