import { Base, INotifyPropertyChanged, Type, IEnumerable, PropertyChangedEventArgs } from "igniteui-react-core";
import { IDataLegendTarget } from "igniteui-react-core";
import { IToolbarTarget } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { IDomainChartWidget } from "./IDomainChartWidget";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesAdapterImplementation } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { MarkerType } from "./MarkerType";
import { IAnnotationLayerProxy } from "./IAnnotationLayerProxy";
import { Color } from "igniteui-react-core";
import { ToolCommandStateChanged } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { BrushCollection } from "igniteui-react-core";
import { IChartLegend } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { SeriesOutlineMode } from "./SeriesOutlineMode";
import { MarkerOutlineMode } from "./MarkerOutlineMode";
import { MarkerFillMode } from "./MarkerFillMode";
import { MarkerTypeCollection } from "./MarkerTypeCollection";
import { MarkerAutomaticBehavior } from "./MarkerAutomaticBehavior";
import { TrendLineType } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode } from "./LegendHighlightingMode";
import { LegendItemBadgeMode } from "igniteui-react-core";
import { ToolTipType } from "./ToolTipType";
import { CrosshairsDisplayMode } from "./CrosshairsDisplayMode";
import { CalloutPlacementPositionsCollection } from "./CalloutPlacementPositionsCollection";
import { ValueModeCollection } from "./ValueModeCollection";
import { SeriesViewerScrollbarMode } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition } from "./SeriesViewerVerticalScrollbarPosition";
import { Series } from "./Series";
import { IDataLegend } from "igniteui-react-core";
import { ICommandStateChangedListener } from "igniteui-react-core";
import { DataSeries } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ObservableColorCollection } from "igniteui-react-core";
import { DataSeriesMarker } from "igniteui-react-core";
import { IDataLegendSeries } from "igniteui-react-core";
import { ToolActionInfo } from "igniteui-react-core";
import { ToolCommand } from "igniteui-react-core";
import { ICommandAvailabilityListener } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { CalloutStyleUpdatingEventArgs } from "./CalloutStyleUpdatingEventArgs";
import { CalloutRenderStyleUpdatingEventArgs } from "./CalloutRenderStyleUpdatingEventArgs";
/**
 * @hidden
 */
export declare abstract class DomainChart extends Base implements INotifyPropertyChanged, IDataLegendTarget, IToolbarTarget {
    static $t: Type;
    protected j8: any;
    provideContainer(a: any): void;
    destroy(): void;
    private r8;
    protected r9(): void;
    protected r5(a: XamDataChart): void;
    protected r2(): void;
    protected sb(a: Series, b: number): void;
    protected sy(a: string, b: any, c: any): void;
    private j6;
    get tooltipTemplate(): any;
    set tooltipTemplate(a: any);
    private gl;
    get tooltipTemplates(): List$1<any>;
    set tooltipTemplates(a: List$1<any>);
    private hd;
    get iq(): number;
    set iq(a: number);
    private j5;
    private get toolTip();
    private set toolTip(value);
    private hq;
    get i3(): number;
    set i3(a: number);
    private hr;
    get i4(): number;
    set i4(a: number);
    private hs;
    get i5(): number;
    set i5(a: number);
    private hp;
    get i2(): number;
    set i2(a: number);
    private hl;
    get iy(): number;
    set iy(a: number);
    private hn;
    get i0(): number;
    set i0(a: number);
    private hm;
    get iz(): number;
    set iz(a: number);
    private hk;
    get ix(): number;
    set ix(a: number);
    private uf;
    get u7(): Brush;
    set u7(a: Brush);
    private ug;
    get u8(): Brush;
    set u8(a: Brush);
    private ha;
    protected get_im(): number;
    protected set_im(a: number): void;
    get im(): number;
    set im(a: number);
    private ht;
    get i6(): number;
    set i6(a: number);
    private hj;
    get iw(): number;
    set iw(a: number);
    private gx;
    get h8(): number;
    set h8(a: number);
    private jt;
    get j1(): number;
    set j1(a: number);
    private d2;
    get d3(): (time: number) => number;
    set d3(a: (time: number) => number);
    protected r6(a: XamDataChart): void;
    protected sc(a: Series, b: number): void;
    protected r3(): void;
    private sd;
    jk: (arg1: HTMLElement) => any[];
    private to;
    private ka;
    private ga;
    private jl;
    protected sz(a: string, b: any, c: any): void;
    private b9;
    get ca(): IDomainChartWidget;
    set ca(a: IDomainChartWidget);
    private k2;
    get p7(): string;
    set p7(a: string);
    private k4;
    get qi(): string;
    set qi(a: string);
    private dv;
    get dataChart(): XamDataChart;
    set dataChart(a: XamDataChart);
    bd: DataSeriesAdapterImplementation;
    onDetachedFromUI(): void;
    onAttachedToUI(): void;
    constructor();
    protected r7(): void;
    protected abstract get gr(): List$1<DataSeriesType>;
    protected abstract get gq(): List$1<IDataSeriesAdapterRule>;
    protected gp: List$1<MarkerType>;
    protected f5(a: DataSeriesType): boolean;
    notifyResized(): void;
    sl(): void;
    rs(): void;
    r0(): void;
    propertyChanged: (sender: any, e: PropertyChangedEventArgs) => void;
    protected s5(a: string): void;
    protected abstract rt(a: (arg1: Axis) => void, b: boolean): void;
    protected ru(a: (arg1: Series) => void): void;
    protected rv(a: (arg1: Series, arg2: number) => void): void;
    protected ry(a: (arg1: Series) => void): void;
    protected rz(a: (arg1: Series, arg2: number) => void): void;
    protected rw(a: (arg1: Series) => void): void;
    protected rx(a: (arg1: Series, arg2: number) => void): void;
    te(): void;
    protected sn(a: (arg1: XamDataChart) => void): void;
    protected so(a: (arg1: XamDataChart) => void, b: boolean): void;
    protected sp(a: (arg1: XamDataChart) => void, b: boolean, c: string): void;
    protected f7(a: DataSeries): boolean;
    protected fy(): boolean;
    private static readonly ki;
    private js;
    protected oe(a: DataSeries): string;
    private static kh;
    protected of(a: DataSeries, b: DataSeriesType): string;
    protected abstract bc(a: DataSeries): DataSeriesType;
    protected abstract c1(a: DataSeries, b: DataSeriesType): Series;
    od(): string;
    private f3;
    protected th(): void;
    protected c3(seriesType_: DataSeriesType): Series;
    private cv;
    private cx;
    private cz;
    private c0;
    private cw;
    private cy;
    private c2;
    private b2;
    protected get b3(): IAnnotationLayerProxy;
    private get fu();
    private fw;
    private tp;
    protected fz(): boolean;
    protected f0(): boolean;
    protected get_fx(): boolean;
    protected get fx(): boolean;
    protected gn(a: string, b: boolean): List$1<Series>;
    protected rm(a: Series, b: boolean): void;
    protected tn(a: Series, b: Series, c: DataSeries): void;
    protected abstract tg(a: DataSeries): void;
    protected abstract tf(a: DataSeries): void;
    protected tj(): void;
    private tk;
    protected tl(a: Series): void;
    protected abstract ti(): void;
    private sq;
    protected rq(): void;
    protected u0(a: number): Brush;
    protected u3(a: number): Brush;
    protected u1(a: number): Brush;
    protected u2(a: number): Brush;
    protected vb(a: number): Color;
    protected em(a: Color): ObservableColorCollection;
    protected ac(a: Color): BrushCollection;
    protected gk: List$1<Color>;
    protected get gm(): List$1<Color>;
    protected get_ge(): boolean;
    protected get ge(): boolean;
    j9(): any;
    se(a: string, b: string): void;
    sf(a: string, b: string, c: Series): void;
    cp(a: DataSeriesMarker): MarkerType;
    private b6;
    private e4;
    attachDataLegend(a: IDataLegend): void;
    protected rl(a: IDataLegend): void;
    detachDataLegend(a: IDataLegend): void;
    protected rp(a: IDataLegend): void;
    getDataLegendSeries(): IDataLegendSeries[];
    protected p(): IDataLegendSeries[];
    tq(a: number): void;
    tr(a: number): void;
    tm(): void;
    protected get_f6(): boolean;
    get f6(): boolean;
    private b7;
    get b8(): IDomainChartToolbarProvider;
    private sw;
    getDesiredToolbarActions(): ToolActionInfo[];
    onToolCommandExecuting(a: ToolCommand): void;
    addCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    removeCommandAvailabilityListener(a: ICommandAvailabilityListener): void;
    private gi;
    addCommandStateChangedListener(a: ICommandStateChangedListener): void;
    removeCommandStateChangedListener(a: ICommandStateChangedListener): void;
    sk(source_: any, a: number, b: any, c: any): void;
    sg(source_: any): void;
    sh(source_: any, a: number, b: any): void;
    si(source_: any, a: number, b: any): void;
    private bu;
    get bv(): DataToolTipLayerGroupingMode;
    set bv(a: DataToolTipLayerGroupingMode);
    private g1;
    get ic(): number;
    set ic(a: number);
    private g2;
    get id(): number;
    set id(a: number);
    private gz;
    get ia(): number;
    set ia(a: number);
    private g0;
    get ib(): number;
    set ib(a: number);
    private bq;
    get br(): DataTooltipGroupedPositionX;
    set br(a: DataTooltipGroupedPositionX);
    private bs;
    get bt(): DataTooltipGroupedPositionY;
    set bt(a: DataTooltipGroupedPositionY);
    private ex;
    get fp(): boolean;
    set fp(a: boolean);
    static readonly mz: string;
    get m(): string[];
    set m(a: string[]);
    private e;
    get j(): string[];
    set j(a: string[]);
    private b;
    get l(): string[];
    set l(a: string[]);
    private d;
    get i(): string[];
    set i(a: string[]);
    private a;
    get bb(): DataAbbreviationMode;
    set bb(a: DataAbbreviationMode);
    private ba;
    get jx(): number;
    set jx(a: number);
    private jo;
    get jy(): number;
    set jy(a: number);
    private jp;
    get bp(): DataLegendValueMode;
    set bp(a: DataLegendValueMode);
    private bo;
    get nr(): string;
    set nr(a: string);
    private ku;
    get fq(): boolean;
    set fq(a: boolean);
    private ey;
    get nx(): string;
    set nx(a: string);
    private kv;
    get n(): any[];
    set n(a: any[]);
    private f;
    get vx(): Thickness;
    set vx(a: Thickness);
    private vn;
    get fr(): boolean;
    set fr(a: boolean);
    private ez;
    get n6(): string;
    set n6(a: string);
    private kw;
    get fs(): boolean;
    set fs(a: boolean);
    private e0;
    get vy(): Thickness;
    set vy(a: Thickness);
    private vo;
    get ux(): Brush;
    set ux(a: Brush);
    private ua;
    private ec;
    get el(): FontInfo;
    set el(a: FontInfo);
    get mh(): string;
    set mh(a: string);
    private ko;
    get k(): any[];
    set k(a: any[]);
    private c;
    get md(): string;
    set md(a: string);
    private kn;
    get bf(): DataLegendHeaderDateMode;
    set bf(a: DataLegendHeaderDateMode);
    private be;
    get bh(): DataLegendHeaderTimeMode;
    set bh(a: DataLegendHeaderTimeMode);
    private bg;
    get mm(): string;
    set mm(a: string);
    private kp;
    get up(): Brush;
    set up(a: Brush);
    private t2;
    get vr(): Thickness;
    set vr(a: Thickness);
    private vh;
    get vq(): Thickness;
    set vq(a: Thickness);
    private vg;
    get fo(): boolean;
    set fo(a: boolean);
    private ew;
    private d4;
    get ed(): FontInfo;
    set ed(a: FontInfo);
    get us(): Brush;
    set us(a: Brush);
    private t5;
    private d7;
    get eg(): FontInfo;
    set eg(a: FontInfo);
    get bl(): DataLegendSummaryType;
    set bl(a: DataLegendSummaryType);
    private bk;
    get m5(): string;
    set m5(a: string);
    private kr;
    get vu(): Thickness;
    set vu(a: Thickness);
    private vk;
    get vt(): Thickness;
    set vt(a: Thickness);
    private vj;
    get uu(): Brush;
    set uu(a: Brush);
    private t7;
    private d9;
    get ei(): FontInfo;
    set ei(a: FontInfo);
    get m0(): string;
    set m0(a: string);
    private kq;
    get ur(): Brush;
    set ur(a: Brush);
    private t4;
    private d6;
    get ef(): FontInfo;
    set ef(a: FontInfo);
    get nb(): string;
    set nb(a: string);
    private ks;
    get ut(): Brush;
    set ut(a: Brush);
    private t6;
    private d8;
    get eh(): FontInfo;
    set eh(a: FontInfo);
    get vp(): Thickness;
    set vp(a: Thickness);
    private vf;
    get ch(): LegendItemBadgeShape;
    set ch(a: LegendItemBadgeShape);
    private cf;
    get bn(): DataLegendUnitsMode;
    set bn(a: DataLegendUnitsMode);
    private bm;
    get nl(): string;
    set nl(a: string);
    private kt;
    get uw(): Brush;
    set uw(a: Brush);
    private t9;
    get vw(): Thickness;
    set vw(a: Thickness);
    private vm;
    private eb;
    get ek(): FontInfo;
    set ek(a: FontInfo);
    get vv(): Thickness;
    set vv(a: Thickness);
    private vl;
    get uv(): Brush;
    set uv(a: Brush);
    private t8;
    private ea;
    get ej(): FontInfo;
    set ej(a: FontInfo);
    get bj(): DataLegendLabelMode;
    set bj(a: DataLegendLabelMode);
    private bi;
    get uq(): Brush;
    set uq(a: Brush);
    private t3;
    get vs(): Thickness;
    set vs(a: Thickness);
    private vi;
    private d5;
    get ee(): FontInfo;
    set ee(a: FontInfo);
    seriesAdded: (sender: any, args: ChartSeriesEventArgs) => void;
    s6(a: Series): void;
    seriesRemoved: (sender: any, args: ChartSeriesEventArgs) => void;
    tc(a: Series): void;
    seriesPointerEnter: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    s8(a: Series, b: any): void;
    seriesPointerLeave: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    s9(a: Series, b: any): void;
    seriesPointerMove: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    ta(a: Series, b: any): void;
    seriesPointerDown: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    s7(a: Series, b: any): void;
    seriesPointerUp: (sender: any, args: DomainChartSeriesPointerEventArgs) => void;
    tb(a: Series, b: any): void;
    calloutStyleUpdating: (sender: any, args: CalloutStyleUpdatingEventArgs) => void;
    s4(a: any, b: CalloutStyleUpdatingEventArgs): void;
    calloutRenderStyleUpdating: (sender: any, args: CalloutRenderStyleUpdatingEventArgs) => void;
    s3(a: any, b: CalloutRenderStyleUpdatingEventArgs): void;
    private go;
    s1(a: () => void): void;
    private en;
    s2(a: () => void, b: boolean): {
        p1?: boolean;
    };
    protected get_f8(): boolean;
    protected get f8(): boolean;
    protected r4(a: XamDataChart): void;
    protected ag(a: BrushCollection): BrushCollection;
    protected u6(a: Brush): Brush;
    protected sa(a: Series, b: number): void;
    protected abstract rn(): void;
    protected get fi(): boolean;
    private eq;
    protected rr(): void;
    protected r1(): void;
    protected td(a: XamDataChart): void;
    protected rk(a: Series, b: number): void;
    protected abstract rj(a: Series, b: number): void;
    protected cr(a: Series, b: number): MarkerType;
    protected cq(a: Series): MarkerType;
    protected cs(a: Series): MarkerType;
    protected kd(): any;
    protected get_f1(): boolean;
    protected get f1(): boolean;
    protected gv(): IEnumerable;
    protected sv(a: string, b: any, c: any): void;
    private gh;
    private gj;
    private sr;
    private ri;
    private st;
    private sx;
    abstract get b1(): DomainType;
    private au;
    private aq;
    private ap;
    private dx;
    private a2;
    private d0;
    private d1;
    private fc;
    private fb;
    private fd;
    private fa;
    private at;
    private as;
    private ar;
    private dy;
    private a1;
    get a0(): ChartSortDescriptionCollection;
    get aw(): ChartSortDescriptionCollection;
    get av(): ChartSortDescriptionCollection;
    get dz(): FilterExpressionCollection;
    get a4(): ChartSummaryDescriptionCollection;
    get az(): ChartSortDescriptionCollection;
    get ay(): ChartSortDescriptionCollection;
    get ax(): ChartSortDescriptionCollection;
    get a3(): ChartSummaryDescriptionCollection;
    private kz;
    get oz(): string;
    set oz(a: string);
    private kx;
    get og(): string;
    set og(a: string);
    private ky;
    get ox(): string;
    set ox(a: string);
    private k0;
    get o1(): string;
    set o1(a: string);
    private j4;
    get itemsSource(): any;
    set itemsSource(a: any);
    private j3;
    get actualItemsSource(): any;
    set actualItemsSource(a: any);
    private h;
    get q(): string[];
    set q(a: string[]);
    private g;
    get o(): string[];
    set o(a: string[]);
    private t;
    get ab(): BrushCollection;
    set ab(a: BrushCollection);
    private w;
    get af(): BrushCollection;
    set af(a: BrushCollection);
    private r;
    get z(): BrushCollection;
    set z(a: BrushCollection);
    private s;
    get aa(): BrushCollection;
    set aa(a: BrushCollection);
    private b4;
    get legend(): IChartLegend;
    set legend(a: IChartLegend);
    private e3;
    protected get_f2(): boolean;
    protected set_f2(a: boolean): void;
    get f2(): boolean;
    set f2(a: boolean);
    private e6;
    protected get_f9(): boolean;
    protected set_f9(a: boolean): void;
    get f9(): boolean;
    set f9(a: boolean);
    private e8;
    protected get_gc(): boolean;
    protected set_gc(a: boolean): void;
    get gc(): boolean;
    set gc(a: boolean);
    private fe;
    protected get_gf(): boolean;
    protected set_gf(a: boolean): void;
    get gf(): boolean;
    set gf(a: boolean);
    private e5;
    protected get_f4(): boolean;
    protected set_f4(a: boolean): void;
    get f4(): boolean;
    set f4(a: boolean);
    private vc;
    get ve(): Rect;
    set ve(a: Rect);
    get vd(): Rect;
    private k3;
    get qb(): string;
    set qb(a: string);
    private k1;
    get p0(): string;
    set p0(a: string);
    private tt;
    get tv(): HorizontalAlignment;
    set tv(a: HorizontalAlignment);
    private ts;
    get tu(): HorizontalAlignment;
    set tu(a: HorizontalAlignment);
    private dr;
    get ds(): UnknownValuePlotting;
    set ds(a: UnknownValuePlotting);
    private hi;
    protected get_iv(): number;
    protected set_iv(a: number): void;
    get iv(): number;
    set iv(a: number);
    private ho;
    get i1(): number;
    set i1(a: number);
    private c8;
    get c9(): SeriesOutlineMode;
    set c9(a: SeriesOutlineMode);
    private cn;
    get co(): MarkerOutlineMode;
    set co(a: MarkerOutlineMode);
    private cl;
    get cm(): MarkerFillMode;
    set cm(a: MarkerFillMode);
    private hb;
    get io(): number;
    set io(a: number);
    private hc;
    get ip(): number;
    set ip(a: number);
    private ct;
    get cu(): MarkerTypeCollection;
    set cu(a: MarkerTypeCollection);
    private cj;
    get ck(): MarkerAutomaticBehavior;
    set ck(a: MarkerAutomaticBehavior);
    private u;
    get ad(): BrushCollection;
    set ad(a: BrushCollection);
    private v;
    get ae(): BrushCollection;
    set ae(a: BrushCollection);
    private jr;
    get j0(): number;
    set j0(a: number);
    private gw;
    get h7(): number;
    set h7(a: number);
    private ep;
    get fh(): boolean;
    set fh(a: boolean);
    private x;
    get ah(): BrushCollection;
    set ah(a: BrushCollection);
    private dp;
    get dq(): TrendLineType;
    set dq(a: TrendLineType);
    private hu;
    get i7(): number;
    set i7(a: number);
    private eo;
    get fg(): boolean;
    set fg(a: boolean);
    private hf;
    get is(): number;
    set is(a: number);
    private hh;
    get iu(): number;
    set iu(a: number);
    private hg;
    get it(): number;
    set it(a: number);
    private he;
    get ir(): number;
    set ir(a: number);
    protected su(): void;
    private a5;
    get a6(): ComputedPlotAreaMarginMode;
    set a6(a: ComputedPlotAreaMarginMode);
    protected a7(): ComputedPlotAreaMarginMode;
    private da;
    get db(): SeriesPlotAreaMarginHorizontalMode;
    set db(a: SeriesPlotAreaMarginHorizontalMode);
    private dc;
    get dd(): SeriesPlotAreaMarginVerticalMode;
    set dd(a: SeriesPlotAreaMarginVerticalMode);
    private c6;
    get c7(): SeriesHighlightingMode;
    set c7(a: SeriesHighlightingMode);
    private c4;
    get c5(): SeriesHighlightingBehavior;
    set c5(a: SeriesHighlightingBehavior);
    private cb;
    get cc(): LegendHighlightingMode;
    set cc(a: LegendHighlightingMode);
    private cg;
    get ci(): LegendItemBadgeShape;
    set ci(a: LegendItemBadgeShape);
    private cd;
    get ce(): LegendItemBadgeMode;
    set ce(a: LegendItemBadgeMode);
    private ju;
    get j2(): number;
    set j2(a: number);
    private dm;
    get dn(): ToolTipType;
    set dn(a: ToolTipType);
    private a8;
    get a9(): CrosshairsDisplayMode;
    set a9(a: CrosshairsDisplayMode);
    private ev;
    get fn(): boolean;
    set fn(a: boolean);
    private t1;
    get uo(): Brush;
    set uo(a: Brush);
    private gy;
    get h9(): number;
    set h9(a: number);
    private t0;
    get un(): Brush;
    set un(a: Brush);
    private eu;
    get fm(): boolean;
    set fm(a: boolean);
    private tw;
    get uj(): Brush;
    set uj(a: Brush);
    private ty;
    get ul(): Brush;
    set ul(a: Brush);
    private tx;
    get uk(): Brush;
    set uk(a: Brush);
    private tz;
    get um(): Brush;
    set um(a: Brush);
    private jm;
    get jv(): number;
    set jv(a: number);
    private jn;
    get jw(): number;
    set jw(a: number);
    private e7;
    get gb(): boolean;
    set gb(a: boolean);
    private e9;
    get gd(): boolean;
    set gd(a: boolean);
    private e1;
    get ft(): boolean;
    set ft(a: boolean);
    private ub;
    get uy(): Brush;
    set uy(a: Brush);
    private uc;
    get uz(): Brush;
    set uz(a: Brush);
    private jq;
    get jz(): number;
    set jz(a: number);
    private er;
    get fj(): boolean;
    set fj(a: boolean);
    private et;
    get fl(): boolean;
    set fl(a: boolean);
    private es;
    get fk(): boolean;
    set fk(a: boolean);
    private gt;
    get calloutsItemsSource(): IEnumerable;
    set calloutsItemsSource(a: IEnumerable);
    private aj;
    get ak(): CalloutPlacementPositionsCollection;
    set ak(a: CalloutPlacementPositionsCollection);
    private kl;
    get lm(): string;
    set lm(a: string);
    private km;
    get lo(): string;
    set lo(a: string);
    private kk;
    get li(): string;
    set li(a: string);
    private kj;
    get lf(): string;
    set lf(a: string);
    private dt;
    get du(): ValueModeCollection;
    set du(a: ValueModeCollection);
    private y;
    get ai(): BrushCollection;
    set ai(a: BrushCollection);
    private hv;
    get i8(): number;
    set i8(a: number);
    get di(): SeriesViewerScrollbarMode;
    set di(a: SeriesViewerScrollbarMode);
    private dg;
    get dj(): SeriesViewerScrollbarMode;
    set dj(a: SeriesViewerScrollbarMode);
    private dh;
    get df(): SeriesViewerHorizontalScrollbarPosition;
    set df(a: SeriesViewerHorizontalScrollbarPosition);
    private de;
    get dl(): SeriesViewerVerticalScrollbarPosition;
    set dl(a: SeriesViewerVerticalScrollbarPosition);
    private dk;
    get u4(): Brush;
    set u4(a: Brush);
    private ud;
    get u5(): Brush;
    set u5(a: Brush);
    private ue;
    get ij(): number;
    set ij(a: number);
    private g7;
    get ii(): number;
    set ii(a: number);
    private g6;
    get ie(): number;
    set ie(a: number);
    private g3;
    get ig(): number;
    set ig(a: number);
    private g4;
    get ih(): number;
    set ih(a: number);
    private g5;
    get il(): number;
    set il(a: number);
    private g9;
    get ik(): number;
    set ik(a: number);
    private g8;
    get fv(): boolean;
    set fv(a: boolean);
    private e2;
    static readonly os: string;
    get u9(): Brush;
    set u9(a: Brush);
    private uh;
    get va(): Brush;
    set va(a: Brush);
    private ui;
    get jc(): number;
    set jc(a: number);
    private hz;
    get jb(): number;
    set jb(a: number);
    private hy;
    get i9(): number;
    set i9(a: number);
    private hw;
    get jf(): number;
    set jf(a: number);
    private h2;
    get ja(): number;
    set ja(a: number);
    private hx;
    get je(): number;
    set je(a: number);
    private h1;
    get jd(): number;
    set jd(a: number);
    private h0;
    get gg(): boolean;
    set gg(a: boolean);
    private ff;
    static readonly q7: string;
    get jh(): number;
    set jh(a: number);
    private h4;
    get jg(): number;
    set jg(a: number);
    private h3;
    get jj(): number;
    set jj(a: number);
    private h6;
    get ji(): number;
    set ji(a: number);
    private h5;
}
/**
 * @hidden
 */
export interface IDomainChartToolbarProvider {
    container: any;
    commandChanged: (arg1: ToolCommandStateChanged) => void;
    getDesiredToolbarActions(a: DomainChart, b: ToolActionInfo[]): ToolActionInfo[];
    onToolCommandExecuting(a: DomainChart, b: ToolCommand): void;
    onTargetPropertyChanged(a: DomainChart, b: string, c: any, d: any): void;
}
/**
 * @hidden
 */
export declare let IDomainChartToolbarProvider_$type: Type;
