import { AnnotationLayer } from "./AnnotationLayer";
import { Axis } from "./Axis";
import { DataToolTipLayerGroupingMode } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Point, Type } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { DataTooltipGroupedPositionX } from "igniteui-react-core";
import { DataTooltipGroupedPositionY } from "igniteui-react-core";
import { DataAbbreviationMode } from "igniteui-react-core";
import { DataLegendValueMode } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
import { DataLegendHeaderDateMode } from "igniteui-react-core";
import { DataLegendHeaderTimeMode } from "igniteui-react-core";
import { DataLegendSummaryType } from "igniteui-react-core";
import { LegendItemBadgeShape } from "igniteui-react-core";
import { DataLegendUnitsMode } from "igniteui-react-core";
import { DataLegendLabelMode } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { IDataLegend } from "igniteui-react-core";
import { Frame } from "./Frame";
import { Pool$1 } from "igniteui-react-core";
import { AnnotationLayerView } from "./AnnotationLayerView";
import { PointerTooltip } from "./PointerTooltip";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class DataToolTipLayer extends AnnotationLayer {
    static $t: Type;
    protected get_dc(): boolean;
    constructor();
    protected by(): SeriesView;
    l4(a: SeriesView): void;
    protected t4: DataToolTipLayerView;
    protected get_dn(): boolean;
    tk: Axis;
    uy: boolean;
    t2: DataToolTipLayerGroupingMode;
    private t0;
    get t1(): DataToolTipLayerGroupingMode;
    set t1(a: DataToolTipLayerGroupingMode);
    private t3;
    protected l9(a: any, b: string, c: any, d: any): void;
    private u2;
    private u3;
    private yk;
    yo(a: string, b: any): void;
    private yl;
    protected r2(a: Axis, b: boolean): void;
    protected r3(a: Series, b: boolean): void;
    protected r5(a: Frame, b: SeriesView): void;
    private u4;
    private tj;
    private t5;
    li(): void;
    lj(): void;
    get aao(): Rect;
    get aan(): Rect;
    get aam(): Rect;
    get aaq(): Rect;
    private aap;
    private uu;
    private ur;
    private us;
    private ut;
    private vx;
    private vv;
    private vw;
    private v6;
    private v4;
    private v5;
    private v0;
    private vy;
    private vz;
    private vg;
    private vi;
    private vh;
    private vp;
    private vr;
    private vq;
    private vm;
    private vo;
    private vn;
    private vc;
    private vj;
    private vk;
    private vl;
    private vd;
    private ve;
    private vf;
    private vu;
    private vt;
    private vs;
    private v3;
    private v2;
    private v1;
    private vb;
    private aal;
    private va;
    private u9;
    private te;
    private td;
    private uv;
    private uw;
    private yj;
    private up;
    private yn;
    private ym;
    private v9;
    protected r8(a: Frame, b: SeriesView): void;
    protected ep(): boolean;
    u7: number;
    u8: number;
    u5: number;
    u6: number;
    tu: DataTooltipGroupedPositionX;
    private ts;
    get tt(): DataTooltipGroupedPositionX;
    set tt(a: DataTooltipGroupedPositionX);
    private tv;
    ty: DataTooltipGroupedPositionY;
    private tw;
    get tx(): DataTooltipGroupedPositionY;
    set tx(a: DataTooltipGroupedPositionY);
    private tz;
    ux: boolean;
    th: string[];
    tc: string[];
    tg: string[];
    tb: string[];
    tl: DataAbbreviationMode;
    v7: number;
    v8: number;
    tr: DataLegendValueMode;
    x2: string;
    uz: boolean;
    x8: string;
    ti: any[];
    aaz: Thickness;
    u0: boolean;
    yh: string;
    u1: boolean;
    aa0: Thickness;
    aak: Brush;
    private uf;
    get uo(): FontInfo;
    set uo(a: FontInfo);
    wq: string;
    tf: any[];
    wm: string;
    tm: DataLegendHeaderDateMode;
    tn: DataLegendHeaderTimeMode;
    wv: string;
    aac: Brush;
    aat: Thickness;
    aas: Thickness;
    uq: boolean;
    private t7;
    get ug(): FontInfo;
    set ug(a: FontInfo);
    aaf: Brush;
    private ua;
    get uj(): FontInfo;
    set uj(a: FontInfo);
    tp: DataLegendSummaryType;
    xe: string;
    aaw: Thickness;
    aav: Thickness;
    aah: Brush;
    private uc;
    get ul(): FontInfo;
    set ul(a: FontInfo);
    w9: string;
    aae: Brush;
    private t9;
    get ui(): FontInfo;
    set ui(a: FontInfo);
    xk: string;
    aag: Brush;
    private ub;
    get uk(): FontInfo;
    set uk(a: FontInfo);
    aar: Thickness;
    t6: LegendItemBadgeShape;
    tq: DataLegendUnitsMode;
    xv: string;
    aaj: Brush;
    aay: Thickness;
    private ue;
    get un(): FontInfo;
    set un(a: FontInfo);
    aax: Thickness;
    aai: Brush;
    private ud;
    get um(): FontInfo;
    set um(a: FontInfo);
    to: DataLegendLabelMode;
    aad: Brush;
    aau: Thickness;
    private t8;
    get uh(): FontInfo;
    set uh(a: FontInfo);
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class DataToolTipLayerView extends AnnotationLayerView {
    static $t: Type;
    constructor(a: DataToolTipLayer);
    b6: Pool$1<any>;
    aj(): void;
    protected b9: List$1<PointerTooltip>;
    private ca;
    private cc;
    private ce;
    private cd;
    protected b4: DataToolTipLayer;
    private b7;
    as(): void;
    private _htmlTest;
    protected get htmlTest(): any;
    protected set htmlTest(a: any);
    b8(a: any, b: Series): boolean;
    cn(a: any): Size;
    cm(): Rect;
    cl(): Rect;
    ck(): Rect;
    cj(a: Point): Point;
    ch(a: any, b: number, c: number, d: number, e: number): void;
    co(): Size;
    cf(a: any): void;
    ci(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    al(a: any): void;
    b5(a: any): IDataLegend;
    cg(a: boolean): void;
}
