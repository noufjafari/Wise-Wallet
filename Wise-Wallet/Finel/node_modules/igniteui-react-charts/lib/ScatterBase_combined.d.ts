import { MarkerSeries } from "./MarkerSeries";
import { ISupportsErrorBars } from "./ISupportsErrorBars";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { ScatterAxisInfoCache } from "./ScatterAxisInfoCache";
import { NumericXAxis } from "./NumericXAxis";
import { DependencyProperty } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CollisionAvoidanceType } from "./CollisionAvoidanceType";
import { Axis } from "./Axis";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { ScatterErrorBarSettings } from "./ScatterErrorBarSettings";
import { HighlightingInfo } from "./HighlightingInfo";
import { ScatterFrame } from "./ScatterFrame";
import { SeriesView } from "./SeriesView";
import { Point, Type } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { AxisRange } from "./AxisRange";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Thickness } from "igniteui-react-core";
import { SeriesPlotAreaMarginHorizontalMode } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode } from "./SeriesPlotAreaMarginVerticalMode";
import { Size } from "igniteui-react-core";
import { AssigningScatterStyleEventArgs } from "./AssigningScatterStyleEventArgs";
import { AssigningScatterMarkerStyleEventArgs } from "./AssigningScatterMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { ErrorBarsHelper } from "./ErrorBarsHelper";
import { IErrorBarCalculator } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { ValueLayerValueMode } from "./ValueLayerValueMode";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class ScatterBase extends MarkerSeries implements ISupportsErrorBars, ITrendLineSeries {
    static $t: Type;
    protected by(): SeriesView;
    kz(): void;
    l4(a: SeriesView): void;
    r6: ScatterBaseView;
    protected get_ef(): boolean;
    ag(): Axis[];
    h1(a: any, b: string): any;
    c2(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    protected bq(): SeriesHitTestMode;
    p5(a: Point): Rect;
    ez(a: Point, b: boolean): boolean;
    constructor();
    r5: ScatterAxisInfoCache;
    xAxis: NumericXAxis;
    yAxis: NumericYAxis;
    tr: string;
    get sl(): IFastItemColumn$1<number>;
    set sl(a: IFastItemColumn$1<number>);
    private sj;
    tz: string;
    get sm(): IFastItemColumn$1<number>;
    set sm(a: IFastItemColumn$1<number>);
    private sk;
    tn: string;
    tv: string;
    tp: string;
    tx: string;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get vb(): Brush;
    set vb(a: Brush);
    static readonly uo: DependencyProperty;
    trendLineThickness: number;
    vd: PenLineCap;
    vc: DoubleCollection;
    trendLinePeriod: number;
    rx: CollisionAvoidanceType;
    get GetErrorBarsXAxis(): Axis;
    get GetErrorBarsYAxis(): Axis;
    tc: number;
    tb: number;
    sh: ScatterItemSearchMode;
    ta: number;
    lk(): void;
    r7: ScatterErrorBarSettings;
    protected l9(a: any, b: string, c: any, d: any): void;
    protected sx(): boolean;
    protected sw(): boolean;
    sr(a: any): boolean;
    sq(a: any): boolean;
    private um;
    private ve;
    private vf;
    private t1;
    protected sv(a: string, b: FastItemsSourceEventAction): boolean;
    protected k5(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    ud(a: ScatterFrame): void;
    ue(a: ScatterFrame, b: Clipper): void;
    aq(a: Axis): AxisRange;
    hy(a: Point): any;
    private se;
    get sf(): ScatterItemSearchMode;
    set sf(a: ScatterItemSearchMode);
    protected sg(): ScatterItemSearchMode;
    hi(a: Point): number;
    f9(a: Point): number;
    protected s6(a: Point): number;
    private rq;
    private rr;
    protected s5(a: Point): number;
    private t4;
    protected get_su(): boolean;
    protected get su(): boolean;
    private s9;
    protected s8(a: Point): number;
    protected s7(a: Point): number;
    ps(a: Point, b: boolean, c: boolean): Point;
    eq(a: any): boolean;
    protected na(a: Rect, b: Rect): void;
    protected nb(a: Rect, b: Rect): void;
    sb: ScatterFrame;
    sd: ScatterFrame;
    r9: ScatterFrame;
    sa(): ScatterFrame;
    t2(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    ua(a: ScatterFrame, b: ScatterBaseView): void;
    k2(a: boolean, b: SeriesView): void;
    st: boolean;
    ss: boolean;
    protected sp: boolean;
    protected so: boolean;
    protected get_d0(): boolean;
    private r1;
    private r2;
    protected rz(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected r0(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    p9(a: SeriesPlotAreaMarginHorizontalMode, b: SeriesPlotAreaMarginVerticalMode): Thickness;
    protected ry(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    ay(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningScatterStyle: (sender: any, args: AssigningScatterStyleEventArgs) => void;
    assigningScatterMarkerStyle: (sender: any, args: AssigningScatterMarkerStyleEventArgs) => void;
    protected sz(): boolean;
    protected sy(): boolean;
    ul(a: ScatterFrame, b: ScatterBaseView): void;
    rt(a: number, b: number): any[];
    protected ru(a: number, b: number): any[];
    protected si: ScatterSeriesRenderManager;
    t3(a: ScatterBaseView, b: ScatterFrame): void;
    protected t6(a: number, b: number, c: boolean): void;
    protected t5(a: number, b: number, c: boolean): void;
    protected ug(a: AssigningScatterStyleEventArgs): void;
    protected uf(a: AssigningScatterMarkerStyleEventArgs): void;
    t8(a: ScatterFrame, b: ScatterBaseView): void;
    ub(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    t9(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: number, e: number, f: boolean): {
        p3?: number;
        p4?: number;
    };
    t7(a: OwnedPoint, b: ErrorBarsHelper, c: IErrorBarCalculator, d: any, e: number, f: number, g: boolean): {
        p4?: number;
        p5?: number;
    };
    uc(a: ErrorBarsHelper, b: IErrorBarCalculator, c: number, d: number, e: number, f: boolean): {
        p2?: number;
        p3?: number;
        p4?: number;
    };
    ui(a: ScatterFrame, b: ScatterBaseView): void;
    private uj;
    private uk;
    fd(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    mo(a: boolean): void;
    protected m1(): void;
    sc: ScatterFrame;
    mp(a: Rect, b: RenderSurface): void;
    private r8;
    mm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    uh(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    rs(a: ScatterBaseView, b: HashPool$2<any, Marker>, c: Point[], d: Rect, e: Rect): Point[];
    s0(a: HashPool$2<any, Marker>, b: List$1<number>): List$1<number>;
    protected lc(a: any): void;
    gg(): number;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    private sn;
    private s1;
    private s2;
    s3: number;
    s4: number;
    private un;
    gq(a: ValueLayerValueMode, b: Axis): number;
    am(a: ValueLayerValueMode): number[];
    pw(a: number[]): Point;
    pv(a: ValueLayerValueMode): Point;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningScatterMarkerStyleEventArgs;
    ax: AssigningScatterStyleEventArgs;
    ay(a: ScatterBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class ScatterBaseView extends MarkerSeriesView {
    static $t: Type;
    cv: MarkerManagerBase;
    protected ct: Point[];
    protected cw: ScatterBase;
    protected c1: List$1<number>;
    constructor(a: ScatterBase);
    private dc;
    private dd;
    cx: ScatterTrendLineManager;
    as(): void;
    private db;
    de(a: Marker): Size;
    protected cu(): MarkerManagerBase;
    protected c9(a: IDictionary$2<any, OwnedPoint>): void;
    c0(): List$1<Marker>;
    cs(): Point[];
    protected cr(): Point[];
    protected cz(): List$1<number>;
    c2(): void;
    c7(a: PathGeometry): void;
    c3(): void;
    c8(a: PathGeometry): void;
    da(): void;
    cy: HashPool$2<any, Marker>;
    cf(a: (arg1: Marker) => void): void;
    c5(a: (arg1: Marker) => void): void;
    c6(): void;
    protected a5(a: RenderingContext, b: boolean): void;
    c4(a: boolean): void;
    getDefaultTooltipTemplate(): string;
}
