import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries } from "igniteui-react-core";
import { ISupportsSizeScale } from "./ISupportsSizeScale";
import { ISupportsFillScale } from "./ISupportsFillScale";
import { Rect } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { Type } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { SeriesView } from "./SeriesView";
import { MarkerFillMode } from "./MarkerFillMode";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { Marker } from "./Marker";
import { BrushSelectionMode } from "./BrushSelectionMode";
import { MarkerManagerBase } from "./MarkerManagerBase";
/**
 * @hidden
 */
export declare class BubbleSeries extends ScatterBase implements IScaleLegendSeries, ISupportsSizeScale, ISupportsFillScale {
    static $t: Type;
    protected get_c5(): boolean;
    protected by(): SeriesView;
    l4(a: SeriesView): void;
    vj: BubbleSeriesView;
    protected g0(): number;
    qf(): MarkerFillMode;
    constructor();
    private w9;
    private w8;
    isAttachedTo(a: IChartLegend): boolean;
    protected c4(): boolean;
    protected le(a: (arg1: any) => void): void;
    get vq(): IFastItemColumn$1<number>;
    vw: List$1<UIElement>;
    private w7;
    get legendReady(): boolean;
    get minScaleText(): string;
    get maxScaleText(): string;
    forScaleColors(a: (arg1: Brush, arg2: number) => void): boolean;
    wl: string;
    h1(a: any, b: string): any;
    get vs(): IFastItemColumn$1<number>;
    set vs(a: IFastItemColumn$1<number>);
    private vo;
    vl: SizeScale;
    wb: string;
    private vn;
    get vr(): IFastItemColumn$1<any>;
    set vr(a: IFastItemColumn$1<any>);
    v6: string;
    vi: BrushScale;
    private vm;
    get vp(): IFastItemColumn$1<number>;
    set vp(a: IFastItemColumn$1<number>);
    vt: boolean;
    vu: boolean;
    v0: number;
    vz: number;
    vv: boolean;
    t2(a: ScatterBaseView, b: ScatterFrame, c: number, d: Rect, e: Rect): void;
    ua(a: ScatterFrame, b: ScatterBaseView): void;
    private wq;
    static vx(a: number, b: number, c: number, d: number, e: number): number;
    static vy(a: number, b: number, c: number, d: number, logBase_: number, e: number): number;
    fd(a: Rect, b: Rect, c: SeriesView): boolean;
    protected sv(a: string, b: FastItemsSourceEventAction): boolean;
    private wp;
    protected k5(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    ln(): void;
    lt(): void;
    protected l9(a: any, b: string, c: any, d: any): void;
    updateSizeScaleGlobals(): void;
    updateFillScaleGlobals(): void;
    vh(a: SizeScale): ActualRange;
    vg(): ActualRange;
    vk: SizeScale;
    ws(a: List$1<Marker>, b: List$1<number>, c: Rect, d: boolean): void;
    wr(a: List$1<Marker>): void;
    wh: string;
    v2: string;
    wj: string;
    v4: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    get actualMarkerBrush(): Brush;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class CustomPaletteBrushScale extends BrushScale {
    static $t: Type;
    constructor();
    brushSelectionMode: BrushSelectionMode;
    getBrush1(a: number, b: number): Brush;
    protected get_isReady(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BubbleSeriesView extends ScatterBaseView {
    static $t: Type;
    protected df: BubbleSeries;
    constructor(a: BubbleSeries);
    as(): void;
    protected cu(): MarkerManagerBase;
    dh(): void;
    di(): void;
    dg(): void;
    getDefaultTooltipTemplate(): string;
}
