import { XYChart } from "./XYChart";
import { IEnumerable, Type } from "igniteui-react-core";
import { DomainType } from "./DomainType";
import { CategoryChartType } from "./CategoryChartType";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { AutoMarginsAndAngleUpdateMode } from "./AutoMarginsAndAngleUpdateMode";
import { AxisRangeBufferMode } from "./AxisRangeBufferMode";
import { BrushCollection } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType } from "igniteui-react-core";
import { IDataSeriesAdapterRule } from "igniteui-react-core";
import { Series } from "./Series";
import { XamDataChart } from "./XamDataChart";
import { Axis } from "./Axis";
import { MarkerType } from "./MarkerType";
import { DataSeries } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode } from "./ComputedPlotAreaMarginMode";
/**
 * @hidden
 */
export declare class CategoryChart extends XYChart {
    static $t: Type;
    protected r9(): void;
    protected sb(a: Series, b: number): void;
    protected sy(a: string, b: any, c: any): void;
    private afj;
    get afl(): number;
    set afl(a: number);
    private ado;
    get adp(): (time: number) => number;
    set adp(a: (time: number) => number);
    afr(): string;
    protected r4(a: XamDataChart): void;
    protected sa(a: Series, b: number): void;
    private ade;
    private adi;
    protected rn(): void;
    protected abc(a: Axis): void;
    protected aba(a: Axis): void;
    protected get_b1(): DomainType;
    get b1(): DomainType;
    private ac8;
    get ac9(): CategoryChartType;
    set ac9(a: CategoryChartType);
    private ada;
    get adb(): CategorySeriesMarkerCollisionAvoidance;
    set adb(a: CategorySeriesMarkerCollisionAvoidance);
    private ads;
    get ad3(): boolean;
    set ad3(a: boolean);
    private adt;
    get ad4(): boolean;
    set ad4(a: boolean);
    private adc;
    get add(): CategoryTransitionInMode;
    set add(a: CategoryTransitionInMode);
    private adm;
    get adn(): TransitionInSpeedType;
    set adn(a: TransitionInSpeedType);
    private aeg;
    get ae3(): number;
    set ae3(a: number);
    private aej;
    get ae6(): number;
    set ae6(a: number);
    private aef;
    get ae2(): number;
    set ae2(a: number);
    private aei;
    get ae5(): number;
    set ae5(a: number);
    private aeh;
    get ae4(): number;
    set ae4(a: number);
    private aek;
    get ae7(): number;
    set ae7(a: number);
    private aeq;
    get aff(): number;
    set aff(a: number);
    private ac4;
    get ac5(): AutoMarginsAndAngleUpdateMode;
    set ac5(a: AutoMarginsAndAngleUpdateMode);
    private adu;
    agv(): void;
    get ad5(): boolean;
    set ad5(a: boolean);
    protected static readonly af0: string;
    private adv;
    get ad6(): boolean;
    set ad6(a: boolean);
    private aed;
    get aeu(): number;
    set aeu(a: number);
    private aee;
    get aev(): number;
    set aev(a: number);
    private adz;
    get aea(): boolean;
    set aea(a: boolean);
    private static readonly af5;
    private adw;
    get ad7(): boolean;
    set ad7(a: boolean);
    private static readonly agj;
    private ady;
    get ad9(): boolean;
    set ad9(a: boolean);
    private ac6;
    get ac7(): AxisRangeBufferMode;
    set ac7(a: AxisRangeBufferMode);
    private ad0;
    get aeb(): boolean;
    set aeb(a: boolean);
    private afk;
    get afm(): number;
    set afm(a: number);
    private aes;
    get afh(): number;
    set afh(a: number);
    private aer;
    get afg(): number;
    set afg(a: number);
    private aet;
    get afi(): number;
    set afi(a: number);
    get ae1(): number;
    get ae0(): number;
    aex(): number;
    aez(): number;
    aew(): number;
    aey(): number;
    get afe(): number;
    get afd(): number;
    private ac0;
    get ac2(): BrushCollection;
    set ac2(a: BrushCollection);
    private ac1;
    get ac3(): BrushCollection;
    set ac3(a: BrushCollection);
    private adx;
    get ad8(): boolean;
    set ad8(a: boolean);
    private ael;
    get ae8(): number;
    set ae8(a: number);
    private aem;
    get ae9(): number;
    set ae9(a: number);
    private aen;
    get afa(): number;
    set afa(a: number);
    private aeo;
    get afb(): number;
    set afb(a: number);
    private aep;
    get afc(): number;
    set afc(a: number);
    private adq;
    get ad1(): boolean;
    set ad1(a: boolean);
    private adr;
    get ad2(): boolean;
    set ad2(a: boolean);
    constructor();
    protected get_gr(): List$1<DataSeriesType>;
    protected get gr(): List$1<DataSeriesType>;
    private aec;
    protected gv(): IEnumerable;
    protected cq(a: Series): MarkerType;
    protected cs(a: Series): MarkerType;
    protected get_ge(): boolean;
    private agt;
    private agu;
    protected th(): void;
    private _xAxis;
    private get xAxis();
    private set xAxis(value);
    private _yAxis;
    private get yAxis();
    private set yAxis(value);
    private adh;
    private adg;
    protected bc(a: DataSeries): DataSeriesType;
    protected c1(a: DataSeries, b: DataSeriesType): Series;
    protected tf(a: DataSeries): void;
    protected ti(): void;
    protected get_gq(): List$1<IDataSeriesAdapterRule>;
    protected get gq(): List$1<IDataSeriesAdapterRule>;
    protected rj(a: Series, b: number): void;
    private agr;
    private ags;
    protected v3(): Axis;
    protected v4(): Axis;
    private adk;
    private adl;
    protected gn(a: string, b: boolean): List$1<Series>;
    protected a7(): ComputedPlotAreaMarginMode;
    protected tn(a: Series, b: Series, c: DataSeries): void;
    protected f0(): boolean;
    protected get_f6(): boolean;
    protected sv(a: string, b: any, c: any): void;
}
