import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { SeriesView } from "./SeriesView";
import { SeriesVisibleRangeMode } from "./SeriesVisibleRangeMode";
import { Type, IList$1 } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryFrame } from "./CategoryFrame";
import { List$1 } from "igniteui-react-core";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { SeriesHitTestMode } from "./SeriesHitTestMode";
import { CategorySeriesView } from "./CategorySeriesView";
import { Path } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { UnknownValuePlotting } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Clipper } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class StepAreaSeries extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    protected by(): SeriesView;
    l4(a: SeriesView): void;
    vk: StepAreaSeriesView;
    protected get_dg(): boolean;
    protected get_df(): boolean;
    protected get_ek(): boolean;
    protected get_d5(): boolean;
    b4(): SeriesVisibleRangeMode;
    constructor();
    vj: CategoryLineRasterizer;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    k2(a: boolean, b: SeriesView): void;
    private vl;
    protected r7(): CategoryTransitionInMode;
    gd(a: number, b: IList$1<number>, c: number, d: number, e: number, f: number, g: number, h: boolean): number;
    protected bq(): SeriesHitTestMode;
    tf(a: CategoryFrame, b: CategorySeriesView): void;
    get useHighMarkerFidelity(): boolean;
}
/**
 * @hidden
 */
export declare class StepAreaSeriesView extends AnchoredCategorySeriesView {
    static $t: Type;
    protected da: StepAreaSeries;
    constructor(a: StepAreaSeries);
    as(): void;
    private di;
    private dk;
    private dj;
    private dl;
    get dm(): Path;
    get dp(): Path;
    get dn(): Path;
    get dq(): Path;
    db(): void;
    dc(a: number, b: List$1<number[]>, c: boolean, d: number, e: number, f: (arg1: PointCollection, arg2: PointCollection, arg3: PointCollection, arg4: PointCollection, arg5: boolean) => void, g: UnknownValuePlotting): void;
    dd(a: number, b: List$1<number[]>, c: boolean, d: number, e: number, f: (arg1: PointCollection, arg2: PointCollection, arg3: PointCollection, arg4: PointCollection, arg5: boolean) => void, g: UnknownValuePlotting, h: Clipper): void;
    private de;
    private dg;
    private df;
    private dh;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    al(a: any): void;
}
