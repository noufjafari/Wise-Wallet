import { RadialBucketCalculator } from "./RadialBucketCalculator";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { RadialBase } from "./RadialBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { DependencyProperty } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { Axis } from "./Axis";
import { RadialFrame } from "./RadialFrame";
import { SeriesView } from "./SeriesView";
import { ScalerParams } from "./ScalerParams";
import { Rect } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { RadialBaseView } from "./RadialBaseView";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategoryAngleAxis } from "./CategoryAngleAxis";
import { Clipper } from "igniteui-react-core";
import { RadialTrendLineManager } from "./RadialTrendLineManager";
import { PointCollection } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class AnchoredRadialBucketCalculator extends RadialBucketCalculator {
    static $t: Type;
    private f;
    constructor(a: AnchoredRadialSeriesView);
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare abstract class AnchoredRadialSeries extends RadialBase {
    static $t: Type;
    protected by(): SeriesView;
    kz(): void;
    h1(a: any, b: string): any;
    l4(a: SeriesView): void;
    s6: AnchoredRadialSeriesView;
    constructor();
    s7: CategoryLineRasterizer;
    ho(a: Point, b: boolean): number;
    hm(a: Point, b: boolean): number;
    f7(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    gn(a: Point, b: boolean, c: boolean): number;
    ps(a: Point, b: boolean, c: boolean): Point;
    ts: string;
    get tc(): IFastItemColumn$1<number>;
    set tc(a: IFastItemColumn$1<number>);
    private tb;
    to: string;
    tq: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    ta: TrendLineType;
    ub: Brush;
    get ua(): Brush;
    set ua(a: Brush);
    static readonly tz: DependencyProperty;
    tk: number;
    ud: PenLineCap;
    uc: DoubleCollection;
    tl: number;
    tm: number;
    aq(a: Axis): AxisRange;
    protected l9(a: any, b: string, c: any, d: any): void;
    protected k5(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    fd(a: Rect, b: Rect, c: SeriesView): boolean;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    protected get_tf(): boolean;
    protected get tf(): boolean;
    protected get_c7(): boolean;
    protected get_em(): boolean;
    protected th(a: CategoryAngleAxis, b: Rect, c: Rect, d: Rect): number;
    sv(a: RadialFrame, b: RadialBaseView): void;
    private ti;
    private tj;
    private tg;
    s5(a: List$1<number[]>, b: number, c: SeriesView): Clipper;
    protected ue: Point;
    ty(a: PointCollection, b: PointCollection, c: PointCollection, d: PointCollection, e: boolean): void;
    private te;
    private td;
    k2(a: boolean, b: SeriesView): void;
    sy(a: RadialFrame, b: RadialBaseView): void;
    protected s4(a: number, b: number, c: Axis): any[];
    protected tw(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    protected tx(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    tv(a: RadialBaseView, b: RadialFrame): void;
    private tu;
    protected m1(): void;
    h4(a: any, b: Point): any;
    eq(a: any): boolean;
    s9: RadialFrame;
    mp(a: Rect, b: RenderSurface): void;
    private s8;
    mm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected lc(a: any): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredRadialSeriesView extends RadialBaseView {
    static $t: Type;
    cw: AnchoredRadialSeries;
    constructor(a: AnchoredRadialSeries);
    cx: RadialTrendLineManager;
    cy(a: Rect, b: Rect, c: Rect, d: Rect): void;
    cz(): void;
    protected a5(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
