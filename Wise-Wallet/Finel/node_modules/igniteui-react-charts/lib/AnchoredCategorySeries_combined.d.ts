import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased } from "./IIsCategoryBased";
import { IHasSingleValueCategory } from "./IHasSingleValueCategory";
import { IHasCategoryTrendline } from "./IHasCategoryTrendline";
import { ITrendLineSeries } from "./ITrendLineSeries";
import { IAnchoredCategorySeriesInteractionManager } from "./IAnchoredCategorySeriesInteractionManager";
import { Type, Point } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { ICategoryScaler } from "./ICategoryScaler";
import { IScaler } from "./IScaler";
import { IBucketizer } from "./IBucketizer";
import { CategorySeriesView } from "./CategorySeriesView";
import { IPreparesCategoryTrendline } from "./IPreparesCategoryTrendline";
import { CategorySeriesMarkerCollisionAvoidance } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior } from "./ConsolidatedItemHitTestBehavior";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { ITrendLineManager } from "./ITrendLineManager";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { AxisRange } from "./AxisRange";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { IDetectsCollisions } from "./IDetectsCollisions";
import { ValueLayerValueMode } from "./ValueLayerValueMode";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class AnchoredCategorySeries extends CategorySeries implements IIsCategoryBased, IHasSingleValueCategory, IHasCategoryTrendline, ITrendLineSeries {
    static $t: Type;
    private tt;
    get tu(): IAnchoredCategorySeriesInteractionManager;
    tp: AnchoredCategorySeriesView;
    getHostReferenceValue(): number;
    i4(): string;
    protected by(): SeriesView;
    l4(a: SeriesView): void;
    ty: boolean;
    constructor();
    uc: string;
    h1(a: any, b: string): any;
    get valueColumn(): IFastItemColumn$1<number>;
    set valueColumn(a: IFastItemColumn$1<number>);
    private tv;
    t8: string;
    ua: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    trendLineType: TrendLineType;
    trendLineBrush: Brush;
    get ux(): Brush;
    set ux(a: Brush);
    static readonly uk: DependencyProperty;
    trendLineThickness: number;
    uz: PenLineCap;
    uy: DoubleCollection;
    trendLinePeriod: number;
    t2: number;
    eq(a: any): boolean;
    protected tm(a: number, b: number, c: Axis): any[];
    protected l9(a: any, b: string, c: any, d: any): void;
    aq(a: Axis): AxisRange;
    protected k5(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected sw(): number;
    t1(a: CategorySeriesView): number;
    uh(a: PointCollection, b: number, c: CategorySeriesView): void;
    tn(a: List$1<number[]>, b: number, c: Rect, d: Rect): Clipper;
    to(a: List$1<number[]>, b: number, c: Rect, d: Rect, e: boolean): Clipper;
    fd(a: Rect, b: Rect, c: SeriesView): boolean;
    k2(a: boolean, b: SeriesView): void;
    tc(a: CategoryFrame, b: CategorySeriesView): void;
    tf(a: CategoryFrame, b: CategorySeriesView): void;
    tq: CategoryFrame;
    mm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    ue(a: CategoryFrame, b: CategorySeriesView): void;
    protected m1(): void;
    h4(a: any, b: Point): any;
    get currentCategoryMode(): CategoryMode;
    get scaler(): ICategoryScaler;
    get yScaler(): IScaler;
    get bucketizer(): IBucketizer;
    get currentMode2Index(): number;
    provideCollisionDetector(): IDetectsCollisions;
    get trendlinePreparer(): IPreparesCategoryTrendline;
    protected t4: string;
    abstract uf(a: Axis): void;
    abstract ug(a: Axis): void;
    protected lc(a: any): void;
    tr: CategorySeriesMarkerCollisionAvoidance;
    hy(a: Point): any;
    ts: ConsolidatedItemHitTestBehavior;
    get mayContainUnknowns(): boolean;
    gg(): number;
    protected get_t3(): number;
    protected get t3(): number;
    ar(a: Rect): AxisRange;
    private uj;
    private tx;
    private tz;
    t0: number;
    private ui;
    gq(a: ValueLayerValueMode, b: Axis): number;
    am(a: ValueLayerValueMode): number[];
    pv(a: ValueLayerValueMode): Point;
    pw(a: number[]): Point;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class AnchoredCategoryBucketCalculator extends CategoryBucketCalculator {
    static $t: Type;
    constructor(a: AnchoredCategorySeriesView);
    protected i: AnchoredCategorySeriesView;
    getBucketWithoutUnknowns(a: number): number[];
    getBucket(a: number): number[];
    private h;
    private j;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare class AnchoredCategorySeriesView extends CategorySeriesView {
    static $t: Type;
    c0: AnchoredCategorySeries;
    constructor(a: AnchoredCategorySeries);
    private c1;
    get c2(): ITrendLineManager;
    set c2(a: ITrendLineManager);
    get c3(): boolean;
    c7(): void;
    c5(): void;
    c4(): void;
    cs(): CategoryBucketCalculator;
    c6(): void;
    c8(): void;
    c9(a: number): Rect;
    protected a5(a: RenderingContext, b: boolean): void;
    getDefaultTooltipTemplate(): string;
}
