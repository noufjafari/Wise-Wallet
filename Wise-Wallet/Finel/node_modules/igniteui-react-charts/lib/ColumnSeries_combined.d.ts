import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { ConsolidatedItemsPosition } from "./ConsolidatedItemsPosition";
import { SeriesView } from "./SeriesView";
import { SeriesVisibleRangeMode } from "./SeriesVisibleRangeMode";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { Type, Point } from "igniteui-react-core";
import { CategoryMode } from "./CategoryMode";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { Rect } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ColumnSeries extends HorizontalAnchoredCategorySeries {
    static $t: Type;
    protected get_dk(): boolean;
    protected get_d5(): boolean;
    protected gz(): number;
    protected by(): SeriesView;
    vj: ColumnSeriesView;
    l4(a: SeriesView): void;
    b4(): SeriesVisibleRangeMode;
    protected r7(): CategoryTransitionInMode;
    constructor();
    vn: number;
    vo: number;
    protected get_c3(): boolean;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private vp;
    p3(a: Point): Rect;
    ez(a: Point, b: boolean): boolean;
    k2(a: boolean, b: SeriesView): void;
    ge(): number;
    tf(a: CategoryFrame, b: CategorySeriesView): void;
    private vk;
    get vl(): ConsolidatedItemsPosition;
    set vl(a: ConsolidatedItemsPosition);
    private vm;
    get useHighMarkerFidelity(): boolean;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ColumnSeriesView extends AnchoredCategorySeriesView {
    static $t: Type;
    as(): void;
    protected da: ColumnSeries;
    constructor(a: ColumnSeries);
    di(): Rectangle;
    protected dc: List$1<Rectangle>;
    dd(a: Rectangle): void;
    df(a: Rectangle): void;
    de(a: Rectangle): void;
    dg(a: Rectangle, b: number, c: number): void;
    protected ac(a: number): any;
    private dh;
    protected ab(a: number): any;
    protected a6(a: RenderingContext, b: boolean): void;
    db: Pool$1<Rectangle>;
    al(a: any): void;
}
