import { EventArgs, IList$1, Base, Type, IEnumerable$1, Point } from "igniteui-react-core";
import { IBucketizer } from "./IBucketizer";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SeriesView } from "./SeriesView";
import { Axis } from "./Axis";
import { IHasCategoryAxis } from "./IHasCategoryAxis";
import { IHasCategoryModePreference } from "./IHasCategoryModePreference";
import { Brush } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { NumericYAxis } from "./NumericYAxis";
import { HighlightingInfo } from "./HighlightingInfo";
import { CategoryTransitionInMode } from "./CategoryTransitionInMode";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { CategoryFrame } from "./CategoryFrame";
import { CategoryMode } from "./CategoryMode";
import { List$1 } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { AssigningCategoryStyleEventArgs } from "./AssigningCategoryStyleEventArgs";
import { TransitionInSpeedType } from "./TransitionInSpeedType";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { CalculatedColumn } from "./CalculatedColumn";
import { ColumnSupportingCalculation } from "./ColumnSupportingCalculation";
import { RenderSurface } from "./RenderSurface";
import { SupportingCalculation$1 } from "./SupportingCalculation$1";
/**
 * @hidden
 */
export declare class FinancialEventArgs extends EventArgs {
    static $t: Type;
    constructor(a: number, b: number, c: FinancialCalculationDataSource, d: FinancialCalculationSupportingCalculations, e: FinancialSeries);
    private _position;
    get position(): number;
    set position(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _dataSource;
    get dataSource(): FinancialCalculationDataSource;
    set dataSource(a: FinancialCalculationDataSource);
    private _supportingCalculations;
    get supportingCalculations(): FinancialCalculationSupportingCalculations;
    set supportingCalculations(a: FinancialCalculationSupportingCalculations);
    private _basedOn;
    get basedOn(): IList$1<string>;
    set basedOn(a: IList$1<string>);
}
/**
 * @hidden
 */
export declare class FinancialBucketCalculator extends Base implements IBucketizer {
    static $t: Type;
    protected a: FinancialSeriesView;
    constructor(a: FinancialSeriesView);
    getBucket(a: number): number[];
    getBucketWithoutUnknowns(a: number): number[];
    getErrorBucket(a: number, b: IFastItemColumn$1<number>): number;
    c: number;
    d: number;
    b: number;
    getBucketInfo(a: number, b: number, c: number, d: number): {
        p0: number;
        p1: number;
        p2: number;
        p3: number;
    };
    e(a: number): void;
    cacheValues(): void;
    unCacheValues(): void;
}
/**
 * @hidden
 */
export declare abstract class FinancialSeries extends Series implements IHasCategoryAxis, IHasCategoryModePreference {
    static $t: Type;
    l4(a: SeriesView): void;
    q1: FinancialSeriesView;
    protected get_ds(): boolean;
    ag(): Axis[];
    h1(a: any, b: string): any;
    protected sk(): number;
    private si;
    ah(a: Point): Point[][];
    ai(a: Point): Point[][];
    constructor();
    tq: Brush;
    pf(): Brush;
    pg(): Brush;
    kz(): void;
    protected get_c7(): boolean;
    protected get_em(): boolean;
    qk: CategoryAxisBase;
    q6: NumericYAxis;
    s0: string;
    get rg(): IFastItemColumn$1<number>;
    set rg(a: IFastItemColumn$1<number>);
    private rb;
    sr: string;
    get re(): IFastItemColumn$1<number>;
    set re(a: IFastItemColumn$1<number>);
    private q9;
    sw: string;
    get rf(): IFastItemColumn$1<number>;
    set rf(a: IFastItemColumn$1<number>);
    private ra;
    so: string;
    get rd(): IFastItemColumn$1<number>;
    set rd(a: IFastItemColumn$1<number>);
    private q8;
    s4: string;
    get ri(): IFastItemColumn$1<number>;
    set ri(a: IFastItemColumn$1<number>);
    private rc;
    rq: boolean;
    protected rl: boolean;
    assigningCategoryStyle: (sender: any, args: AssigningCategoryStyleEventArgs) => void;
    rs(): boolean;
    protected tc(a: AssigningCategoryStyleEventArgs): void;
    protected qt: CategorySeriesRenderManager;
    protected ta(a: List$1<number[]>, b: number, c: number, d: CategoryAxisBase, e: ScalerParams, f: boolean): void;
    sa(a: Point): number;
    ho(a: Point, b: boolean): number;
    hm(a: Point, b: boolean): number;
    f7(a: Point, b: number, c: Axis, d: ScalerParams, e: number): number;
    getOffsetValue(): number;
    getCategoryWidth(): number;
    ps(a: Point, b: boolean, c: boolean): Point;
    gn(a: Point, b: boolean, c: boolean): number;
    gj(a: Point, b: boolean, c: boolean): number;
    gl(a: Point, b: boolean, c: boolean): number;
    sc(a: Point, b: boolean, c: boolean): number;
    sd(a: Point, b: boolean, c: boolean): number;
    se(a: Point, b: boolean, c: boolean): number;
    po(a: Point, b: boolean, c: boolean): Point;
    pq(a: Point, b: boolean, c: boolean): Point;
    ts(a: Point, b: boolean, c: boolean): Point;
    tr(a: Point, b: boolean, c: boolean): Point;
    tt(a: Point, b: boolean, c: boolean): Point;
    lk(): void;
    protected nb(a: Rect, b: Rect): void;
    protected na(a: Rect, b: Rect): void;
    protected rv: Dictionary$2<IFastItemColumn$1<number>, string>;
    protected rw: Dictionary$2<string, string>;
    private rh;
    private s9;
    private rk;
    protected l9(a: any, b: string, c: any, d: any): void;
    rn(a: any): boolean;
    rm(a: any): boolean;
    protected qd(a: number, b: number, c: Axis): any[];
    protected sh(a: SeriesView): number;
    protected sj(a: SeriesView): number;
    qc(a: number, b: number): any[];
    private q4;
    protected get_d0(): boolean;
    k0(): void;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    sl(a: Point): number;
    protected q3(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected q2(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected ro(): boolean;
    f9(a: Point): number;
    hi(a: Point): number;
    protected get_ec(): boolean;
    as(): CategoryAxisBase;
    hk(a: Point): number;
    hy(a: Point): any;
    qo: CategoryFrame;
    qq: CategoryFrame;
    qm: CategoryFrame;
    qn(): CategoryFrame;
    protected sb(a: Rect, b: Rect, c: Rect): number;
    qv: CategoryTransitionInMode;
    rr: boolean;
    protected eu(): boolean;
    protected qu(): CategoryTransitionInMode;
    protected ca(): TransitionInSpeedType;
    td(a: CategoryFrame, b: FinancialSeriesView): void;
    tb(a: CategoryFrame, b: FinancialSeriesView): void;
    fd(a: Rect, b: Rect, c: SeriesView): boolean;
    getViewInfo(a: Rect, b: Rect): {
        p0: Rect;
        p1: Rect;
    };
    qw: CategoryTransitionSourceFramePreparer;
    sf(a: FinancialSeriesView): number;
    protected k3(): void;
    mo(a: boolean): void;
    typical: (sender: any, e: FinancialEventArgs) => void;
    typicalBasedOn: (sender: any, e: FinancialEventArgs) => void;
    protected rt(a: IList$1<string>): boolean;
    get ru(): boolean;
    protected rp(): boolean;
    protected s8(a: FinancialEventArgs): void;
    protected get r2(): IEnumerable$1<number>;
    private _rz;
    private rz;
    protected get r1(): IEnumerable$1<number>;
    private _ry;
    private ry;
    protected get r0(): IEnumerable$1<number>;
    private _rx;
    private rx;
    r4(a: IList$1<number>): IList$1<number>;
    private rj;
    protected r3(): IList$1<string>;
    private r8;
    getOpenColumnAsArray(): number[];
    private r6;
    getHighColumnAsArray(): number[];
    private r7;
    getLowColumnAsArray(): number[];
    private r5;
    getCloseColumnAsArray(): number[];
    private r9;
    getVolumeColumnAsArray(): number[];
    protected k5(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected qx(a: number, b: number): FinancialCalculationDataSource;
    sg(a: number): number;
    protected qy(a: FinancialCalculationDataSource): FinancialCalculationSupportingCalculations;
    get categoryAxis(): CategoryAxisBase;
    private qp;
    mp(a: Rect, b: RenderSurface): void;
    private ql;
    mm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    ao(a: Axis): Axis;
    preferredCategoryMode(a: CategoryAxisBase): CategoryMode;
    private qr;
    get qs(): CategoryMode;
    set qs(a: CategoryMode);
    protected get_d6(): boolean;
    ms(a: Brush, b: Brush): void;
    private te;
    private q5;
    private q7;
    h0(a: any): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class FinancialCalculationSupportingCalculations extends Base {
    static $t: Type;
    a: ColumnSupportingCalculation;
    c: ColumnSupportingCalculation;
    d: ColumnSupportingCalculation;
    b: ColumnSupportingCalculation;
    h: DataSourceSupportingCalculation;
    f: DataSourceSupportingCalculation;
    g: DataSourceSupportingCalculation;
    e: DataSourceSupportingCalculation;
    k: (arg1: (arg1: number) => number, arg2: number, arg3: number) => IEnumerable$1<number>;
    j: (arg1: (arg1: number) => number, arg2: number) => IEnumerable$1<number>;
    i: (arg1: number) => number;
}
/**
 * @hidden
 */
export declare class DataSourceSupportingCalculation extends SupportingCalculation$1<(dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>> {
    static $t: Type;
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>);
    constructor(a: number, b: (dataSource: FinancialCalculationDataSource) => IEnumerable$1<number>, c: IList$1<string>);
    constructor(a: number, ..._rest: any[]);
}
/**
 * @hidden
 */
export declare class FinancialCalculationDataSource extends Base {
    static $t: Type;
    private _openColumn;
    get openColumn(): IList$1<number>;
    set openColumn(a: IList$1<number>);
    private _closeColumn;
    get closeColumn(): IList$1<number>;
    set closeColumn(a: IList$1<number>);
    private _highColumn;
    get highColumn(): IList$1<number>;
    set highColumn(a: IList$1<number>);
    private _lowColumn;
    get lowColumn(): IList$1<number>;
    set lowColumn(a: IList$1<number>);
    private _volumeColumn;
    get volumeColumn(): IList$1<number>;
    set volumeColumn(a: IList$1<number>);
    private _indicatorColumn;
    get indicatorColumn(): IList$1<number>;
    set indicatorColumn(a: IList$1<number>);
    private _typicalColumn;
    get typicalColumn(): CalculatedColumn;
    set typicalColumn(a: CalculatedColumn);
    private _trueRange;
    get trueRange(): CalculatedColumn;
    set trueRange(a: CalculatedColumn);
    private _trueLow;
    get trueLow(): CalculatedColumn;
    set trueLow(a: CalculatedColumn);
    private _period;
    get period(): number;
    set period(a: number);
    private _shortPeriod;
    get shortPeriod(): number;
    set shortPeriod(a: number);
    private _longPeriod;
    get longPeriod(): number;
    set longPeriod(a: number);
    private _count;
    get count(): number;
    set count(a: number);
    private _calculateFrom;
    get calculateFrom(): number;
    set calculateFrom(a: number);
    private _calculateCount;
    get calculateCount(): number;
    set calculateCount(a: number);
    private _multiplier;
    get multiplier(): number;
    set multiplier(a: number);
    private _minimumValue;
    get minimumValue(): number;
    set minimumValue(a: number);
    private _maximumValue;
    get maximumValue(): number;
    set maximumValue(a: number);
    private _specifiesRange;
    get specifiesRange(): boolean;
    set specifiesRange(a: boolean);
    private _series;
    get series(): FinancialSeries;
    set series(a: FinancialSeries);
}
/**
 * @hidden
 */
export declare abstract class FinancialSeriesView extends SeriesView {
    static $t: Type;
    bz: FinancialSeries;
    bx: FinancialBucketCalculator;
    b1: number;
    b0(a: CategoryFrame): boolean;
    b2(a: CategoryFrame): void;
    constructor(a: FinancialSeries);
    protected abstract by(): FinancialBucketCalculator;
    as(): void;
    getDefaultTooltipTemplate(): string;
    protected af(): void;
}
