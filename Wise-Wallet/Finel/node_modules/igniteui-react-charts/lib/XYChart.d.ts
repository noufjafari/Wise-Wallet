import { DomainChart } from "./DomainChart";
import { IEnumerable$1, Type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { HorizontalAlignment } from "igniteui-react-core";
import { VerticalAlignment } from "igniteui-react-core";
import { Visibility } from "igniteui-react-core";
import { YAxisLabelLocation } from "./YAxisLabelLocation";
import { XAxisLabelLocation } from "./XAxisLabelLocation";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { TitleSettings } from "./TitleSettings";
import { DataSeries } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { AxisLabelsLocation } from "./AxisLabelsLocation";
/**
 * @hidden
 */
export declare abstract class XYChart extends DomainChart {
    static $t: Type;
    provideContainer(a: any): void;
    protected r9(): void;
    protected sy(a: string, b: any, c: any): void;
    private v5;
    get v7(): (item: any) => string;
    set v7(a: (item: any) => string);
    private v6;
    get v8(): (item: any) => string;
    set v8(a: (item: any) => string);
    private wm;
    get xo(): number;
    set xo(a: number);
    private wo;
    get xq(): number;
    set xq(a: number);
    private wn;
    get xp(): number;
    set xp(a: number);
    private wl;
    get xn(): number;
    set xn(a: number);
    private w3;
    get x5(): number;
    set x5(a: number);
    private w5;
    get x7(): number;
    set x7(a: number);
    private w4;
    get x6(): number;
    set x6(a: number);
    private w2;
    get x4(): number;
    set x4(a: number);
    private abw;
    get acc(): Brush;
    set acc(a: Brush);
    private ab3;
    get acj(): Brush;
    set acj(a: Brush);
    private abu;
    get aca(): Brush;
    set aca(a: Brush);
    private abv;
    get acb(): Brush;
    set acb(a: Brush);
    private wx;
    get xz(): number;
    set xz(a: number);
    private xe;
    get yg(): number;
    set yg(a: number);
    private ww;
    get xy(): number;
    set xy(a: number);
    private xd;
    get yf(): number;
    set yf(a: number);
    private wz;
    get x1(): number;
    set x1(a: number);
    private xg;
    get yi(): number;
    set yi(a: number);
    private wy;
    get x0(): number;
    set x0(a: number);
    private xf;
    get yh(): number;
    set yh(a: number);
    private wv;
    get xx(): number;
    set xx(a: number);
    private xc;
    get ye(): number;
    set ye(a: number);
    private ab2;
    get aci(): Brush;
    set aci(a: Brush);
    private ab9;
    get acp(): Brush;
    set acp(a: Brush);
    protected sz(a: string, b: any, c: any): void;
    private yo;
    get zc(): string;
    set zc(a: string);
    private ys;
    get aah(): string;
    set aah(a: string);
    private yq;
    get z0(): string;
    set z0(a: string);
    private yu;
    get aa5(): string;
    set aa5(a: string);
    private abb;
    private abd;
    protected tg(a: DataSeries): void;
    protected abstract v3(): Axis;
    protected abstract v4(): Axis;
    protected abe(a: (arg1: Axis) => void): void;
    protected abf(a: (arg1: Axis) => void, b: string): void;
    protected abk(a: (arg1: Axis) => void, b: boolean): void;
    protected abj(a: (arg1: Axis) => void): void;
    protected rt(a: (arg1: Axis) => void, b: boolean): void;
    protected abi(a: (arg1: TitleSettings) => void): void;
    protected abn(a: (arg1: TitleSettings) => void): void;
    protected abl(a: (arg1: AxisLabelSettings) => void): void;
    protected abg(a: (arg1: AxisLabelSettings) => void): void;
    xh(a: number): number;
    xj(a: number): number;
    xi(a: number): number;
    xk(a: number): number;
    protected td(a: XamDataChart): void;
    static yx(a: CategoryAxisBase, b: IEnumerable$1<DataSeries>): string;
    protected r4(a: XamDataChart): void;
    protected aba(a: Axis): void;
    protected abc(a: Axis): void;
    protected r1(): void;
    protected aa8(a: Axis, b: (arg1: AxisLabelSettings) => void): void;
    protected aa9(a: Axis, b: (arg1: TitleSettings) => void): void;
    protected sv(a: string, b: any, c: any): void;
    abm(): void;
    abh(): void;
    wa(a: YAxisLabelLocation): AxisLabelsLocation;
    v9(a: XAxisLabelLocation): AxisLabelsLocation;
    private yj;
    get yl(): any;
    set yl(a: any);
    private yk;
    get ym(): any;
    set ym(a: any);
    private abx;
    get acd(): Brush;
    set acd(a: Brush);
    private ab4;
    get ack(): Brush;
    set ack(a: Brush);
    private wp;
    get xr(): number;
    set xr(a: number);
    private w6;
    get x8(): number;
    set x8(a: number);
    private wq;
    get xs(): number;
    set xs(a: number);
    private w7;
    get x9(): number;
    set x9(a: number);
    private abz;
    get acf(): Brush;
    set acf(a: Brush);
    private ab6;
    get acm(): Brush;
    set acm(a: Brush);
    private ab0;
    get acg(): Brush;
    set acg(a: Brush);
    private ab7;
    get acn(): Brush;
    set acn(a: Brush);
    private wr;
    get xt(): number;
    set xt(a: number);
    private w8;
    get ya(): number;
    set ya(a: number);
    private ws;
    get xu(): number;
    set xu(a: number);
    private w9;
    get yb(): number;
    set yb(a: number);
    private ab1;
    get ach(): Brush;
    set ach(a: Brush);
    private ab8;
    get aco(): Brush;
    set aco(a: Brush);
    private wt;
    get xv(): number;
    set xv(a: number);
    private xa;
    get yc(): number;
    set yc(a: number);
    private yp;
    get zr(): string;
    set zr(a: string);
    private yt;
    get aaw(): string;
    set aaw(a: string);
    private aby;
    get ace(): Brush;
    set ace(a: Brush);
    private ab5;
    get acl(): Brush;
    set acl(a: Brush);
    private wk;
    get xm(): number;
    set xm(a: number);
    private w1;
    get x3(): number;
    set x3(a: number);
    private wj;
    get xl(): number;
    set xl(a: number);
    private w0;
    get x2(): number;
    set x2(a: number);
    private wu;
    get xw(): number;
    set xw(a: number);
    private xb;
    get yd(): number;
    set yd(a: number);
    private wf;
    get wh(): boolean;
    set wh(a: boolean);
    private wg;
    get wi(): boolean;
    set wi(a: boolean);
    private abp;
    get abs(): HorizontalAlignment;
    set abs(a: HorizontalAlignment);
    private acs;
    get acv(): VerticalAlignment;
    set acv(a: VerticalAlignment);
    private abo;
    get abr(): HorizontalAlignment;
    set abr(a: HorizontalAlignment);
    private abq;
    protected get_abt(): HorizontalAlignment;
    protected set_abt(a: HorizontalAlignment): void;
    get abt(): HorizontalAlignment;
    set abt(a: HorizontalAlignment);
    private acq;
    get act(): VerticalAlignment;
    set act(a: VerticalAlignment);
    private acr;
    get acu(): VerticalAlignment;
    set acu(a: VerticalAlignment);
    private acw;
    get acy(): Visibility;
    set acy(a: Visibility);
    private acx;
    get acz(): Visibility;
    set acz(a: Visibility);
    private wd;
    protected get_we(): YAxisLabelLocation;
    protected set_we(a: YAxisLabelLocation): void;
    get we(): YAxisLabelLocation;
    set we(a: YAxisLabelLocation);
    private wb;
    protected get_wc(): XAxisLabelLocation;
    protected set_wc(a: XAxisLabelLocation): void;
    get wc(): XAxisLabelLocation;
    set wc(a: XAxisLabelLocation);
    private yn;
    get y3(): string;
    set y3(a: string);
    private vz;
    get v1(): any[];
    set v1(a: any[]);
    private yr;
    get z8(): string;
    set z8(a: string);
    private v0;
    get v2(): any[];
    set v2(a: any[]);
}
