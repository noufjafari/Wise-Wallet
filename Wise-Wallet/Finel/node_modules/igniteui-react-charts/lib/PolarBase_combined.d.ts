import { MarkerSeries } from "./MarkerSeries";
import { Point, Type } from "igniteui-react-core";
import { PolarAxisInfoCache } from "./PolarAxisInfoCache";
import { SeriesRenderer$2 } from "./SeriesRenderer$2";
import { PolarFrame } from "./PolarFrame";
import { DependencyProperty } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Series } from "./Series";
import { NumericAngleAxis } from "./NumericAngleAxis";
import { NumericRadiusAxis } from "./NumericRadiusAxis";
import { TrendLineType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { ScatterItemSearchMode } from "./ScatterItemSearchMode";
import { HighlightingInfo } from "./HighlightingInfo";
import { SeriesView } from "./SeriesView";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Axis } from "./Axis";
import { Rect } from "igniteui-react-core";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { PolarAxes } from "./PolarAxes";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { OwnedPoint } from "./OwnedPoint";
import { HashPool$2 } from "igniteui-react-core";
import { MarkerManagerBase } from "./MarkerManagerBase";
import { PolarTrendLineManager } from "./PolarTrendLineManager";
import { AssigningPolarStyleEventArgs } from "./AssigningPolarStyleEventArgs";
import { AssigningPolarMarkerStyleEventArgs } from "./AssigningPolarMarkerStyleEventArgs";
import { AssigningSeriesStyleEventArgsBase } from "./AssigningSeriesStyleEventArgsBase";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { RenderSurface } from "./RenderSurface";
import { IDictionary$2 } from "igniteui-react-core";
import { AssigningSeriesShapeStyleEventArgsBase } from "./AssigningSeriesShapeStyleEventArgsBase";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare abstract class PolarBase extends MarkerSeries {
    static $t: Type;
    protected by(): SeriesView;
    l4(a: SeriesView): void;
    r6: PolarBaseView;
    private r7;
    kz(): void;
    protected get_d9(): boolean;
    c2(a: List$1<SeriesPointOfInterest>, b: boolean, c: boolean, d: number): boolean;
    constructor();
    private t5;
    private t7;
    private rt;
    r5: PolarAxisInfoCache;
    private u9;
    private u8;
    sj: SeriesRenderer$2<PolarFrame, PolarBaseView>;
    tm: string;
    t0: string;
    protected get sn(): IFastItemColumn$1<number>;
    protected set sn(a: IFastItemColumn$1<number>);
    private sl;
    protected get so(): IFastItemColumn$1<number>;
    protected set so(a: IFastItemColumn$1<number>);
    private sm;
    r2: NumericAngleAxis;
    r3: NumericRadiusAxis;
    s2: boolean;
    tc: number;
    sk: TrendLineType;
    u3: Brush;
    get u2(): Brush;
    set u2(a: Brush);
    static readonly uf: DependencyProperty;
    ta: number;
    u5: PenLineCap;
    u4: DoubleCollection;
    td: number;
    te: number;
    st: boolean;
    sb: PolarFrame;
    sd: PolarFrame;
    r9: PolarFrame;
    sa(): PolarFrame;
    r4: PolarAxes;
    lk(): void;
    protected k5(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    protected na(a: Rect, b: Rect): void;
    protected nb(a: Rect, b: Rect): void;
    fd(a: Rect, b: Rect, c: SeriesView): boolean;
    mo(a: boolean): void;
    private u7;
    aq(a: Axis): AxisRange;
    eq(a: any): boolean;
    hy(a: Point): any;
    hi(a: Point): number;
    f9(a: Point): number;
    protected s6(a: Point): number;
    protected s5(a: Point): number;
    private su;
    private s3;
    private s9;
    protected s8(a: Point): number;
    protected s7(a: Point): number;
    ps(a: Point, b: boolean, c: boolean): Point;
    ag(): Axis[];
    h1(a: any, b: string): any;
    protected l9(a: any, b: string, c: any, d: any): void;
    private sf;
    get sg(): ScatterItemSearchMode;
    set sg(a: ScatterItemSearchMode);
    protected sh(): ScatterItemSearchMode;
    protected get_sx(): boolean;
    protected get sx(): boolean;
    protected sz(): boolean;
    protected sy(): boolean;
    si: ScatterItemSearchMode;
    tb: number;
    ss(a: any): boolean;
    sr(a: any): boolean;
    k2(a: boolean, b: SeriesView): void;
    private ru;
    t4(a: PolarFrame, b: number, c: Rect, d: Rect): void;
    ua(a: PolarFrame, b: PolarBaseView): void;
    sw: boolean;
    sv: boolean;
    protected sq: boolean;
    protected sp: boolean;
    protected get_d0(): boolean;
    private r0;
    private r1;
    protected ry(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rz(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    protected rx(a: any, b: Point, c: HighlightingInfo): HighlightingInfo;
    ax(a: any, b: Point, c: boolean): HighlightingInfo;
    ay(a: any, b: Point, c: boolean): HighlightingInfo;
    assigningPolarStyle: (sender: any, args: AssigningPolarStyleEventArgs) => void;
    assigningPolarMarkerStyle: (sender: any, args: AssigningPolarMarkerStyleEventArgs) => void;
    protected s1(): boolean;
    protected s0(): boolean;
    ue(a: PolarFrame, b: PolarBaseView): void;
    rr(a: number, b: number): any[];
    protected rs(a: number, b: number): any[];
    protected se: PolarSeriesRenderManager;
    t6(a: PolarBaseView, b: PolarFrame): void;
    protected t9(a: number, b: number, c: boolean): void;
    protected t8(a: number, b: number, c: boolean): void;
    protected uc(a: AssigningPolarStyleEventArgs): void;
    protected ub(a: AssigningPolarMarkerStyleEventArgs): void;
    private t3;
    protected m1(): void;
    sc: PolarFrame;
    mp(a: Rect, b: RenderSurface): void;
    private r8;
    mm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    ud(a: IDictionary$2<any, OwnedPoint>, b: HashPool$2<any, Marker>): void;
    rq(a: HashPool$2<any, Marker>, b: Rect, c: Rect): Point[];
    s4(a: HashPool$2<any, Marker>): List$1<number>;
    u6(a: number): Point;
    protected lc(a: any): void;
    tw: string;
    ti: string;
    ty: string;
    tk: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class PolarSeriesRenderManager extends SeriesRenderManager {
    static $t: Type;
    protected c(): AssigningSeriesStyleEventArgsBase;
    protected a(): AssigningSeriesShapeStyleEventArgsBase;
    aw: AssigningPolarMarkerStyleEventArgs;
    ax: AssigningPolarStyleEventArgs;
    ay(a: PolarBase, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    az(a: Series, b: boolean, c: (orderedStartIndex: number, orderedEndIndex: number) => any[]): void;
    a0(a: AssigningSeriesStyleEventArgsBase, b: number, c: number, d: boolean): void;
}
/**
 * @hidden
 */
export declare class PolarBaseView extends MarkerSeriesView {
    static $t: Type;
    protected cu: PolarBase;
    ct: MarkerManagerBase;
    constructor(a: PolarBase);
    cv: PolarTrendLineManager;
    as(): void;
    cz(a: (arg1: Marker) => void): void;
    protected cs(): MarkerManagerBase;
    protected c0(a: IDictionary$2<any, OwnedPoint>): void;
    protected cr(): Point[];
    protected cx(): List$1<number>;
    cy(a: Rect, b: Rect, c: Rect, d: Rect): void;
    c1(): void;
    cw: HashPool$2<any, Marker>;
    cf(a: (arg1: Marker) => void): void;
    protected a5(a: RenderingContext, b: boolean): void;
    protected c2(): Rect;
    getDefaultTooltipTemplate(): string;
}
