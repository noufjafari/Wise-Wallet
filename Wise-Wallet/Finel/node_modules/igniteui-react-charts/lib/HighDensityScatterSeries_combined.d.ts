import { Series } from "./Series";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Color } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { SeriesView } from "./SeriesView";
import { ProgressiveLoadStatusEventArgs } from "./ProgressiveLoadStatusEventArgs";
import { FastItemsSourceEventAction } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { RenderSurface } from "./RenderSurface";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class HighDensityScatterSeries extends Series {
    static $t: Type;
    protected get_d8(): boolean;
    protected gz(): number;
    constructor();
    protected get_ef(): boolean;
    qj: NumericXAxis;
    ql: NumericYAxis;
    sm: string;
    protected get qq(): IFastItemColumn$1<number>;
    protected set qq(a: IFastItemColumn$1<number>);
    private qp;
    si: string;
    sq: string;
    sk: string;
    ss: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    h1(a: any, b: string): any;
    su: string;
    protected get qs(): IFastItemColumn$1<number>;
    protected set qs(a: IFastItemColumn$1<number>);
    private qr;
    qz: boolean;
    qy: boolean;
    ru: number;
    rt: number;
    ts: Color;
    tr: Color;
    r6: number;
    private s9;
    protected l9(a: any, b: string, c: any, d: any): void;
    private s3;
    qx(a: any): boolean;
    qw(a: any): boolean;
    private sz;
    private r0;
    private qt;
    private rf;
    private re;
    private rd;
    private rc;
    private rb;
    private ra;
    private q9;
    private q8;
    private get rj();
    private get ri();
    private get rh();
    private get rg();
    private qh;
    private qm;
    private qn;
    private qi;
    private qk;
    private qv;
    fd(a: Rect, b: Rect, c: SeriesView): boolean;
    private r1;
    get r7(): number;
    set r7(a: number);
    mo(a: boolean): void;
    private s1;
    private r3;
    private rx;
    private rw;
    protected k5(a: FastItemsSourceEventAction, b: number, c: number, d: string): void;
    private sy;
    private s4;
    private s2;
    progressiveLoadStatusChanged: (sender: any, e: ProgressiveLoadStatusEventArgs) => void;
    private sw;
    private s0;
    private q0;
    private tb;
    private q6;
    private q5;
    private q7;
    private rm;
    private rk;
    private rl;
    private rn;
    private rp;
    private rr;
    private rq;
    private ro;
    private q2;
    private q3;
    private q4;
    private q1;
    private s6;
    eq(a: any): boolean;
    private s8;
    private r4;
    private r5;
    private rs;
    private s7;
    private s5;
    private rz;
    private ry;
    private qe;
    private r2;
    private sx;
    protected by(): SeriesView;
    l4(a: SeriesView): void;
    protected qg: HighDensityScatterSeriesView;
    aq(a: Axis): AxisRange;
    private qu;
    protected na(a: Rect, b: Rect): void;
    protected nb(a: Rect, b: Rect): void;
    private _itemIndexes;
    private qf;
    private qc;
    hy(a: Point): any;
    private r8;
    ta(a: number[], b: number, c: number): void;
    protected get_e7(): boolean;
    protected set_e7(a: boolean): void;
    k2(a: boolean, b: SeriesView): void;
    mp(a: Rect, b: RenderSurface): void;
    private qo;
    mm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    kz(): void;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class HighDensityScatterSeriesView extends SeriesView {
    static $t: Type;
    constructor(a: HighDensityScatterSeries);
    as(): void;
    ca(): void;
    protected bz: HighDensityScatterSeries;
    private bx;
    private b5;
    private b4;
    private b2;
    private b3;
    private b0;
    b6(): void;
    by(): number[];
    b9(): void;
    b8(a: () => void): void;
    protected a6(a: RenderingContext, b: boolean): void;
    b1(a: Color, b: Color): boolean;
    b7(): void;
    al(a: any): void;
}
