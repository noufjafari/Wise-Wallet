import { ScatterTriangulationSeries } from "./ScatterTriangulationSeries";
import { ColorScale } from "./ColorScale";
import { Type, Point } from "igniteui-react-core";
import { IFastItemColumn$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { RenderSurface } from "./RenderSurface";
import { SeriesView } from "./SeriesView";
import { WriteableBitmap } from "igniteui-react-core";
import { TriangleRasterizer } from "./TriangleRasterizer";
import { ScalerParams } from "./ScalerParams";
import { ObservableColorCollection } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class ScatterAreaSeries extends ScatterTriangulationSeries {
    static $t: Type;
    protected get_df(): boolean;
    constructor();
    private r7;
    get r9(): ColorScale;
    set r9(a: ColorScale);
    private sq;
    h1(a: any, b: string): any;
    sl: string;
    private sc;
    private get sd();
    private set sd(value);
    protected get_e7(): boolean;
    protected set_e7(a: boolean): void;
    protected l9(a: any, b: string, c: any, d: any): void;
    mo(a: boolean): void;
    mm(a: Rect, b: Rect, c: RenderSurface, d: string, e: number): void;
    protected sr(a: SeriesView): void;
    private so;
    hy(a: Point): any;
    protected r5: number[];
    protected r6: number[];
    sb(a: SeriesView, b: ScalerParams, c: ScalerParams): TriangleRasterizer;
    protected se(): ObservableColorCollection;
    r8: ColorScale;
    ss(): void;
    protected m1(): void;
    k2(a: boolean, b: SeriesView): void;
    protected by(): SeriesView;
    l4(a: SeriesView): void;
    sa: ScatterAreaSeriesView;
    sp(a: any): void;
    sh: string;
    sj: string;
    getDataLegendSeriesContextAt(a: number, b: number): any;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class ScatterAreaSeriesView extends SeriesView {
    static $t: Type;
    private b1;
    private bx;
    get b0(): number[];
    set b0(a: number[]);
    constructor(a: ScatterAreaSeries);
    ca(a: number, b: number): void;
    b6(a: any): void;
    private b5;
    private b4;
    private b3;
    by(): number[];
    bz(a: boolean): number[];
    private b9;
    b2(a: Rect, b: ColorScale, c: IFastItemColumn$1<number>): TriangleRasterizer;
    b8(a: TriangleRasterizer): void;
    b7(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    cb(a: WriteableBitmap): void;
    al(a: any): void;
    getDefaultTooltipTemplate(): string;
}
