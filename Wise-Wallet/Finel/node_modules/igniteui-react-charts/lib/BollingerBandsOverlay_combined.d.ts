import { FinancialOverlay } from "./FinancialOverlay";
import { List$1 } from "igniteui-react-core";
import { Type, Point } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { AxisRange } from "./AxisRange";
import { Axis } from "./Axis";
import { FinancialSeriesView } from "./FinancialSeriesView";
import { Rect } from "igniteui-react-core";
import { SeriesView } from "./SeriesView";
import { FinancialBucketCalculator } from "./FinancialBucketCalculator";
import { Polyline } from "igniteui-react-core";
import { Polygon } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
/**
 * @hidden
 */
export declare class BollingerBandsOverlay extends FinancialOverlay {
    static $t: Type;
    constructor();
    t5: number;
    t4: number;
    protected l9(a: any, b: string, c: any, d: any): void;
    private t2;
    private t3;
    protected tv(): boolean;
    aq(a: Axis): AxisRange;
    t0: List$1<number>;
    t1: List$1<number>;
    tb(a: CategoryFrame, b: FinancialSeriesView): void;
    k2(a: boolean, b: SeriesView): void;
    gn(a: Point, b: boolean, c: boolean): number;
    ho(a: Point, b: boolean): number;
    hm(a: Point, b: boolean): number;
    fd(a: Rect, b: Rect, c: SeriesView): boolean;
    td(a: CategoryFrame, b: FinancialSeriesView): void;
    protected by(): SeriesView;
    l4(a: SeriesView): void;
    private tz;
    protected sk(): number;
    gg(): number;
    static $$p: string[];
}
/**
 * @hidden
 */
export declare class BollingerBandsBucketCalculator extends FinancialBucketCalculator {
    static $t: Type;
    constructor(a: FinancialSeriesView);
    protected f: BollingerBandsOverlayView;
    getBucket(a: number): number[];
}
/**
 * @hidden
 */
export declare class BollingerBandsOverlayView extends FinancialSeriesView {
    static $t: Type;
    b3: BollingerBandsOverlay;
    constructor(a: BollingerBandsOverlay);
    as(): void;
    protected by(): FinancialBucketCalculator;
    b5(a: number, b: (arg1: number) => number, c: (arg1: number) => number, d: (arg1: number) => number, e: (arg1: number) => number, f: (arg1: number) => number): void;
    b4(): void;
    get b7(): Polygon;
    get cc(): Polyline;
    get cd(): Polyline;
    get ce(): Polyline;
    private b8;
    private cf;
    private cg;
    private ch;
    private b6;
    private b9;
    private ca;
    private cb;
    protected bc(): void;
    protected a6(a: RenderingContext, b: boolean): void;
    al(a: any): void;
}
