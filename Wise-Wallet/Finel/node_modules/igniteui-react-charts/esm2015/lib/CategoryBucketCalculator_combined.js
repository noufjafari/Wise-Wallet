/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, typeCast, markType, Array_$type, Number_$type, Point_$type, enumGetBox, runOn, fromEnum, markDep } from "igniteui-react-core";
import { IBucketizer_$type } from "./IBucketizer";
import { ArgumentNullException } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { ISortingAxis_$type } from "./ISortingAxis";
import { ScalerParams } from "./ScalerParams";
import { Series } from "./Series";
import { truncate, intDivide, isNaN_, isInfinity } from "igniteui-react-core";
import { FramePreparer } from "./FramePreparer";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { List$1 } from "igniteui-react-core";
import { ISupportsMarkers_$type } from "./ISupportsMarkers";
import { IProvidesViewport_$type } from "./IProvidesViewport";
import { ISupportsErrorBars_$type } from "./ISupportsErrorBars";
import { CategoryFrame } from "./CategoryFrame";
import { PreparationParams } from "./PreparationParams";
import { IDateTimeAxis_$type } from "./IDateTimeAxis";
import { NumericAxisBase } from "./NumericAxisBase";
import { IHasCategoryTrendline_$type } from "./IHasCategoryTrendline";
import { IHasSingleValueCategory_$type } from "./IHasSingleValueCategory";
import { DefaultCategoryTrendlineHost } from "./DefaultCategoryTrendlineHost";
import { DefaultSingleValueProvider } from "./DefaultSingleValueProvider";
import { SingleValuesHolder } from "./SingleValuesHolder";
import { MarkerSeries } from "./MarkerSeries";
import { IHasCategoryModePreference_$type } from "./IHasCategoryModePreference";
import { ICategorySeriesInteractionManager_$type } from "./ICategorySeriesInteractionManager";
import { DVContainer } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { HighlightingInfo } from "./HighlightingInfo";
import { CategoryTransitionSourceFramePreparer } from "./CategoryTransitionSourceFramePreparer";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { Marker } from "./Marker";
import { MarkerSeriesView } from "./MarkerSeriesView";
import { CategorySeriesRenderManager } from "./CategorySeriesRenderManager";
import { Pool$1 } from "igniteui-react-core";
import { Clipper } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { round10N } from "igniteui-react-core";
/**
 * @hidden
 */
export let CategoryBucketCalculator = /*@__PURE__*/ (() => {
    class CategoryBucketCalculator extends Base {
        constructor(a) {
            super();
            this.c = null;
            this.e = 0;
            this.f = 0;
            this.d = 0;
            if (a == null) {
                throw new ArgumentNullException(0, "view");
            }
            this.c = a;
            this.e = -1;
            this.d = 0;
        }
        getBucket(a) {
            return null;
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getErrorBucket(a, b) {
            return NaN;
        }
        g(a) {
            let b = this.c.bv;
            let c = this.c.bu;
            let d = this.c.ct;
            let e = typeCast(CategoryAxisBase.$, d.fetchXAxis());
            let f = d.cl;
            if (b.isEmpty || c.isEmpty || e == null || f == null || f.count == 0) {
                this.d = 0;
                return;
            }
            let g = d.getEffectiveViewport1(this.c);
            let h = d.pz(this.c);
            let i = typeCast(ISortingAxis_$type, e);
            if (i == null || i.i$b == null) {
                let j = new ScalerParams(0, b, c, e.cg, g);
                let k = Math.floor(e.el(h.left, j));
                let l = Math.ceil(e.el(h.right, j));
                if (e.cg) {
                    l = Math.ceil(e.el(h.left, j));
                    k = Math.floor(e.el(h.right, j));
                }
                l = Math.min(l, e.lf - 1);
                let m = Math.floor((l - k + 1) * a / h.width);
                this.d = truncate(Math.max(1, m));
                this.e = truncate(Math.max(0, Math.floor(k / this.d) - 1));
                this.f = truncate(Math.ceil(l / this.d));
            }
            else {
                this.e = i.i$e(b, c, g, h);
                this.f = i.i$g(b, c, g, h);
                this.d = 1;
            }
        }
        getBucketInfo(a, b, c, d) {
            a = this.e;
            b = this.f;
            c = this.d;
            d = this.c.ct.fx;
            return {
                p0: a,
                p1: b,
                p2: c,
                p3: d
            };
        }
        cacheValues() {
        }
        unCacheValues() {
        }
    }
    CategoryBucketCalculator.$t = /*@__PURE__*/ markType(CategoryBucketCalculator, 'CategoryBucketCalculator', Base.$, [IBucketizer_$type]);
    return CategoryBucketCalculator;
})();
/**
 * @hidden
 */
export let CategoryFramePreparerBase = /*@__PURE__*/ (() => {
    class CategoryFramePreparerBase extends FramePreparer {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        let d = [c, typeCast(ISupportsMarkers_$type, c), typeCast(IProvidesViewport_$type, c), typeCast(ISupportsErrorBars_$type, c), typeCast(IBucketizer_$type, c)];
                        {
                            let f = d[0];
                            let g = d[1];
                            let h = d[2];
                            let i = d[3];
                            let j = d[4];
                            super(1, g, h, i);
                            this.g = null;
                            this.h = null;
                            this.m = false;
                            this.o = new List$1(Array_$type, 0);
                            this.p = new List$1(Number_$type, 0);
                            this.n = new List$1(Number_$type, 0);
                            this.h = f;
                            this.g = j;
                        }
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        super(1, d, e, f);
                        this.g = null;
                        this.h = null;
                        this.m = false;
                        this.o = new List$1(Array_$type, 0);
                        this.p = new List$1(Number_$type, 0);
                        this.n = new List$1(Number_$type, 0);
                        this.h = c;
                        this.g = g;
                    }
                    break;
            }
        }
        i(a) {
            let b = new PreparationParams();
            b.f = this.h.useHighMarkerFidelity;
            b.b = this.h.scaler;
            b.c = this.h.yScaler;
            b.d = typeCast(ISortingAxis_$type, b.b);
            b.a = typeCast(CategoryFrame.$, a);
            if (b.a == null || b.b == null || b.c == null) {
                return null;
            }
            let c;
            let d;
            let e;
            let f;
            let g = this.g.getBucketInfo(c, d, e, f);
            c = g.p0;
            d = g.p1;
            e = g.p2;
            f = g.p3;
            b.i = c;
            b.j = d;
            b.h = e;
            b.g = f;
            if (b.j < b.i) {
                return null;
            }
            let h;
            let i;
            let j;
            let k = this.a.getViewInfo(i, h);
            i = k.p0;
            h = k.p1;
            j = this.a.getEffectiveViewport();
            b.m = h;
            b.l = i;
            b.k = j;
            if (Rect.l_op_Equality(b.m, Rect.empty) || Rect.l_op_Equality(b.l, Rect.empty)) {
                return null;
            }
            if (this.h != null && (typeCast(Series.$, this.h) !== null && this.h.dx) && this.g != null) {
                b.e = true;
            }
            return b;
        }
        r(a, b, c, d) {
            return a.getSeriesOffset(b, c, d, this.h.currentMode2Index, this.h.currentCategoryMode);
        }
        s(a) {
            return this.r(a.b, a.m, a.l, a.k);
        }
        d(a, b) {
            let c = this.i(a);
            if (c == null || this.g == null) {
                return;
            }
            c.a.f.clear();
            c.a.k.clear();
            c.a.m.clear();
            c.a.p.clear();
            c.a.i.clear();
            c.a.h.clear();
            c.a.g.clear();
            let d = this.c.shouldDisplayMarkers;
            let e = false;
            let f = this.s(c);
            let g = this.j(c);
            if (c.d != null && c.d.i$b != null && c.d.i$b.count != g.e) {
                return;
            }
            if (c.d != null && c.d.i$a) {
                c.d.i$h();
            }
            this.g.cacheValues();
            if (this.m && c.d != null && c.d.i$b.count > 0) {
                let h = c.d.i$b._inner[c.i];
                this.z(g, h, true, c.e);
                while ((isNaN_(g.c) || isNaN_(g.d)) && c.i > 0) {
                    c.i = c.i - 1;
                    h = c.d.i$b._inner[c.i];
                    this.z(g, h, true, c.e);
                }
                let i = c.d.i$b._inner[c.j];
                this.z(g, i, true, c.e);
                while ((isNaN_(g.c) || isNaN_(g.d)) && c.j < g.e - 1) {
                    c.j = c.j + 1;
                    i = c.d.i$b._inner[c.j];
                    this.z(g, i, true, c.e);
                }
            }
            if (this.m && c.d == null) {
                let j = c.i;
                let k = this.g.getBucket(j);
                while ((isNaN_(k[1]) || isNaN_(k[2])) && c.i > 0) {
                    c.i = c.i - 1;
                    j = c.i;
                    k = this.g.getBucket(j);
                }
                let l = c.j;
                k = this.g.getBucket(l);
                while ((isNaN_(k[1]) || isNaN_(k[2])) && c.j < (intDivide(g.e, c.h))) {
                    c.j = c.j + 1;
                    l = c.j;
                    k = this.g.getBucket(l);
                }
            }
            this.w(c, g, f);
            let m = this.t(c, g, f, d, e);
            this.c.updateMarkerCount(m);
            this.v(typeCast(CategoryFrame.$, a), b);
            this.g.unCacheValues();
            return;
        }
        v(a, b) {
        }
        get q() {
            return this.o;
        }
        t(a, b, c, d, e) {
            let f = 0;
            let g = false;
            let h = null;
            let i = false;
            let j = a.d != null;
            let k = a.m;
            let l = a.l;
            let m = typeCast(NumericAxisBase.$, a.c) !== null && a.c.li;
            let n = a.f;
            let o = this.h.mayContainUnknowns;
            let p = this.o;
            let q = this.n;
            let r = this.p;
            p.clear();
            q.clear();
            r.clear();
            let s = this.g;
            let t = this.h.provideCollisionDetector();
            let u = 0;
            let v = a.k;
            let w = new ScalerParams(0, k, l, a.b.j$a, v);
            let x = ((() => {
                let $ret = new ScalerParams(0, k, l, a.c.j$a, v);
                $ret.b = typeCast(Series.$, this.h) !== null ? this.h.gg() : NaN;
                return $ret;
            })());
            if (j) {
                u = a.b.j$c(2, w) - a.b.j$c(1, w);
                i = this.k();
            }
            let y = a.i;
            let z = a.j;
            let aa = a.a.f;
            let ab = typeCast(IDateTimeAxis_$type, a.b);
            if (ab != null) {
                ab.StartTimeCursor();
            }
            for (let ac = y; ac <= z; ++ac) {
                let ad;
                if (!j) {
                    if (!o) {
                        ad = s.getBucketWithoutUnknowns(ac);
                    }
                    else {
                        ad = s.getBucket(ac);
                    }
                }
                else {
                    ad = ((() => { let ae = this.f(a, ac, b, u, g, h, c); ac = ae.p1; g = ae.p4; h = ae.p5; return ae.ret; })());
                }
                let ae = !m || (m && ad[1] > 0);
                let af = ad[0];
                if (!j || !isNaN_(ad[0])) {
                    aa.add(ad);
                    if (g && i) {
                        if (h != null) {
                            aa.add(h);
                        }
                    }
                    if (d && ae) {
                        let ag = ac * a.h;
                        let ah = ag;
                        if (j && a.d.i$b != null && ag >= 0 && ag < a.d.i$b.count) {
                            ag = a.d.i$b._inner[ag];
                        }
                        let ai = new Array(ad.length);
                        ai[0] = ad[0];
                        ai[1] = ad[1];
                        ai[2] = ad[2];
                        if (n && ag < b.e) {
                            ai = new Array(ad.length);
                            ai[0] = af;
                            this.z(b, ag, true, a.e);
                            ai[1] = b.c;
                            ai[2] = b.d;
                        }
                        p.add(ai);
                        q.add(a.a.f.count - 1);
                        r.add(ag);
                    }
                }
            }
            if (ab != null) {
                ab.ResetTimeCursor();
            }
            this.y(a, c, j, w, x, e, d);
            if (d) {
                let aj = p.count;
                let ak;
                for (let al = 0; al < aj; al++) {
                    ak = p._inner[al];
                    if (this.l(a.a, ak, t, Math.min(r._inner[al], b.e - 1), f, q._inner[al])) {
                        ++f;
                    }
                }
            }
            return f;
        }
        k() {
            if (typeCast(Series.$, this.h) !== null) {
                return this.h.dg;
            }
            return false;
        }
        f(a, b, c, d, e, f, g) {
            let h;
            f = null;
            e = false;
            let i = typeCast(CategorySeries.$, this.h);
            let j = a.l;
            let k = a.m;
            let l = a.k;
            let m = new ScalerParams(0, k, j, a.b.j$a, l);
            let n = new ScalerParams(0, k, j, a.c.j$a, l);
            let o = a.e;
            if (a.d == null || a.d.i$b == null || a.d.i$b.count == 0) {
                return {
                    ret: [NaN, NaN, NaN],
                    p1: b,
                    p4: e,
                    p5: f
                };
            }
            if (i != null && i.cl != null && i.cl.count < a.d.i$b.count) {
                return {
                    ret: [NaN, NaN, NaN],
                    p1: b,
                    p4: e,
                    p5: f
                };
            }
            let p = a.d.i$b._inner[b];
            let q = a.d.i$d(p);
            let r = q;
            this.z(c, p, false, o);
            while (b < a.j) {
                p = a.d.i$b._inner[b + 1];
                r = a.d.i$d(p);
                this.z(c, p, true, o);
                if (r - q >= d || isNaN_(c.c) || isNaN_(c.d)) {
                    if (e) {
                        let s = a.d.i$b._inner[b];
                        this.z(c, s, true, o);
                        f = [a.b.j$b(q, m), c.c, c.d];
                    }
                    break;
                }
                if (!e && this.k()) {
                    let t = a.d.i$b._inner[b];
                    this.z(c, t, true, o);
                    let u = [a.b.j$b(q, m), c.c, c.d];
                    if (!isNaN_(u[0])) {
                        if (!isNaN_(u[1]) && !isNaN_(u[2])) {
                            if (a.d != null) {
                                u[0] = u[0] + g;
                            }
                            a.a.f.add(u);
                            e = true;
                        }
                        else {
                            break;
                        }
                    }
                }
                b++;
                this.u(c, p, o);
            }
            let v = NaN;
            if (!isNaN_(q)) {
                v = a.b.j$b(q, m);
            }
            h = this.e(v, c);
            return {
                ret: h,
                p1: b,
                p4: e,
                p5: f
            };
        }
        y(a, b, c, d, e, f, g) {
            let h = a.h;
            let i = a.a.f.count;
            let j = a.a.f;
            let k = this.o;
            let l = k.count;
            if (f) {
                let m = a.c.j$b(a.c.l6, e);
                a.c.j$e(a.a.k, 0, a.a.k.count, e);
                let n = a.a.k;
                let o = n.count;
                for (let p = 0; p < n.count; p++) {
                    n._inner[p] = Math.abs(n._inner[p] - m);
                }
            }
        }
        w(a, b, c) {
        }
    }
    CategoryFramePreparerBase.$t = /*@__PURE__*/ markType(CategoryFramePreparerBase, 'CategoryFramePreparerBase', FramePreparer.$);
    return CategoryFramePreparerBase;
})();
/**
 * @hidden
 */
export let CategoryFramePreparer = /*@__PURE__*/ (() => {
    class CategoryFramePreparer extends CategoryFramePreparerBase {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        let d = [c, typeCast(ISupportsMarkers_$type, c), typeCast(IProvidesViewport_$type, c), typeCast(ISupportsErrorBars_$type, c), typeCast(IBucketizer_$type, c)];
                        {
                            let f = d[0];
                            let g = d[1];
                            let h = d[2];
                            let i = d[3];
                            let j = d[4];
                            super(1, f, g, h, i, j);
                            this.aa = new DefaultCategoryTrendlineHost();
                            this.ab = new DefaultSingleValueProvider();
                            this.ac = null;
                            this.ad = null;
                            this.ac = this.aa;
                            if (typeCast(IHasCategoryTrendline_$type, f) !== null) {
                                this.ac = typeCast(IHasCategoryTrendline_$type, f);
                            }
                            this.ad = this.ab;
                            if (typeCast(IHasSingleValueCategory_$type, f) !== null) {
                                this.ad = typeCast(IHasSingleValueCategory_$type, f);
                            }
                        }
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        super(1, c, d, e, f, g);
                        this.aa = new DefaultCategoryTrendlineHost();
                        this.ab = new DefaultSingleValueProvider();
                        this.ac = null;
                        this.ad = null;
                        this.ac = this.aa;
                        if (typeCast(IHasCategoryTrendline_$type, c) !== null) {
                            this.ac = typeCast(IHasCategoryTrendline_$type, c);
                        }
                        this.ad = this.ab;
                        if (typeCast(IHasSingleValueCategory_$type, c) !== null) {
                            this.ad = typeCast(IHasSingleValueCategory_$type, c);
                        }
                    }
                    break;
            }
        }
        l(a, b, c, d, e, f) {
            let g = b[0];
            let h = b[1];
            let i = new Rect(0, g - 5, h - 5, 11, 11);
            if (!isNaN_(g) && !isNaN_(h) && !isInfinity(g) && !isInfinity(h) && c.tryAdd(i)) {
                a.m.add({ $type: Point_$type, x: g, y: h });
                this.c.updateMarkerTemplate(e, d, f);
                return true;
            }
            return false;
        }
        j(a) {
            let b = new SingleValuesHolder();
            let c = this.ad.valueColumn;
            b.f = c;
            return b;
        }
        x(a, b, c, d, e, f) {
            if (d) {
                b[0] = b[0] + c;
            }
            else {
                b[0] = a.b.j$b(b[0], e) + c;
            }
            b[1] = a.c.j$b(b[1], f);
            if (a.h > 1 || d) {
                b[2] = a.c.j$b(b[2], f);
            }
            else {
                b[2] = b[1];
            }
        }
        y(a, b, c, d, e, f, g) {
            super.y(a, b, c, d, e, f, g);
            let h = a.h;
            let i = a.a.f.count;
            let j = a.a.f;
            let k = this.q;
            let l = k.count;
            let m = new List$1(Number_$type, 0);
            if (!c) {
                m.add(0);
            }
            let n = new List$1(Number_$type, 0);
            n.add(1);
            if (c || h > 1) {
                n.add(2);
            }
            a.b.j$d(j, m, 0, i, d);
            a.c.j$d(j, n, 0, i, e);
            for (let o = 0; o < i; o++) {
                j._inner[o][0] = j._inner[o][0] + b;
            }
            if (h == 1 && !c) {
                for (let p = 0; p < i; p++) {
                    j._inner[p][2] = j._inner[p][1];
                }
            }
            if (g) {
                a.b.j$d(k, m, 0, l, d);
                a.c.j$d(k, n, 0, l, e);
                for (let q = 0; q < l; q++) {
                    k._inner[q][0] = k._inner[q][0] + b;
                }
                if (h == 1 && !c) {
                    for (let r = 0; r < l; r++) {
                        k._inner[r][2] = k._inner[r][1];
                    }
                }
            }
        }
        w(a, b, c) {
            if (this.ac.trendLineType == 0 || this.ac.trendlinePreparer == null || this.ac.trendLinePeriod < 1) {
                return;
            }
            this.ac.trendlinePreparer.prepareLine(this.ac, a, b, c);
        }
        z(a, b, c, d) {
            let e = a;
            let f = e.f;
            let g = f.item(b);
            let h = g;
            if (d) {
                let i = this.g.getBucket(b);
                g = i[1];
                h = i[1];
            }
            if (c) {
                e.c = g;
                e.d = h;
            }
            else {
                e.a = g;
                e.b = h;
            }
        }
        u(a, b, c) {
            let d = a;
            let e = d.f;
            if (b < e.count) {
                let f;
                if (c) {
                    let g = this.g.getBucket(b);
                    f = g[1];
                }
                else {
                    f = e.item(b);
                }
                d.a = Math.min(d.a, f);
                d.b = Math.max(d.b, f);
            }
        }
        e(a, b) {
            let c = b;
            return [a, c.a, c.b];
        }
    }
    CategoryFramePreparer.$t = /*@__PURE__*/ markType(CategoryFramePreparer, 'CategoryFramePreparer', CategoryFramePreparerBase.$);
    return CategoryFramePreparer;
})();
/**
 * @hidden
 */
export let CategorySeries = /*@__PURE__*/ (() => {
    class CategorySeries extends MarkerSeries {
        by() {
            let a = new CategorySeriesView(this);
            return a;
        }
        get sg() {
            if (this.sf == null) {
                this.sf = DVContainer.instance.createInstance(ICategorySeriesInteractionManager_$type, () => this.co.n);
            }
            return this.sf;
        }
        c2(a, b, c, d) {
            if (!this.hasMarkers) {
                return false;
            }
            let e = this.getEffectiveViewport1(this.b1);
            let f = this.rw();
            let g = new ScalerParams(1, this.ce.ta, this.p7, f.cg);
            g.c = e;
            let h = this.sh();
            let i = new ScalerParams(1, this.ce.ta, this.p7, h.cg);
            i.c = e;
            let j = this.ce.ta;
            let k = this.p7;
            let l = this.currentMode2Index;
            let m = 0;
            if (f.cd && f.cb) {
                m = f.getSeriesOffset(j, k, e, l, f.categoryMode);
            }
            a.clear();
            this.qk.cf((n) => {
                if (n._visibility == 0) {
                    let o = new SeriesPointOfInterest();
                    let p = n.n;
                    let q = n.o;
                    if (p < this.p7.left || p > this.p7.right || q < this.p7.top || q > this.p7.bottom) {
                        return;
                    }
                    if (this.isVertical) {
                        if (f.ca && !f.cd && f.categoryMode != 0) {
                            o.c = n.ak;
                        }
                        else {
                            o.c = f.el(q, g);
                        }
                        o.b = h.el(p, i);
                    }
                    else {
                        if (f.ca && !f.cd && f.categoryMode != 0) {
                            o.b = n.ak;
                        }
                        else {
                            o.b = f.el(p, g);
                        }
                        o.c = h.el(q, i);
                    }
                    o.a = n.content;
                    if (b) {
                        if (this.isVertical) {
                            if (c) {
                                o.d = this.s1(o.b, d);
                            }
                            else {
                                let r = this.gt(n);
                                if (!isNaN_(r)) {
                                    o.d = this.s1(r, d);
                                }
                                else {
                                    o.d = this.s1(o.b, d);
                                }
                            }
                        }
                        else {
                            if (c) {
                                o.d = this.s1(o.c, d);
                            }
                            else {
                                let s = this.gt(n);
                                if (!isNaN_(s)) {
                                    o.d = this.s1(s, d);
                                }
                                else {
                                    o.d = this.s1(o.c, d);
                                }
                            }
                        }
                    }
                    else {
                        o.d = f.gc(n.ak);
                    }
                    a.add(o);
                }
            });
            return true;
        }
        s1(a, b) {
            if (b >= 0) {
                return round10N(a, b).toString();
            }
            else {
                return a.toString();
            }
        }
        l4(a) {
            super.l4(a);
            this.r6 = a;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get categoryAxis() {
            return this.rw();
        }
        rw() {
            return this.fetchXAxis();
        }
        sh() {
            return this.fetchYAxis();
        }
        get_c7() {
            return true;
        }
        get_em() {
            return this.sh() != null && this.sh().cg;
        }
        get_dj() {
            return true;
        }
        constructor() {
            super();
            this.r2 = null;
            this.sf = null;
            this.sj = false;
            this.si = false;
            this.assigningCategoryStyle = null;
            this.assigningCategoryMarkerStyle = null;
            this.sd = null;
            this.se = null;
            this.rz = new CategoryFrame(3);
            this.r1 = new CategoryFrame(3);
            this.rx = new CategoryFrame(3);
            this.r0 = new CategoryFrame(3);
            this.r5 = null;
            this.r9 = null;
            this.r5 = new CategorySeriesRenderManager();
            this.r9 = new CategoryTransitionSourceFramePreparer();
            this.sj = false;
            this.si = false;
            this.ab = CategorySeries.$;
        }
        ac() {
            super.ac();
            this.r6.cr.g(this.fx);
        }
        sp() {
            return (this.assigningCategoryStyle != null && this.sj) || (this.bl != 1);
        }
        sq() {
            return (this.assigningCategoryMarkerStyle != null && this.si) || (this.bl != 1);
        }
        te(a) {
            if (this.assigningCategoryStyle != null && this.sj) {
                this.assigningCategoryStyle(this, a);
            }
        }
        td(a) {
            if (this.assigningCategoryMarkerStyle != null && this.si) {
                this.assigningCategoryMarkerStyle(this, a);
            }
        }
        rq(a, b) {
            return null;
        }
        k2(a, b) {
            super.k2(a, b);
            if (a) {
                this.s8(b);
            }
        }
        bi() {
            let a = super.bi();
            return a;
        }
        lk() {
            super.lk();
            let a = this.fetchXAxis();
            if (a != null) {
                a.h7(false);
            }
            let b = this.fetchYAxis();
            if (b != null) {
                b.h7(false);
            }
        }
        nb(a, b) {
            super.nb(a, b);
            this.r6.cr.g(this.fx);
            this.mn(false);
        }
        na(a, b) {
            if (this.e4 && this.g5 < 0.05 && (this.ce == null || !this.ce.et())) {
                this.e5 = true;
            }
            super.na(a, b);
            this.r6.cr.g(this.fx);
            this.mn(false);
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    let e = this.fetchYAxis();
                    let f = this.fetchXAxis();
                    if (c != null && d == null) {
                        this.k6(f);
                        this.k6(e);
                    }
                    if (c == null && d != null) {
                        this.me(f);
                        this.me(e);
                    }
                    this.r6.cr.g(this.fx);
                    this.mn(false);
                    break;
                case "SyncLink":
                    if (this.b9 != null && this.ce != null) {
                        this.r6.cr.g(this.fx);
                    }
                    this.mn(false);
                    break;
                case "TransitionProgress":
                    this.r1.c(this.g5, this.rz, this.rx);
                    if (this.cy(this.b1)) {
                        return;
                    }
                    if (this.g5 == 1) {
                        this.rx.v();
                        this.tf(this.rx, this.r6);
                        if (this.e4) {
                            this.e4 = false;
                            this.k3();
                            this.cf.r = truncate(this.gr());
                            this.cf.b = this.cg;
                        }
                    }
                    else {
                        this.tf(this.r1, this.r6);
                    }
                    if (this.ce != null) {
                        this.ce.ob(this);
                    }
                    break;
                case "ErrorBarSettings":
                    this.lu();
                    break;
                case CategorySeries.$$p[4]:
                    this.mn(false);
                    break;
                case CategorySeries.$$p[1]:
                    this.sj = this.sl();
                    this.mn(false);
                    break;
                case CategorySeries.$$p[0]:
                    this.si = this.sk();
                    this.mn(false);
                    break;
            }
        }
        sl() {
            return this.sn;
        }
        sk() {
            return this.sm;
        }
        sv(a) {
            return this.gb(a, this.fetchXAxis());
        }
        get_ec() {
            return typeCast(ISortingAxis_$type, this.rw()) !== null;
        }
        as() {
            return this.rw();
        }
        hk(a) {
            return this.sg.b$d(this, a);
        }
        hy(a) {
            return this.sg.b$f(this, a);
        }
        hi(a) {
            let b = truncate(Math.round(this.f9(a)));
            return b;
        }
        f9(a) {
            return this.sg.b$c(this, a);
        }
        ay(a, b, c) {
            if (this.ei(this.bl) && !c) {
                let d = this.sc(a, b, this.se);
                this.se = d;
                return d;
            }
            else {
                let e = this.sa(a, b, this.se);
                e.e = true;
                this.se = e;
                return e;
            }
        }
        get_d0() {
            return true;
        }
        k0() {
            super.k0();
            this.sd = null;
            this.se = null;
        }
        ax(a, b, c) {
            if (this.c3 && this.ei(this.bl) && !c) {
                let d = this.sb(a, b, this.sd);
                this.sd = d;
                return d;
            }
            else {
                let e = this.sa(a, b, this.sd);
                this.sd = e;
                return e;
            }
        }
        su() {
            return this.r6.cu.a;
        }
        sc(a, b, c) {
            if (!this.qn()) {
                return null;
            }
            let d = this.ry();
            let e = this.su();
            return this.sg.b$b(this, e, this.sy(this.b1), this.sx(this.b1), d.f, a, b, c);
        }
        sb(a, b, c) {
            let d = this.sy(this.b1);
            let e = this.sz(this.b1);
            let f = this.sx(this.b1);
            let g = this.ry();
            return this.sg.b$a(this, g.f, d, e, f, a, b, c);
        }
        sa(a, b, c) {
            let d = new HighlightingInfo();
            d.b = this;
            d.h = 0;
            d.g = this.cl != null ? this.cl.count - 1 : 0;
            d.d = true;
            if (c != null && c.h == d.h && c.g == d.g) {
                return c;
            }
            return d;
        }
        ry() {
            let a = this.rx;
            if (this.cw()) {
                if (this.cf.g) {
                    this.cf.t();
                }
                a = this.r1;
            }
            return a;
        }
        ta(a, b, c, d, e, f) {
            let g = this.bl != 1;
            this.r5.a3(this.r5.d, d.cm, a, b, c, d, e, f, true);
            this.r5.aa(this.fv);
            let h = this.r5.ax;
            let i = null;
            let j = this.cl;
            let k = null;
            if (g && this.ce != null) {
                i = this.ce.a7.getHighlightingInfo(this, j, h.o, h.n, true);
                if (this.ce.a7.isCrossSeriesHighlight(this)) {
                    k = this.ce.a7.getHighlightingInfo(this, j, h.o, h.n, true);
                }
                h.b = i;
            }
            h.f = f;
            this.td(h);
            this.r5.y(this, i, f, g, h.m, this.ce.a7.totalHighlightingProgress);
        }
        tb(a, b, c, d, e, f) {
            let g = this.bl != 1;
            this.r5.a3(this.r5.b, d.cm, a, b, c, d, e, f, false);
            this.r5.ab(this.fv);
            let h = this.r5.ay;
            let i = null;
            let j = this.cl;
            if (g && this.ce != null) {
                i = this.ce.a7.getHighlightingInfo(this, j, h.o, h.n, false);
                h.b = i;
            }
            h.f = f;
            this.te(h);
            this.r5.z(this, i, f, g, b < 0);
        }
        fd(a, b, c) {
            let d = super.fd(a, b, c);
            d = d && this.st(this.fetchXAxis());
            d = d && this.st(this.fetchYAxis());
            let e = c;
            if (!c.o() || b.isEmpty || a.isEmpty || this.cl == null) {
                d = false;
            }
            if (!d) {
                e.cr.d = 0;
            }
            return d;
        }
        st(a) {
            if (a == null || a.bh == null) {
                return false;
            }
            let b = typeCast(CategoryAxisBase.$, a);
            if (b != null) {
                if (b.itemsSource == null) {
                    return false;
                }
                if (b.le < 1) {
                    return false;
                }
            }
            else {
                let c = typeCast(NumericAxisBase.$, a);
                if (c != null) {
                    return c.lw != c.lv;
                }
            }
            return true;
        }
        eu() {
            return this.so;
        }
        r7() {
            return 12;
        }
        k3() {
            super.k3();
            this.rz.v();
            this.rx.v();
            this.r1.v();
        }
        mo(a) {
            super.mo(a);
            this.r6.cr.g(this.fx);
            if (this.cy(this.b1)) {
                this.rx.y();
                this.r1.y();
                this.rz.y();
                return;
            }
            if (this.ew) {
                if (this.cw()) {
                    if (this.cf.g) {
                        this.cf.t();
                    }
                    this.tf(this.r1, this.r6);
                }
                else {
                    this.tf(this.rx, this.r6);
                }
                return;
            }
            if (this.er(a)) {
                let b = this.rz;
                if (this.cw()) {
                    if (this.cf.g) {
                        this.cf.t();
                    }
                    this.rz = this.r1;
                    this.r1 = b;
                }
                else {
                    this.rz = this.rx;
                    this.rx = b;
                }
                this.tc(this.rx, this.r6);
                if (this.e6) {
                    this.cf.w();
                    this.cf.r = truncate(this.gs());
                    this.cf.b = this.ch != null ? this.ch : this.cg;
                    this.r9.p(this.rz, this.rx, this.isVertical, this.fetchXAxis(), this.fetchYAxis(), this.r8, this.r7(), this.cb, this.ca(), runOn(this, this.sw), this.r6.bu);
                }
                this.ky();
                this.mw();
                if (this.e6) {
                    this.e5 = false;
                    this.e4 = true;
                }
            }
            else {
                this.tc(this.rx, this.r6);
                this.tf(this.rx, this.r6);
            }
        }
        ca() {
            return 3;
        }
        sw() {
            if (this.isVertical) {
                return this.p7.left;
            }
            return this.p7.bottom;
        }
        s0() {
            let a = 0;
            let b = this.fetchXAxis();
            for (let c of fromEnum(this.ce.series)) {
                if (c == this) {
                    return a;
                }
                let d = typeCast(CategorySeries.$, c);
                if (d != null) {
                    let e = typeCast(CategoryAxisBase.$, d.fetchXAxis());
                    if (e == b && d.preferredCategoryMode(e) == 2) {
                        a++;
                    }
                }
            }
            return -1;
        }
        get GetErrorBarsXAxis() {
            return this.fetchXAxis();
        }
        get GetErrorBarsYAxis() {
            return this.fetchYAxis();
        }
        s9(a, b) {
            this.r5.a1(this, this.sq(), runOn(this, this.rq), this.sx(a), this.sy(a));
            let c = this.r5.d;
            let d = c != null;
            let e = this.rw();
            if (e == null) {
                return;
            }
            let f = this.getEffectiveViewport1(a);
            let g = new ScalerParams(0, a.bv, a.bu, e.cg, f);
            let h = this.cl == null ? 0 : this.cl.count;
            let i = a;
            let j = b.f;
            let k = i.cr.e;
            let l = i.cr.f;
            let m = i.cr.d;
            let n = k * m;
            for (let o = 0; o < a.cu.count; o++) {
                let p = a.cu.item(o);
                let q = p.content;
                if (d) {
                    let r = p.al;
                    this.ta(j, r, h, e, g, a.q);
                }
                this.r5.ac(p, q);
            }
        }
        tf(a, b) {
            this.py = a.aa;
            b.au();
        }
        tc(a, b) {
            a.u();
        }
        sx(a) {
            return a.cr.d;
        }
        sy(a) {
            return a.cr.e;
        }
        sz(a) {
            return a.cr.f;
        }
        s8(a) {
            let b = a;
            b.cu.count = 0;
        }
        mp(a, b) {
            super.mp(a, b);
            if (!this.e3) {
                this.b1.a2(b);
                return;
            }
            let c = typeCast(CategorySeriesView.$, this.b0);
            c.cr.g(this.fx);
            this.b1.a2(b);
            if (this.cy(this.b0)) {
                return;
            }
            this.tg();
            this.e3 = false;
        }
        tg() {
            let a = typeCast(CategorySeriesView.$, this.b0);
            if (!this.ex) {
                this.tc(this.r0, a);
            }
            this.ex = false;
            this.tf(this.r0, a);
        }
        r3(a) {
            let b = typeCast(CategorySeriesView.$, a);
            if (b != null && b.q) {
                if (b.p) {
                    return new CategoryFramePreparer(1, typeCast(IIsCategoryBased_$type, this), typeCast(ISupportsMarkers_$type, b), b, this, b.cr);
                }
                else {
                    return new CategoryFramePreparer(1, typeCast(IIsCategoryBased_$type, this), typeCast(ISupportsMarkers_$type, b), this.ce.cu.o, this, b.cr);
                }
            }
            else {
                return this.r2;
            }
        }
        ao(a) {
            if (this.fetchXAxis() == a) {
                return this.fetchYAxis();
            }
            if (this.fetchYAxis() == a) {
                return this.fetchXAxis();
            }
            return null;
        }
        ag() {
            return [this.fetchXAxis(), this.fetchYAxis()];
        }
        static rr(a, b, c, d, e) {
            let f = null;
            if (b > -1 && !d.isEmpty && !c.isEmpty) {
                let g = a._inner[0][0] < c.left - 2000 ? c.left - 10 : NaN;
                let h = c.bottom + 10;
                let i = a._inner[b][0] > c.right + 2000 ? c.right + 10 : NaN;
                let j = c.top - 10;
                f = new Clipper(1, g, h, i, j, e);
            }
            return f;
        }
    }
    CategorySeries.$t = /*@__PURE__*/ markType(CategorySeries, 'CategorySeries', MarkerSeries.$, [IHasCategoryModePreference_$type, ISupportsErrorBars_$type]);
    CategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, CategorySeries, 'raisePropertyChanged', ['IsCustomCategoryMarkerStyleAllowed:sm:th', [0, false], 'IsCustomCategoryStyleAllowed:sn:ti', [0, false], 'IsTransitionInEnabled:so:tj', [0, false], 'TransitionInMode:r8:tk', [CategoryTransitionInMode_$type, /*@__PURE__*/ enumGetBox(CategoryTransitionInMode_$type, 0)], 'UseHighMarkerFidelity:ss:tl', [0, false]]);
    return CategorySeries;
})();
/**
 * @hidden
 */
export let CategorySeriesView = /*@__PURE__*/ (() => {
    class CategorySeriesView extends MarkerSeriesView {
        cv(a) {
            if (this.cw != a.t) {
                return true;
            }
            return false;
        }
        cy(a) {
            this.cw = a.t;
        }
        constructor(a) {
            super(a);
            this.ct = null;
            this.cw = 0;
            this.cr = null;
            this.cu = null;
            this.cw = -1;
            this.ct = a;
            this.cr = this.cs();
            this.cu = ((() => {
                let $ret = new Pool$1(Marker.$);
                $ret.create = runOn(this, this.b0);
                $ret.activate = runOn(this, this.cj);
                $ret.disactivate = runOn(this, this.cl);
                $ret.destroy = runOn(this, this.ck);
                return $ret;
            })());
        }
        updateMarkerTemplate(a, b, c) {
            if (!this.b1.qp) {
                let d = this.cu.item(a);
                let e = d.content;
                e.item = this.e.cl.item(b);
                d.ak = b;
                d.al = c;
            }
        }
        cs() {
            return new CategoryBucketCalculator(this);
        }
        get shouldDisplayMarkers() {
            return this.ct.qn();
        }
        updateMarkerCount(a) {
            this.cu.count = a;
        }
        cf(a) {
            this.cu.c(a);
        }
        cx() {
        }
    }
    CategorySeriesView.$t = /*@__PURE__*/ markType(CategorySeriesView, 'CategorySeriesView', MarkerSeriesView.$, [ISupportsMarkers_$type]);
    return CategorySeriesView;
})();
