/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, INotifyPropertyChanged_$type, BaseError, Type, PropertyChangedEventArgs, Delegate_$type, fromEnum, String_$type, runOn, delegateCombine, EnumUtil, enumGetBox, typeCast, delegateRemove, markType, TypeRegistrar, getInstanceType } from "igniteui-react-core";
import { IDataLegendTarget_$type } from "igniteui-react-core";
import { IToolbarTarget_$type } from "igniteui-react-core";
import { ArrayExtension } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DataSeriesType_$type } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { Color } from "igniteui-react-core";
import { ColorUtil } from "igniteui-react-core";
import { DVContainer } from "igniteui-react-core";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { ChartSortDescriptionCollection } from "./ChartSortDescriptionCollection";
import { FilterExpressionCollection } from "igniteui-react-core";
import { ChartSummaryDescriptionCollection } from "./ChartSummaryDescriptionCollection";
import { SortGroupParser } from "igniteui-react-core";
import { SummaryParser } from "igniteui-react-core";
import { BrushCollection } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { UnknownValuePlotting_$type } from "igniteui-react-core";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerAutomaticBehavior_$type } from "./MarkerAutomaticBehavior";
import { TrendLineType_$type } from "igniteui-react-core";
import { ComputedPlotAreaMarginMode_$type } from "./ComputedPlotAreaMarginMode";
import { SeriesPlotAreaMarginHorizontalMode_$type } from "./SeriesPlotAreaMarginHorizontalMode";
import { SeriesPlotAreaMarginVerticalMode_$type } from "./SeriesPlotAreaMarginVerticalMode";
import { SeriesHighlightingMode_$type } from "./SeriesHighlightingMode";
import { SeriesHighlightingBehavior_$type } from "./SeriesHighlightingBehavior";
import { LegendHighlightingMode_$type } from "./LegendHighlightingMode";
import { LegendItemBadgeMode_$type } from "igniteui-react-core";
import { ToolTipType_$type } from "./ToolTipType";
import { CrosshairsDisplayMode_$type } from "./CrosshairsDisplayMode";
import { SeriesViewerScrollbarMode_$type } from "./SeriesViewerScrollbarMode";
import { SeriesViewerHorizontalScrollbarPosition_$type } from "./SeriesViewerHorizontalScrollbarPosition";
import { SeriesViewerVerticalScrollbarPosition_$type } from "./SeriesViewerVerticalScrollbarPosition";
import { Defaults } from "./Defaults";
import { Series } from "./Series";
import { ICommandStateChangedListener_$type } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { DataSeriesAdapter } from "igniteui-react-core";
import { ChartSortDescription } from "./ChartSortDescription";
import { ChartSummaryDescription } from "./ChartSummaryDescription";
import { ObservableCollection$1 } from "igniteui-react-core";
import { Random } from "igniteui-react-core";
import { ValueLayerValueMode_$type } from "./ValueLayerValueMode";
import { ObservableColorCollection } from "igniteui-react-core";
import { BrushCollectionUtil } from "igniteui-react-core";
import { ChartSeriesEventArgs } from "./ChartSeriesEventArgs";
import { DomainChartSeriesPointerEventArgs } from "./DomainChartSeriesPointerEventArgs";
import { BrushUtil } from "igniteui-react-core";
import { IUnknownValuePlotting_$type } from "igniteui-react-core";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { isNaN_ } from "igniteui-react-core";
import { stringIsNullOrEmpty, stringEmpty, stringStartsWith } from "igniteui-react-core";
/**
 * @hidden
 */
export let DomainChart = /*@__PURE__*/ (() => {
    class DomainChart extends Base {
        provideContainer(a) {
            if (a == null) {
                this.sn((b) => {
                    b.destroy();
                    b.provideContainer(null);
                });
                return;
            }
            let b = this.j8;
            this.j8 = a;
            if (this.en != null && this.j8 != null && b == null) {
                this.j8.setTimeout(this.en, 0);
                this.en = null;
            }
            let c = ((() => {
                let $ret = new XamDataChart();
                $ret.ef = true;
                return $ret;
            })());
            c.provideContainer(a);
            this.dataChart = c;
            this.r8();
        }
        destroy() {
            this.provideContainer(null);
        }
        r8() {
            if (this.dataChart == null) {
                return;
            }
            let a = this.dataChart.cu.j.e();
            this.ab = a.a;
            this.af = a.f;
            this.ad = a.b;
            this.ae = a.c;
            this.ah = a.g;
            this.h9 = Defaults.j;
            this.r9();
        }
        r9() {
        }
        r5(a) {
            if (a == null) {
                return;
            }
            a.ha = this.i5;
            a.g8 = this.i3;
            a.g9 = this.i4;
            a.g7 = this.i2;
            a.sw = this.u8;
            a.g4 = this.iy;
            a.g6 = this.i0;
            a.g5 = this.iz;
            a.g3 = this.ix;
            a.sv = this.u7;
            if (!isNaN_(this.iq)) {
                a.gy = this.iq;
            }
        }
        r2() {
        }
        sb(a, b) {
            a.hr = this.j1;
            a.cg = this.d3;
        }
        sy(a, b, c) {
            switch (a) {
                case "TitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.ha = this.i5;
                    }
                    break;
                case "TitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g8 = this.i3;
                    }
                    break;
                case "PixelScalingRatio":
                    if (this.dataChart != null) {
                        this.sn((d) => d.gy = this.iq);
                    }
                    break;
                case "TitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g9 = this.i4;
                    }
                    break;
                case "TitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g7 = this.i2;
                    }
                    break;
                case "TitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.sw = this.u8;
                    }
                    break;
                case "SubtitleLeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g4 = this.iy;
                    }
                    break;
                case "SubtitleTopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g6 = this.i0;
                    }
                    break;
                case "SubtitleRightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g5 = this.iz;
                    }
                    break;
                case "SubtitleBottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g3 = this.ix;
                    }
                    break;
                case "SubtitleTextColor":
                    if (this.dataChart != null) {
                        this.dataChart.sv = this.u7;
                    }
                    break;
                case "LeftMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gx = this.im;
                    }
                    break;
                case "TopMargin":
                    if (this.dataChart != null) {
                        this.dataChart.hb = this.i6;
                    }
                    break;
                case "RightMargin":
                    if (this.dataChart != null) {
                        this.dataChart.g2 = this.iw;
                    }
                    break;
                case "BottomMargin":
                    if (this.dataChart != null) {
                        this.dataChart.gk = this.h8;
                    }
                    break;
                case "TransitionDuration":
                    this.ry((d) => d.hr = this.j1);
                    break;
                case "TransitionEasingFunction":
                    this.ry((d) => d.cg = this.d3);
                    break;
            }
        }
        get tooltipTemplate() {
            return ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, 0);
        }
        set tooltipTemplate(a) {
            this.tooltipTemplates = a == null ? null : new List$1(Base.$, 1, [a]);
        }
        get tooltipTemplates() {
            return this.gl;
        }
        set tooltipTemplates(a) {
            let b = this.tooltipTemplates;
            if (a != b) {
                this.gl = a;
                this.sv("TooltipTemplates", b, this.tooltipTemplates);
            }
        }
        get iq() {
            return this.hd;
        }
        set iq(a) {
            let b = this.hd;
            if (a != b) {
                this.hd = a;
                this.sv("PixelScalingRatio", b, this.iq);
            }
        }
        get toolTip() {
            return this.j5;
        }
        set toolTip(a) {
            let b = this.toolTip;
            if (b != a) {
                this.j5 = a;
                this.sv("ToolTip", b, this.toolTip);
            }
        }
        get i3() {
            return this.hq;
        }
        set i3(a) {
            let b = this.i3;
            if (a != b) {
                this.hq = a;
                this.sv("TitleLeftMargin", b, this.i3);
            }
        }
        get i4() {
            return this.hr;
        }
        set i4(a) {
            let b = this.i4;
            if (a != b) {
                this.hr = a;
                this.sv("TitleRightMargin", b, this.i4);
            }
        }
        get i5() {
            return this.hs;
        }
        set i5(a) {
            let b = this.i5;
            if (a != b) {
                this.hs = a;
                this.sv("TitleTopMargin", b, this.i5);
            }
        }
        get i2() {
            return this.hp;
        }
        set i2(a) {
            let b = this.i2;
            if (a != b) {
                this.hp = a;
                this.sv("TitleBottomMargin", b, this.i2);
            }
        }
        get iy() {
            return this.hl;
        }
        set iy(a) {
            let b = this.iy;
            if (a != b) {
                this.hl = a;
                this.sv("SubtitleLeftMargin", b, this.iy);
            }
        }
        get i0() {
            return this.hn;
        }
        set i0(a) {
            let b = this.i0;
            if (a != b) {
                this.hn = a;
                this.sv("SubtitleTopMargin", b, this.i0);
            }
        }
        get iz() {
            return this.hm;
        }
        set iz(a) {
            let b = this.iz;
            if (a != b) {
                this.hm = a;
                this.sv("SubtitleRightMargin", b, this.iz);
            }
        }
        get ix() {
            return this.hk;
        }
        set ix(a) {
            let b = this.ix;
            if (a != b) {
                this.hk = a;
                this.sv("SubtitleBottomMargin", b, this.ix);
            }
        }
        get u7() {
            return this.uf;
        }
        set u7(a) {
            let b = this.u7;
            if (a != b) {
                this.uf = a;
                this.sv("SubtitleTextColor", b, this.u7);
            }
        }
        get u8() {
            return this.ug;
        }
        set u8(a) {
            let b = this.u8;
            if (a != b) {
                this.ug = a;
                this.sv("TitleTextColor", b, this.u8);
            }
        }
        get_im() {
            return this.ha;
        }
        set_im(a) {
            let b = this.im;
            if (a != b) {
                this.ha = a;
                this.sv("LeftMargin", b, this.im);
            }
        }
        get im() {
            return this.get_im();
        }
        set im(a) {
            this.set_im(a);
        }
        get i6() {
            return this.ht;
        }
        set i6(a) {
            let b = this.i6;
            if (a != b) {
                this.ht = a;
                this.sv("TopMargin", b, this.i6);
            }
        }
        get iw() {
            return this.hj;
        }
        set iw(a) {
            let b = this.iw;
            if (a != b) {
                this.hj = a;
                this.sv("RightMargin", b, this.iw);
            }
        }
        get h8() {
            return this.gx;
        }
        set h8(a) {
            let b = this.h8;
            if (a != b) {
                this.gx = a;
                this.sv("BottomMargin", b, this.h8);
            }
        }
        get j1() {
            return this.jt;
        }
        set j1(a) {
            let b = this.j1;
            if (a != b) {
                this.jt = a;
                this.sv("TransitionDuration", b, this.j1);
            }
        }
        get d3() {
            return this.d2;
        }
        set d3(a) {
            let b = this.d3;
            if (a != b) {
                this.d2 = a;
                this.sv("TransitionEasingFunction", b, this.d3);
            }
        }
        r6(a) {
            if (this.dataChart == null) {
                return;
            }
            a.ko = this.qi;
            a.kc = this.p7;
        }
        sc(a, b) {
            this.sd(a, b);
        }
        r3() {
        }
        sd(a, b) {
            if (a == null) {
                return;
            }
            if (this.dn == 3) {
                return;
            }
            let toolTipTemplate_ = ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, b);
            if (toolTipTemplate_ == null) {
                a.ev = true;
            }
            else {
                let series_ = a;
                a.ev = false;
                series_.externalObject.tooltipTemplate = toolTipTemplate_;
            }
        }
        to(a, b, c) {
        }
        ka(a) {
            return a;
            return null;
        }
        jl(a) {
            return null;
        }
        sz(a, b, c) {
            switch (a) {
                case "SubtitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.kc = this.p7;
                    }
                    break;
                case "TitleTextStyle":
                    if (this.dataChart != null) {
                        this.dataChart.ko = this.qi;
                    }
                    break;
                case "TooltipTemplate":
                    if (this.ga) {
                        return;
                    }
                    this.ga = true;
                    this.tooltipTemplate = this.ka(this.tooltipTemplate);
                    this.ga = false;
                    if (this.dataChart != null) {
                        this.dataChart.h1 = this.tooltipTemplate;
                    }
                    this.toolTip = this.tooltipTemplate;
                    break;
                case "ToolTip":
                    this.rz((d, e) => this.sd(d, e));
                    break;
                case "TooltipTemplates":
                    if (this.tooltipTemplates == null) {
                        break;
                    }
                    this.ga = true;
                    this.rz((d, e) => {
                        let f = this.ka(ArrayExtension.getModulus$1(Base.$, this.tooltipTemplates, e));
                        let series_ = d;
                        let templ_ = f;
                        series_.externalObject.tooltipTemplate = templ_;
                    });
                    this.ga = false;
                    break;
            }
        }
        get ca() {
            return this.b9;
        }
        set ca(a) {
            let b = this.ca;
            if (a != b) {
                this.b9 = a;
                this.sv("Widget", b, this.ca);
            }
        }
        get p7() {
            return this.k2;
        }
        set p7(a) {
            let b = this.p7;
            if (a != b) {
                this.k2 = a;
                this.sv("SubtitleTextStyle", b, this.p7);
            }
        }
        get qi() {
            return this.k4;
        }
        set qi(a) {
            let b = this.qi;
            if (a != b) {
                this.k4 = a;
                this.sv("TitleTextStyle", b, this.qi);
            }
        }
        get dataChart() {
            return this.dv;
        }
        set dataChart(a) {
            let b = this.dataChart;
            if (b != a) {
                this.dv = a;
                this.sv("DataChart", b, this.dataChart);
            }
        }
        onDetachedFromUI() {
            this.sn((a) => a.onDetachedFromUI());
        }
        onAttachedToUI() {
            this.sn((a) => a.onAttachedToUI());
        }
        constructor() {
            super();
            this.j8 = null;
            this.j6 = null;
            this.gl = null;
            this.hd = NaN;
            this.j5 = null;
            this.hq = 0;
            this.hr = 0;
            this.hs = 0;
            this.hp = 0;
            this.hl = 0;
            this.hn = 0;
            this.hm = 0;
            this.hk = 0;
            this.uf = null;
            this.ug = null;
            this.ha = NaN;
            this.ht = NaN;
            this.hj = NaN;
            this.gx = NaN;
            this.jt = 0;
            this.d2 = null;
            this.jk = null;
            this.ga = false;
            this.b9 = null;
            this.k2 = null;
            this.k4 = null;
            this.dv = null;
            this.gp = null;
            this.propertyChanged = null;
            this.js = 0;
            this.f3 = false;
            this.b2 = null;
            this.gk = null;
            this.b6 = null;
            this.e4 = false;
            this.b7 = null;
            this.gi = new List$1(ICommandStateChangedListener_$type, 0);
            this.bu = 0;
            this.g1 = NaN;
            this.g2 = NaN;
            this.gz = DeviceUtils.g(10);
            this.g0 = DeviceUtils.g(10);
            this.bq = 0;
            this.bs = 0;
            this.ex = true;
            this.e = null;
            this.b = null;
            this.d = null;
            this.a = null;
            this.ba = 0;
            this.jo = -1;
            this.jp = -1;
            this.bo = 0;
            this.ku = stringEmpty();
            this.ey = true;
            this.kv = null;
            this.f = null;
            this.vn = new Thickness(0, DeviceUtils.g(5));
            this.ez = true;
            this.kw = "N/A";
            this.e0 = false;
            this.vo = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(2), DeviceUtils.g(0));
            this.ua = null;
            this.ec = null;
            this.ko = null;
            this.c = null;
            this.kn = stringEmpty();
            this.be = 0;
            this.bg = 0;
            this.kp = null;
            this.t2 = null;
            this.vh = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.vg = new Thickness(0, DeviceUtils.g(5));
            this.ew = true;
            this.d4 = null;
            this.t5 = null;
            this.d7 = null;
            this.bk = 0;
            this.kr = null;
            this.vk = new Thickness(1, DeviceUtils.g(2), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.vj = new Thickness(0, DeviceUtils.g(5));
            this.t7 = null;
            this.d9 = null;
            this.kq = null;
            this.t4 = null;
            this.d6 = null;
            this.ks = null;
            this.t6 = null;
            this.d8 = null;
            this.vf = new Thickness(0, DeviceUtils.g(0));
            this.cf = 0;
            this.bm = 0;
            this.kt = null;
            this.t9 = null;
            this.vm = new Thickness(0, DeviceUtils.g(0));
            this.eb = null;
            this.vl = new Thickness(0, DeviceUtils.g(0));
            this.t8 = null;
            this.ea = null;
            this.bi = 0;
            this.t3 = null;
            this.vi = new Thickness(1, DeviceUtils.g(8), DeviceUtils.g(0), DeviceUtils.g(0), DeviceUtils.g(0));
            this.d5 = null;
            this.seriesAdded = null;
            this.seriesRemoved = null;
            this.seriesPointerEnter = null;
            this.seriesPointerLeave = null;
            this.seriesPointerMove = null;
            this.seriesPointerDown = null;
            this.seriesPointerUp = null;
            this.calloutStyleUpdating = null;
            this.calloutRenderStyleUpdating = null;
            this.go = null;
            this.en = null;
            this.eq = false;
            this.gh = new Dictionary$2(String_$type, Base.$, 0);
            this.gj = new List$1(String_$type, 0);
            this.au = null;
            this.aq = null;
            this.ap = null;
            this.dx = null;
            this.a2 = null;
            this.d0 = null;
            this.d1 = null;
            this.fc = true;
            this.fb = true;
            this.fd = true;
            this.fa = true;
            this.at = null;
            this.as = null;
            this.ar = null;
            this.dy = null;
            this.a1 = null;
            this.kz = null;
            this.kx = null;
            this.ky = null;
            this.k0 = null;
            this.j4 = null;
            this.j3 = null;
            this.h = null;
            this.g = null;
            this.t = null;
            this.w = null;
            this.r = null;
            this.s = null;
            this.b4 = null;
            this.e3 = true;
            this.e6 = true;
            this.e8 = false;
            this.fe = false;
            this.e5 = false;
            this.vc = new Rect(0, 0, 0, 1, 1);
            this.k3 = null;
            this.k1 = null;
            this.tt = 1;
            this.ts = 1;
            this.dr = 0;
            this.hi = NaN;
            this.ho = NaN;
            this.c8 = 0;
            this.cn = 0;
            this.cl = 0;
            this.hb = NaN;
            this.hc = NaN;
            this.ct = null;
            this.cj = 4;
            this.u = null;
            this.v = null;
            this.jr = 400;
            this.gw = NaN;
            this.ep = false;
            this.x = null;
            this.dp = 0;
            this.hu = DeviceUtils.g(1.5);
            this.eo = true;
            this.hf = NaN;
            this.hh = NaN;
            this.hg = NaN;
            this.he = NaN;
            this.a5 = 0;
            this.da = 0;
            this.dc = 0;
            this.c6 = 0;
            this.c4 = 0;
            this.cb = 0;
            this.cg = 0;
            this.cd = 0;
            this.ju = 7;
            this.dm = 4;
            this.a8 = 0;
            this.ev = false;
            this.t1 = null;
            this.gy = NaN;
            this.t0 = null;
            this.eu = true;
            this.tw = null;
            this.ty = null;
            this.tx = null;
            this.tz = null;
            this.jm = -1;
            this.jn = -1;
            this.e7 = false;
            this.e9 = true;
            this.e1 = false;
            this.ub = null;
            this.uc = null;
            this.jq = -1;
            this.er = false;
            this.et = false;
            this.es = false;
            this.gt = null;
            this.aj = null;
            this.kl = null;
            this.km = null;
            this.kk = "CalloutLabel";
            this.kj = "CalloutContent";
            this.dt = null;
            this.y = null;
            this.hv = NaN;
            this.dg = 0;
            this.dh = 0;
            this.de = 0;
            this.dk = 0;
            this.ud = null;
            this.ue = null;
            this.g7 = NaN;
            this.g6 = NaN;
            this.g3 = NaN;
            this.g4 = NaN;
            this.g5 = NaN;
            this.g9 = NaN;
            this.g8 = NaN;
            this.e2 = true;
            this.uh = null;
            this.ui = null;
            this.hz = NaN;
            this.hy = NaN;
            this.hw = NaN;
            this.h2 = NaN;
            this.hx = NaN;
            this.h1 = NaN;
            this.h0 = NaN;
            this.ff = true;
            this.h4 = NaN;
            this.h3 = NaN;
            this.h6 = NaN;
            this.h5 = NaN;
            this.go = new List$1(Delegate_$type, 0);
            this.r7();
            this.rn();
        }
        r7() {
            this.gp = new List$1(MarkerType_$type, 0);
            this.bd = new DataSeriesAdapter().e;
            this.au = new ChartSortDescriptionCollection();
            this.aq = new ChartSortDescriptionCollection();
            this.ap = new ChartSortDescriptionCollection();
            this.a2 = new ChartSummaryDescriptionCollection();
            this.dx = new FilterExpressionCollection();
            this.a0.e = this.bd.sortDescriptions;
            this.av.e = this.bd.groupDescriptions;
            this.dz.syncTarget = this.bd.filterExpressions;
            this.a4.e = this.bd.summaryDescriptions;
            this.aw.e = this.bd.postSortDescriptions;
            this.d0 = new SortGroupParser();
            this.d1 = new SummaryParser();
            this.at = ((() => {
                let $ret = new ChartSortDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.as = ((() => {
                let $ret = new ChartSortDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.ar = ((() => {
                let $ret = new ChartSortDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.a1 = ((() => {
                let $ret = new ChartSummaryDescriptionCollection();
                $ret.i = true;
                return $ret;
            })());
            this.dy = ((() => {
                let $ret = new FilterExpressionCollection();
                $ret.shouldDetachOnTargetChange = true;
                return $ret;
            })());
            if (this.fc) {
                if (this.a0.j.count == 0) {
                    this.at.e = this.bd.sortDescriptions;
                }
                if (this.aw.j.count == 0) {
                    this.as.e = this.bd.postSortDescriptions;
                }
                this.fc = false;
            }
            if (this.fb) {
                if (this.av.j.count == 0) {
                    this.ar.e = this.bd.groupDescriptions;
                }
                this.fb = false;
            }
            if (this.fd) {
                if (this.a4.j.count == 0) {
                    this.a1.e = this.bd.summaryDescriptions;
                }
                this.fd = false;
            }
            if (this.q != null) {
                this.bd.includedProperties = this.q;
            }
            if (this.o != null) {
                this.bd.excludedProperties = this.o;
            }
            this.bd.supportedSeriesTypes = this.gr.toArray();
            this.bd.rules.clear();
            for (let a of fromEnum(this.gq)) {
                this.bd.rules.add(a);
            }
            let b = new List$1(String_$type, 0);
            for (let c of fromEnum(this.bd.rules)) {
                b.add(getInstanceType(c).typeName);
            }
            let d = this.bd.dataSeries;
            d.collectionChanged = delegateCombine(d.collectionChanged, runOn(this, this.sq));
        }
        f5(a) {
            return a != 24 && this.gr.contains(a);
        }
        notifyResized() {
            this.sn((a) => a.notifyContainerResized());
        }
        sl() {
            this.sn((a) => {
                for (let b = 0; b < a.series.count; b++) {
                    a.series._inner[b].lw();
                }
            });
        }
        rs() {
            if (this.dataChart == null) {
                return;
            }
            if (this.f3) {
                this.th();
            }
            this.dataChart.flush();
        }
        r0() {
            if (this.dataChart == null) {
                return;
            }
            this.dataChart.l1();
        }
        s5(a) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
        }
        ru(a) {
            this.rv((b, c) => a(b));
        }
        rv(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                a(this.dataChart.series._inner[b], b);
            }
        }
        ry(a) {
            this.rz((b, c) => a(b));
        }
        rz(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!c.dc) {
                    a(c, b);
                }
            }
        }
        rw(a) {
            this.rx((b, c) => a(b));
        }
        rx(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (c.dd) {
                    a(c, b);
                }
            }
        }
        te() {
            this.ru((a) => a.mq());
        }
        sn(a) {
            this.so(a, true);
        }
        so(a, b) {
            this.sp(a, b, null);
        }
        sp(a, b, c) {
            if (this.dataChart == null) {
                return;
            }
            a(this.dataChart);
        }
        f7(a) {
            if (!this.f5(a.suggestedSeries)) {
                return false;
            }
            let b = a.data;
            if (b == null) {
                return false;
            }
            return true;
        }
        fy() {
            if (this.dataChart == null) {
                return false;
            }
            return true;
        }
        oe(a) {
            let b = "series_" + (this.dataChart.series.count + 1) + "_" + EnumUtil.getName(DataSeriesType_$type, a.suggestedSeries);
            return b;
        }
        of(a, b) {
            if (this.f1 && this.gf) {
                let c = "";
                let d = 5 + Math.round(DomainChart.kh.nextDouble() * 4);
                for (let e = 0; e < d; e++) {
                    c = c + "\u2588";
                }
                return c;
            }
            if (stringIsNullOrEmpty(a.title)) {
                let f = EnumUtil.getName(DataSeriesType_$type, b);
                return f + (this.dataChart.series.count + 1);
            }
            else {
                return a.title;
            }
        }
        od() {
            return stringEmpty();
        }
        th() {
            if (this.dataChart == null) {
                return;
            }
            this.f3 = false;
            this.tj();
            if (this.actualItemsSource == null) {
                return;
            }
            let a = new List$1(MarkerType_$type, 0);
            for (let b of fromEnum(this.bd.dataSeries)) {
                a.add(this.cp(b.suggestedMarker));
            }
            this.gp = a;
            let c = 0;
            for (let d of fromEnum(this.bd.dataSeries)) {
                if (!this.f7(d)) {
                    continue;
                }
                if (d.index < 0) {
                    d.index = c;
                }
                this.tf(d);
                this.tg(d);
                c++;
            }
            this.tp();
            this.rv(runOn(this, this.sa));
        }
        c3(seriesType_) {
            return (this.externalObject.createSeries(seriesType_).i);
        }
        cv() {
            return this.c3(28);
        }
        cx() {
            return this.c3(27);
        }
        cz() {
            return this.c3(29);
        }
        c0() {
            return this.c3(25);
        }
        cw() {
            return this.c3(26);
        }
        cy() {
            return this.c3(32);
        }
        c2() {
            return this.c3(33);
        }
        get b3() {
            if (TypeRegistrar.isRegistered("AnnotationLayerProxy")) {
                return TypeRegistrar.create("AnnotationLayerProxy");
            }
            else {
                throw new BaseError(1, "annotation layer module is not loaded, but is required.");
            }
        }
        get fu() {
            return (TypeRegistrar.isRegistered("AnnotationLayerProxy"));
        }
        fw(a) {
            if (!this.fu) {
                return false;
            }
            return this.b3.matchesType(a);
        }
        tp() {
            let a = this.gn("", true);
            if (a != null) {
                for (let b = 0; b < a.count; b++) {
                    this.dataChart.series.add(a._inner[b]);
                }
            }
        }
        fz() {
            return this.a9 == 0 || this.a9 == 4 || this.a9 == 2;
        }
        f0() {
            return this.a9 == 0 || this.a9 == 4 || this.a9 == 3;
        }
        get_fx() {
            return this.fj;
        }
        get fx() {
            return this.get_fx();
        }
        gn(a, b) {
            if (!this.fu) {
                return null;
            }
            let c = new List$1(Series.$, 0);
            if (b) {
                let d = 1;
                if (this.et) {
                    if (this.gt == null) {
                        if (this.kl != null || this.km != null || this.kk != null || this.kj != null) {
                            for (let e of fromEnum(this.dataChart.series)) {
                                let f = this.cv();
                                this.b3.setTargetSeries(f, e);
                                this.b3.setCollisionChannel(f, "MainChartCollisionChannel");
                                this.tn(f, e, this.bd.dataSeries._inner[d - 1]);
                                f.name = a + getInstanceType(f).typeName + d.toString();
                                c.add(f);
                                d++;
                            }
                            ;
                        }
                    }
                    else {
                        let g = this.cv();
                        this.tn(g, null, this.bd.dataSeries._inner[d - 1]);
                        g.name = a + getInstanceType(g).typeName + d.toString();
                        if (this.et && this.er) {
                            this.b3.setCollisionChannel(g, "MainChartCollisionChannel");
                        }
                        c.add(g);
                    }
                }
                if (this.er) {
                    let h = this.cv();
                    this.rm(h, this.ge);
                    h.name = a + getInstanceType(h).typeName + d.toString();
                    if (this.et && this.er) {
                        this.b3.setCollisionChannel(h, "MainChartCollisionChannel");
                    }
                    c.add(h);
                }
            }
            switch (this.a8) {
                case 0:
                case 4:
                case 3:
                case 2:
                    {
                        let i = this.cx();
                        this.b3.setCrosshairThickness(i, this.gy);
                        this.b3.setCrosshairUseInterpolation(i, !this.ev);
                        this.b3.setCrosshairHorizontalLineVisibility(i, this.fz() ? 0 : 1);
                        this.b3.setCrosshairHorizontalLineStroke(i, this.t0);
                        this.b3.setCrosshairVerticalLineVisibility(i, this.f0() ? 0 : 1);
                        this.b3.setCrosshairVerticalLineStroke(i, this.t1);
                        this.b3.setCrosshairOnAxesEnabled(i, this.eu);
                        this.b3.setCrosshairXAxisBackground(i, this.tw);
                        this.b3.setCrosshairXAxisForeground(i, this.tx);
                        this.b3.setCrosshairYAxisBackground(i, this.ty);
                        this.b3.setCrosshairYAxisForeground(i, this.tz);
                        this.b3.setCrosshairXAxisPrecision(i, this.jm);
                        this.b3.setCrosshairYAxisPrecision(i, this.jn);
                        c.add(i);
                        break;
                    }
                case 1:
                    {
                        break;
                    }
            }
            if (this.e1) {
                let j = this.cz();
                this.b3.setFinalValueBackground(j, this.ub);
                this.b3.setFinalValueForeground(j, this.uc);
                this.b3.setFinalValuePrecision(j, this.jq);
                c.add(j);
            }
            if (b) {
                switch (this.dm) {
                    case 1:
                        {
                            let k = this.c0();
                            c.add(k);
                            break;
                        }
                    case 2:
                        {
                            let l = this.cw();
                            c.add(l);
                            break;
                        }
                    case 4:
                        {
                            let m = this.cy();
                            c.add(m);
                            break;
                        }
                    case 3:
                        {
                            this.ru((n) => n.ev = false);
                            break;
                        }
                    case 0:
                        {
                            this.ru((n) => n.ev = true);
                            break;
                        }
                }
            }
            if (this.du != null && this.du.count > 0) {
                for (let n = 0; n < this.du.count; n++) {
                    let o = this.c2();
                    this.b3.setValueMode(o, this.du._inner[n]);
                    this.b3.setValueAxisAnnotationEnabled(o, true);
                    if (this.ai != null && n < this.ai.count) {
                        this.b3.setBrush(o, this.ai.item(n));
                    }
                    c.add(o);
                }
            }
            for (let p of fromEnum(c)) {
                if (stringIsNullOrEmpty(p.name) == false) {
                    continue;
                }
                p.name = a + getInstanceType(p).typeName;
            }
            return c;
        }
        rm(a, b) {
            this.b3.setIsAutoCalloutBehaviorEnabled(a, true);
            this.b3.setGreedyCollisionMode(a, true);
            this.b3.setUseDedicatedLanes(a, b);
        }
        tn(a, b, c) {
            a.itemsSource = this.gt != null ? this.gt : b.itemsSource;
            this.b3.setXMemberPath(a, this.kl);
            this.b3.setYMemberPath(a, this.km);
            this.b3.setLabelMemberPath(a, this.kk);
            this.b3.setContentMemberPath(a, this.kj);
            if (this.aj != null) {
                this.b3.setCalloutsAllowedPositions(a, this.aj);
            }
        }
        tj() {
            this.tk(this.dataChart);
        }
        tk(a) {
            if (a != null && a == this.dataChart) {
                this.ti();
            }
            if (a == null || a.series.count == 0) {
                return;
            }
            this.ru((b) => {
                if (this.fw(b) && this.b3.isCalloutLayer(b)) {
                    this.b3.removeCalloutStyleUpdating(b, runOn(this, this.s4));
                }
                if (this.fw(b) && this.b3.isCalloutLayer(b)) {
                    this.b3.removeCalloutRenderStyleUpdating(b, runOn(this, this.s3));
                }
                this.tc(b);
            });
            for (let b of fromEnum(a.series)) {
                this.tl(b);
            }
            a.series.clear();
        }
        tl(a) {
            a.itemsSource = null;
            a.legend = null;
            a.kz();
        }
        sq(a, b) {
            if (this.dataChart == null) {
                return;
            }
            let c = b.oldItems == null ? "null" : b.oldItems.count.toString();
            let d = b.newItems == null ? "null" : b.newItems.count.toString();
            if (this.f3) {
                return;
            }
            let e = this.s2(runOn(this, this.rq), this.f3);
            this.f3 = e.p1;
        }
        rq() {
            this.th();
        }
        u0(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.z, a);
        }
        u3(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.aa, a);
        }
        u1(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ad, a);
        }
        u2(a) {
            return ArrayExtension.getModulus$1(Brush.$, this.ae, a);
        }
        vb(a) {
            let b = new Color();
            if (this.z == null || this.z.count == 0) {
                b = ArrayExtension.getModulus$1(Color.$, this.gm, a);
            }
            else {
                let c = ArrayExtension.getModulus$1(Brush.$, this.z, a);
                if (c == null) {
                    b = ArrayExtension.getModulus$1(Color.$, this.gm, a);
                }
                else {
                    b = ColorUtil.q(c);
                }
            }
            return b;
        }
        em(a) {
            let b = new ObservableColorCollection();
            b.add(ColorUtil.v(a, 0.5));
            b.add(a);
            return b;
        }
        ac(a) {
            let b = this.em(a);
            let c = BrushCollectionUtil.a(b);
            return c;
        }
        get gm() {
            if (this.gk != null) {
                return this.gk;
            }
            this.gk = new List$1(Color.$, 0);
            this.gk.add(ColorUtil.r("#8BDC5C"));
            this.gk.add(ColorUtil.r("#8961A9"));
            this.gk.add(ColorUtil.r("#6DB1FF"));
            this.gk.add(ColorUtil.r("#82E9D9"));
            this.gk.add(ColorUtil.r("#EA3C63"));
            this.gk.add(ColorUtil.r("#735656"));
            this.gk.add(ColorUtil.r("#F8CE4F"));
            this.gk.add(ColorUtil.r("#A8A8B7"));
            this.gk.add(ColorUtil.r("#E051A9"));
            this.gk.add(ColorUtil.r("#FF903B"));
            return this.gk;
        }
        get_ge() {
            return false;
        }
        get ge() {
            return this.get_ge();
        }
        j9() {
            if (this.dataChart == null) {
                return null;
            }
            return this.dataChart.vx();
        }
        se(a, b) {
        }
        sf(a, b, c) {
        }
        cp(a) {
            if (a == 2) {
                return 3;
            }
            else if (a == 12) {
                return 13;
            }
            else if (a == 6) {
                return 7;
            }
            else if (a == 8) {
                return 9;
            }
            else if (a == 11) {
                return 12;
            }
            else if (a == 1) {
                return 1;
            }
            else if (a == 7) {
                return 8;
            }
            else if (a == 10) {
                return 11;
            }
            else if (a == 4) {
                return 5;
            }
            else if (a == 5) {
                return 6;
            }
            else if (a == 9) {
                return 10;
            }
            else if (a == 3) {
                return 4;
            }
            else if (a == 13) {
                return 0;
            }
            return 2;
        }
        attachDataLegend(a) {
            this.rl(a);
        }
        rl(a) {
            this.b6 = a;
            if (this.dataChart != null) {
                if (!this.e4) {
                    this.e4 = true;
                    this.dataChart.attachDataLegend(a);
                }
            }
        }
        detachDataLegend(a) {
            this.rp(a);
        }
        rp(a) {
            if (this.dataChart != null) {
                this.e4 = false;
                this.dataChart.detachDataLegend(a);
            }
            this.b6 = null;
        }
        getDataLegendSeries() {
            return this.p();
        }
        p() {
            if (this.dataChart != null) {
                return this.dataChart.getDataLegendSeries();
            }
            else {
                return new Array(0);
            }
        }
        tq(a) {
            if (this.dataChart != null) {
                this.dataChart.pk(a);
            }
        }
        tr(a) {
            if (this.dataChart != null) {
                this.dataChart.pl(a);
            }
        }
        tm() {
            if (this.dataChart != null) {
                this.dataChart.ou();
            }
        }
        get_f6() {
            return false;
        }
        get f6() {
            return this.get_f6();
        }
        get b8() {
            if (this.b7 == null) {
                this.b7 = DVContainer.instance.createInstance(IDomainChartToolbarProvider_$type, () => "Domain chart toolbar module is not loaded.");
                this.b7.container = this.j8;
                this.b7.commandChanged = runOn(this, this.sw);
            }
            return this.b7;
        }
        sw(a) {
            for (let b of fromEnum(this.gi)) {
                b.onCommandStateChanged(a.c, a.a, a.b);
            }
        }
        getDesiredToolbarActions() {
            if (!this.f6) {
                return null;
            }
            if (this.dataChart != null) {
                let a = this.dataChart.getDesiredToolbarActions();
                return this.b8.getDesiredToolbarActions(this, a);
            }
            return null;
        }
        onToolCommandExecuting(a) {
            if (!this.f6) {
                return;
            }
            this.b8.onToolCommandExecuting(this, a);
        }
        addCommandAvailabilityListener(a) {
        }
        removeCommandAvailabilityListener(a) {
        }
        addCommandStateChangedListener(a) {
            if (!this.gi.contains(a)) {
                this.gi.add(a);
            }
        }
        removeCommandStateChangedListener(a) {
            if (this.gi.contains(a)) {
                this.gi.remove(a);
            }
        }
        sk(source_, a, b, c) {
            if (this.bd != null) {
                this.bd.notifySetItem(source_, a, b, c);
            }
            if (this.dataChart != null) {
                this.dataChart.mj(source_, a, b, c);
            }
        }
        sg(source_) {
            if (this.bd != null) {
                this.bd.notifyClearItems(source_);
            }
            if (this.dataChart != null) {
                this.dataChart.ma(source_);
            }
        }
        sh(source_, a, b) {
            if (this.bd != null) {
                this.bd.notifyInsertItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.mh(source_, a, b);
            }
        }
        si(source_, a, b) {
            if (this.bd != null) {
                this.bd.notifyRemoveItem(source_, a, b);
            }
            if (this.dataChart != null) {
                this.dataChart.mi(source_, a, b);
            }
        }
        get bv() {
            return this.bu;
        }
        set bv(a) {
            let b = this.bu;
            this.bu = a;
            if (b != this.bu) {
                this.sv("DataToolTipGroupingMode", enumGetBox(DataToolTipLayerGroupingMode_$type, b), enumGetBox(DataToolTipLayerGroupingMode_$type, this.bu));
            }
        }
        get ic() {
            return this.g1;
        }
        set ic(a) {
            let b = this.g1;
            this.g1 = a;
            if (b != this.g1) {
                this.sv("DataToolTipPositionOffsetX", b, this.g1);
            }
        }
        get id() {
            return this.g2;
        }
        set id(a) {
            let b = this.g2;
            this.g2 = a;
            if (b != this.g2) {
                this.sv("DataToolTipPositionOffsetY", b, this.g2);
            }
        }
        get ia() {
            return this.gz;
        }
        set ia(a) {
            let b = this.gz;
            this.gz = a;
            if (b != this.gz) {
                this.sv("DataToolTipDefaultPositionOffsetX", b, this.gz);
            }
        }
        get ib() {
            return this.g0;
        }
        set ib(a) {
            let b = this.g0;
            this.g0 = a;
            if (b != this.g0) {
                this.sv("DataToolTipDefaultPositionOffsetY", b, this.g0);
            }
        }
        get br() {
            return this.bq;
        }
        set br(a) {
            let b = this.bq;
            this.bq = a;
            if (b != this.bq) {
                this.sv("DataToolTipGroupedPositionModeX", enumGetBox(DataTooltipGroupedPositionX_$type, b), enumGetBox(DataTooltipGroupedPositionX_$type, this.bq));
            }
        }
        get bt() {
            return this.bs;
        }
        set bt(a) {
            let b = this.bs;
            this.bs = a;
            if (b != this.bs) {
                this.sv("DataToolTipGroupedPositionModeY", enumGetBox(DataTooltipGroupedPositionY_$type, b), enumGetBox(DataTooltipGroupedPositionY_$type, this.bs));
            }
        }
        get fp() {
            return this.ex;
        }
        set fp(a) {
            let b = this.ex;
            this.ex = a;
            if (b != this.ex) {
                this.sv(DomainChart.mz, b, this.ex);
            }
        }
        get m() {
            return this.e;
        }
        set m(a) {
            let b = this.e;
            this.e = a;
            if (b != this.e) {
                this.sv("DataToolTipIncludedSeries", b, this.e);
            }
        }
        get j() {
            return this.b;
        }
        set j(a) {
            let b = this.b;
            this.b = a;
            if (b != this.b) {
                this.sv("DataToolTipExcludedSeries", b, this.b);
            }
        }
        get l() {
            return this.d;
        }
        set l(a) {
            let b = this.d;
            this.d = a;
            if (b != this.d) {
                this.sv("DataToolTipIncludedColumns", b, this.d);
            }
        }
        get i() {
            return this.a;
        }
        set i(a) {
            let b = this.a;
            this.a = a;
            if (b != this.a) {
                this.sv("DataToolTipExcludedColumns", b, this.a);
            }
        }
        get bb() {
            return this.ba;
        }
        set bb(a) {
            let b = this.ba;
            this.ba = a;
            if (b != this.ba) {
                this.sv("DataToolTipValueFormatAbbreviation", enumGetBox(DataAbbreviationMode_$type, b), enumGetBox(DataAbbreviationMode_$type, this.ba));
            }
        }
        get jx() {
            return this.jo;
        }
        set jx(a) {
            let b = this.jo;
            this.jo = a;
            if (b != this.jo) {
                this.sv("DataToolTipValueFormatMaxFractions", b, this.jo);
            }
        }
        get jy() {
            return this.jp;
        }
        set jy(a) {
            let b = this.jp;
            this.jp = a;
            if (b != this.jp) {
                this.sv("DataToolTipValueFormatMinFractions", b, this.jp);
            }
        }
        get bp() {
            return this.bo;
        }
        set bp(a) {
            let b = this.bo;
            this.bo = a;
            if (b != this.bo) {
                this.sv("DataToolTipValueFormatMode", enumGetBox(DataLegendValueMode_$type, b), enumGetBox(DataLegendValueMode_$type, this.bo));
            }
        }
        get nr() {
            return this.ku;
        }
        set nr(a) {
            let b = this.ku;
            this.ku = a;
            if (b != this.ku) {
                this.sv("DataToolTipValueFormatCulture", b, this.ku);
            }
        }
        get fq() {
            return this.ey;
        }
        set fq(a) {
            let b = this.ey;
            this.ey = a;
            if (b != this.ey) {
                this.sv("DataToolTipValueFormatUseGrouping", b, this.ey);
            }
        }
        get nx() {
            return this.kv;
        }
        set nx(a) {
            let b = this.kv;
            this.kv = a;
            if (b != this.kv) {
                this.sv("DataToolTipValueFormatString", b, this.kv);
            }
        }
        get n() {
            return this.f;
        }
        set n(a) {
            let b = this.f;
            this.f = a;
            if (b != this.f) {
                this.sv("DataToolTipValueFormatSpecifiers", b, this.f);
            }
        }
        get vx() {
            return this.vn;
        }
        set vx(a) {
            let b = this.vn;
            this.vn = a;
            if (b != this.vn) {
                this.sv("DataToolTipValueRowMargin", b, this.vn);
            }
        }
        get fr() {
            return this.ez;
        }
        set fr(a) {
            let b = this.ez;
            this.ez = a;
            if (b != this.ez) {
                this.sv("DataToolTipValueRowVisible", b, this.ez);
            }
        }
        get n6() {
            return this.kw;
        }
        set n6(a) {
            let b = this.kw;
            this.kw = a;
            if (b != this.kw) {
                this.sv("DataToolTipValueTextWhenMissingData", b, this.kw);
            }
        }
        get fs() {
            return this.e0;
        }
        set fs(a) {
            let b = this.e0;
            this.e0 = a;
            if (b != this.e0) {
                this.sv("DataToolTipValueTextUseSeriesColors", b, this.e0);
            }
        }
        get vy() {
            return this.vo;
        }
        set vy(a) {
            let b = this.vo;
            this.vo = a;
            if (b != this.vo) {
                this.sv("DataToolTipValueTextMargin", b, this.vo);
            }
        }
        get ux() {
            return this.ua;
        }
        set ux(a) {
            let b = this.ua;
            this.ua = a;
            if (b != this.ua) {
                this.sv("DataToolTipValueTextColor", b, this.ua);
            }
        }
        get el() {
            return this.ec;
        }
        set el(a) {
            let b = this.ec;
            this.ec = a;
            if (b != this.ec) {
                this.sv("DataToolTipValueTextStyle", b, this.ec);
            }
        }
        get mh() {
            return this.ko;
        }
        set mh(a) {
            let b = this.ko;
            this.ko = a;
            if (b != this.ko) {
                this.sv("DataToolTipHeaderFormatString", b, this.ko);
            }
        }
        get k() {
            return this.c;
        }
        set k(a) {
            let b = this.c;
            this.c = a;
            if (b != this.c) {
                this.sv("DataToolTipHeaderFormatSpecifiers", b, this.c);
            }
        }
        get md() {
            return this.kn;
        }
        set md(a) {
            let b = this.kn;
            this.kn = a;
            if (b != this.kn) {
                this.sv("DataToolTipHeaderFormatCulture", b, this.kn);
            }
        }
        get bf() {
            return this.be;
        }
        set bf(a) {
            let b = this.be;
            this.be = a;
            if (b != this.be) {
                this.sv("DataToolTipHeaderFormatDate", enumGetBox(DataLegendHeaderDateMode_$type, b), enumGetBox(DataLegendHeaderDateMode_$type, this.be));
            }
        }
        get bh() {
            return this.bg;
        }
        set bh(a) {
            let b = this.bg;
            this.bg = a;
            if (b != this.bg) {
                this.sv("DataToolTipHeaderFormatTime", enumGetBox(DataLegendHeaderTimeMode_$type, b), enumGetBox(DataLegendHeaderTimeMode_$type, this.bg));
            }
        }
        get mm() {
            return this.kp;
        }
        set mm(a) {
            let b = this.kp;
            this.kp = a;
            if (b != this.kp) {
                this.sv("DataToolTipHeaderText", b, this.kp);
            }
        }
        get up() {
            return this.t2;
        }
        set up(a) {
            let b = this.t2;
            this.t2 = a;
            if (b != this.t2) {
                this.sv("DataToolTipHeaderTextColor", b, this.t2);
            }
        }
        get vr() {
            return this.vh;
        }
        set vr(a) {
            let b = this.vh;
            this.vh = a;
            if (b != this.vh) {
                this.sv("DataToolTipHeaderTextMargin", b, this.vh);
            }
        }
        get vq() {
            return this.vg;
        }
        set vq(a) {
            let b = this.vg;
            this.vg = a;
            if (b != this.vg) {
                this.sv("DataToolTipHeaderRowMargin", b, this.vg);
            }
        }
        get fo() {
            return this.ew;
        }
        set fo(a) {
            let b = this.ew;
            this.ew = a;
            if (b != this.ew) {
                this.sv("DataToolTipHeaderRowVisible", b, this.ew);
            }
        }
        get ed() {
            return this.d4;
        }
        set ed(a) {
            let b = this.d4;
            this.d4 = a;
            if (b != this.d4) {
                this.sv("DataToolTipHeaderTextStyle", b, this.d4);
            }
        }
        get us() {
            return this.t5;
        }
        set us(a) {
            let b = this.t5;
            this.t5 = a;
            if (b != this.t5) {
                this.sv("DataToolTipSummaryTitleTextColor", b, this.t5);
            }
        }
        get eg() {
            return this.d7;
        }
        set eg(a) {
            let b = this.d7;
            this.d7 = a;
            if (b != this.d7) {
                this.sv("DataToolTipSummaryTitleTextStyle", b, this.d7);
            }
        }
        get bl() {
            return this.bk;
        }
        set bl(a) {
            let b = this.bk;
            this.bk = a;
            if (b != this.bk) {
                this.sv("DataToolTipSummaryType", enumGetBox(DataLegendSummaryType_$type, b), enumGetBox(DataLegendSummaryType_$type, this.bk));
            }
        }
        get m5() {
            return this.kr;
        }
        set m5(a) {
            let b = this.kr;
            this.kr = a;
            if (b != this.kr) {
                this.sv("DataToolTipSummaryTitleText", b, this.kr);
            }
        }
        get vu() {
            return this.vk;
        }
        set vu(a) {
            let b = this.vk;
            this.vk = a;
            if (b != this.vk) {
                this.sv("DataToolTipSummaryTitleTextMargin", b, this.vk);
            }
        }
        get vt() {
            return this.vj;
        }
        set vt(a) {
            let b = this.vj;
            this.vj = a;
            if (b != this.vj) {
                this.sv("DataToolTipSummaryRowMargin", b, this.vj);
            }
        }
        get uu() {
            return this.t7;
        }
        set uu(a) {
            let b = this.t7;
            this.t7 = a;
            if (b != this.t7) {
                this.sv("DataToolTipSummaryValueTextColor", b, this.t7);
            }
        }
        get ei() {
            return this.d9;
        }
        set ei(a) {
            let b = this.d9;
            this.d9 = a;
            if (b != this.d9) {
                this.sv("DataToolTipSummaryValueTextStyle", b, this.d9);
            }
        }
        get m0() {
            return this.kq;
        }
        set m0(a) {
            let b = this.kq;
            this.kq = a;
            if (b != this.kq) {
                this.sv("DataToolTipSummaryLabelText", b, this.kq);
            }
        }
        get ur() {
            return this.t4;
        }
        set ur(a) {
            let b = this.t4;
            this.t4 = a;
            if (b != this.t4) {
                this.sv("DataToolTipSummaryLabelTextColor", b, this.t4);
            }
        }
        get ef() {
            return this.d6;
        }
        set ef(a) {
            let b = this.d6;
            this.d6 = a;
            if (b != this.d6) {
                this.sv("DataToolTipSummaryLabelTextStyle", b, this.d6);
            }
        }
        get nb() {
            return this.ks;
        }
        set nb(a) {
            let b = this.ks;
            this.ks = a;
            if (b != this.ks) {
                this.sv("DataToolTipSummaryUnitsText", b, this.ks);
            }
        }
        get ut() {
            return this.t6;
        }
        set ut(a) {
            let b = this.t6;
            this.t6 = a;
            if (b != this.t6) {
                this.sv("DataToolTipSummaryUnitsTextColor", b, this.t6);
            }
        }
        get eh() {
            return this.d8;
        }
        set eh(a) {
            let b = this.d8;
            this.d8 = a;
            if (b != this.d8) {
                this.sv("DataToolTipSummaryUnitsTextStyle", b, this.d8);
            }
        }
        get vp() {
            return this.vf;
        }
        set vp(a) {
            let b = this.vf;
            this.vf = a;
            if (b != this.vf) {
                this.sv("DataToolTipBadgeMargin", b, this.vf);
            }
        }
        get ch() {
            return this.cf;
        }
        set ch(a) {
            let b = this.cf;
            this.cf = a;
            if (b != this.cf) {
                this.sv("DataToolTipBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.cf));
            }
        }
        get bn() {
            return this.bm;
        }
        set bn(a) {
            let b = this.bm;
            this.bm = a;
            if (b != this.bm) {
                this.sv("DataToolTipUnitsDisplayMode", enumGetBox(DataLegendUnitsMode_$type, b), enumGetBox(DataLegendUnitsMode_$type, this.bm));
            }
        }
        get nl() {
            return this.kt;
        }
        set nl(a) {
            let b = this.kt;
            this.kt = a;
            if (b != this.kt) {
                this.sv("DataToolTipUnitsText", b, this.kt);
            }
        }
        get uw() {
            return this.t9;
        }
        set uw(a) {
            let b = this.t9;
            this.t9 = a;
            if (b != this.t9) {
                this.sv("DataToolTipUnitsTextColor", b, this.t9);
            }
        }
        get vw() {
            return this.vm;
        }
        set vw(a) {
            let b = this.vm;
            this.vm = a;
            if (b != this.vm) {
                this.sv("DataToolTipUnitsTextMargin", b, this.vm);
            }
        }
        get ek() {
            return this.eb;
        }
        set ek(a) {
            let b = this.eb;
            this.eb = a;
            if (b != this.eb) {
                this.sv("DataToolTipUnitsTextStyle", b, this.eb);
            }
        }
        get vv() {
            return this.vl;
        }
        set vv(a) {
            let b = this.vl;
            this.vl = a;
            if (b != this.vl) {
                this.sv("DataToolTipTitleTextMargin", b, this.vl);
            }
        }
        get uv() {
            return this.t8;
        }
        set uv(a) {
            let b = this.t8;
            this.t8 = a;
            if (b != this.t8) {
                this.sv("DataToolTipTitleTextColor", b, this.t8);
            }
        }
        get ej() {
            return this.ea;
        }
        set ej(a) {
            let b = this.ea;
            this.ea = a;
            if (b != this.ea) {
                this.sv("DataToolTipTitleTextStyle", b, this.ea);
            }
        }
        get bj() {
            return this.bi;
        }
        set bj(a) {
            let b = this.bi;
            this.bi = a;
            if (b != this.bi) {
                this.sv("DataToolTipLabelDisplayMode", enumGetBox(DataLegendLabelMode_$type, b), enumGetBox(DataLegendLabelMode_$type, this.bi));
            }
        }
        get uq() {
            return this.t3;
        }
        set uq(a) {
            let b = this.t3;
            this.t3 = a;
            if (b != this.t3) {
                this.sv("DataToolTipLabelTextColor", b, this.t3);
            }
        }
        get vs() {
            return this.vi;
        }
        set vs(a) {
            let b = this.vi;
            this.vi = a;
            if (b != this.vi) {
                this.sv("DataToolTipLabelTextMargin", b, this.vi);
            }
        }
        get ee() {
            return this.d5;
        }
        set ee(a) {
            let b = this.d5;
            this.d5 = a;
            if (b != this.d5) {
                this.sv("DataToolTipLabelTextStyle", b, this.d5);
            }
        }
        s6(a) {
            if (this.seriesAdded != null && a != null) {
                this.seriesAdded(this, new ChartSeriesEventArgs(a));
            }
        }
        tc(a) {
            if (this.seriesRemoved != null && a != null) {
                this.seriesRemoved(this, new ChartSeriesEventArgs(a));
            }
        }
        s8(a, b) {
            if (this.seriesPointerEnter != null && a != null) {
                this.seriesPointerEnter(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        s9(a, b) {
            if (this.seriesPointerLeave != null && a != null) {
                this.seriesPointerLeave(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        ta(a, b) {
            if (this.seriesPointerMove != null && a != null) {
                this.seriesPointerMove(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        s7(a, b) {
            if (this.seriesPointerDown != null && a != null) {
                this.seriesPointerDown(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        tb(a, b) {
            if (this.seriesPointerUp != null && a != null) {
                this.seriesPointerUp(this, new DomainChartSeriesPointerEventArgs(a, b));
            }
        }
        s4(a, b) {
            if (this.calloutStyleUpdating != null && a != null) {
                this.calloutStyleUpdating(this, b);
            }
        }
        s3(a, b) {
            if (this.calloutRenderStyleUpdating != null && a != null) {
                this.calloutRenderStyleUpdating(this, b);
            }
        }
        s1(a) {
            if (!this.go.contains(a)) {
                this.go.add(a);
                let b = false;
                let c = this.s2(() => {
                    a();
                    this.go.remove(a);
                }, b);
                b = c.p1;
            }
        }
        s2(a, b) {
            if (!b) {
                b = true;
                if (this.j8 != null) {
                    this.j8.setTimeout(a, 0);
                }
                else {
                    this.en = a;
                }
            }
            return {
                p1: b
            };
        }
        get_f8() {
            return true;
        }
        get f8() {
            return this.get_f8();
        }
        r4(a) {
            let b = a == this.dataChart;
            if (b) {
                a.ag = this.z;
            }
            if (b) {
                a.aj = this.aa;
            }
            a.ah = this.ad;
            a.ai = this.ae;
            a.be = this.ck;
            a.legend = this.legend;
            a.ul = this.f2;
            a.uo = this.f9 && this.f8;
            a.e9 = this.gd;
            if (b) {
                a.b5 = this.di;
                a.b6 = this.dj;
                a.gp = this.ie;
                a.sp = this.u4;
                a.gq = this.ig;
                a.gr = this.ih;
                a.gs = this.ii;
                a.sq = this.u5;
                a.b2 = this.df;
                a.d5 = this.fv;
                a.gt = this.ij;
                a.gu = this.ik;
                a.gv = this.il;
                a.hc = this.i9;
                a.sy = this.u9;
                a.hi = this.jf;
                a.hd = this.ja;
                a.he = this.jb;
                a.sz = this.va;
                a.b7 = this.dl;
                a.fj = this.gg;
                a.hf = this.jc;
                a.hg = this.jd;
                a.hh = this.je;
                a.hl = this.jg;
                a.hm = this.jh;
                a.ho = this.jj;
                a.hn = this.ji;
            }
            a.t6 = this.db;
            a.t9 = this.dd;
            if (this.b6 != null) {
                if (!this.e4) {
                    this.rl(this.b6);
                }
            }
            if (a.bv != this.c7 || a.bt != this.c5) {
                a.cu.b4(this.j8);
                a.bv = this.c7;
                a.bt = this.c5;
            }
            a.tz = this.a7();
            if (!isNaN_(this.is)) {
                a.vq = this.is;
            }
            if (!isNaN_(this.iu)) {
                a.vs = this.iu;
            }
            if (!isNaN_(this.it)) {
                a.vr = this.it;
            }
            if (!isNaN_(this.ir)) {
                a.vp = this.ir;
            }
            a.bb = this.cc;
            a.seriesMouseEnter = delegateCombine(a.seriesMouseEnter, (c, d) => this.s8(d.series, d.item));
            a.seriesMouseLeave = delegateCombine(a.seriesMouseLeave, (c, d) => this.s9(d.series, d.item));
            a.seriesMouseMove = delegateCombine(a.seriesMouseMove, (c, d) => this.ta(d.series, d.item));
            a.seriesMouseLeftButtonDown = delegateCombine(a.seriesMouseLeftButtonDown, (c, d) => this.s7(d.series, d.item));
            a.seriesMouseLeftButtonUp = delegateCombine(a.seriesMouseLeftButtonUp, (c, d) => this.tb(d.series, d.item));
            if (b) {
                a.tq = this.ve;
            }
            if (b) {
                a.kh = this.qb;
            }
            a.r9 = this.tv;
            if (b) {
                a.j5 = this.p0;
            }
            a.r8 = this.tu;
            a.uh = this.fg;
            a.ds = this.fh;
            a.gx = this.im;
            a.g2 = this.iw;
            a.hb = this.i6;
            a.gk = this.h8;
            if (a == this.dataChart) {
                this.th();
            }
            this.r5(a);
            this.r6(a);
        }
        ag(a) {
            if (!this.gc || !this.gf || this.itemsSource != null) {
                return a;
            }
            if (a == null) {
                return null;
            }
            let b = new BrushCollection();
            for (let c of fromEnum(a)) {
                let d = BrushUtil.s(c);
                b.add(d);
            }
            return b;
        }
        u6(a) {
            if (!this.gc || !this.gf || this.itemsSource != null) {
                return a;
            }
            let b = BrushUtil.g(0, 0, 0, 0);
            return b;
        }
        sa(a, b) {
            if (!isNaN_(this.iv)) {
                a.gy = this.iv;
            }
            if (!isNaN_(this.i1) && !a.dd) {
                a.g4 = this.i1;
            }
            if (!isNaN_(this.h9) && a.da) {
                a.g4 = this.h9;
            }
            if (!isNaN_(this.i8) && a.de) {
                a.g4 = this.i8;
            }
            a.legendItemBadgeShape = this.ci;
            a.ba = this.ce;
            a.bu = this.c9;
            a.m5(this.co);
            a.m4(this.cm);
            a.gv = this.io;
            if (!isNaN_(this.ip)) {
                a.m6(this.ip);
            }
            if (!isNaN_(this.h7)) {
                a.f3 = this.h7;
            }
            if (a.isUsableInLegend) {
                a.legend = this.legend;
            }
            if (typeCast(IUnknownValuePlotting_$type, a) !== null) {
                a.unknownValuePlotting = this.ds;
            }
            a.dz = this.f4;
            if (this.fw(a) && this.b3.isCalloutLayer(a)) {
                this.b3.setCalloutStyleUpdatingEventEnabled(a, this.fk);
                this.b3.addCalloutStyleUpdating(a, runOn(this, this.s4));
            }
            if (this.fw(a) && this.b3.isCalloutLayer(a)) {
                this.b3.setCalloutRenderStyleUpdatingEventEnabled(a, this.fk);
                this.b3.addCalloutRenderStyleUpdating(a, runOn(this, this.s3));
            }
            if (this.fw(a) && this.b3.isDataToolTipLayer(a)) {
                this.ri(a);
            }
            this.rj(a, b);
            this.rk(a, b);
            this.sb(a, b);
            this.sc(a, b);
            this.s6(a);
        }
        get fi() {
            return this.eq;
        }
        rr() {
            if (!this.eq) {
                this.eq = true;
                this.r1();
            }
        }
        r1() {
            this.r2();
            this.r3();
        }
        td(a) {
            if (this.e4 && this.b6 != null) {
                this.e4 = false;
                if (a != null) {
                    a.detachDataLegend(this.b6);
                }
            }
            this.tk(a);
        }
        rk(a, b) {
            let c = typeCast(ITrendLineSeries_$type, a);
            if (c != null) {
                c.trendLineBrush = ArrayExtension.getModulus$1(Brush.$, this.ah, b);
                c.trendLineThickness = this.i7;
                c.trendLineType = this.dq;
                c.trendLinePeriod = this.j2;
            }
        }
        cr(a, b) {
            if (this.cu == null || this.cu.count == 0) {
                let c = this.cs(a);
                if (this.gp == null || this.gp.count == 0) {
                    return a != null && a.d5 ? c : 2;
                }
                let d = ArrayExtension.getModulus$1(MarkerType_$type, this.gp, b);
                if (d == 0 && a != null) {
                    d = a.d5 ? c : 2;
                    if (d == 2) {
                        d = this.cq(a);
                    }
                }
                if (d == 2) {
                    if (a == null) {
                        return 1;
                    }
                    else {
                        return 2;
                    }
                }
                return d;
            }
            return ArrayExtension.getModulus$1(MarkerType_$type, this.cu, b);
        }
        cq(a) {
            return 2;
        }
        cs(a) {
            return 1;
        }
        kd() {
            if (this.itemsSource != null) {
                return this.itemsSource;
            }
            if (this.gc) {
                return this.gv();
            }
            return null;
        }
        get_f1() {
            if (this.itemsSource == null && this.gc) {
                if (this.gv() != null) {
                    return true;
                }
            }
            return false;
        }
        get f1() {
            return this.get_f1();
        }
        gv() {
            return null;
        }
        sv(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            switch (a) {
                case "DataChart":
                    this.td(typeCast(XamDataChart.$, b));
                    this.r4(typeCast(XamDataChart.$, c));
                    break;
                case "ShouldUseSkeletonStyleForMockData":
                case "ShouldDisplayMockData":
                    this.actualItemsSource = this.kd();
                    this.z = this.ag(this.ab);
                    this.aa = this.ag(this.af);
                    break;
                case "ActualBrushes":
                    this.sp((d) => d.ag = this.z, true, a);
                    break;
                case "ActualOutlines":
                    this.sp((d) => d.aj = this.aa, true, a);
                    break;
                case "ActualItemsSource":
                    if (this.gc) {
                        this.z = this.ag(this.ab);
                        this.aa = this.ag(this.af);
                    }
                    this.bd.itemsSource = this.actualItemsSource;
                    break;
                case "ItemsSource":
                    this.actualItemsSource = this.kd();
                    break;
                case "IncludedProperties":
                    this.bd.includedProperties = this.q;
                    break;
                case "ExcludedProperties":
                    this.bd.excludedProperties = this.o;
                    break;
                case "Brushes":
                    this.z = this.ag(this.ab);
                    break;
                case "Outlines":
                    this.aa = this.ag(this.af);
                    break;
                case "Legend":
                    this.sn((d) => d.legend = this.legend);
                    break;
                case "HighlightingMode":
                    this.sn((d) => d.bv = this.c7);
                    break;
                case "HighlightingBehavior":
                    this.sn((d) => d.bt = this.c5);
                    break;
                case "LegendHighlightingMode":
                    this.sn((d) => d.bb = this.cc);
                    break;
                case "LegendItemBadgeShape":
                    this.sn((d) => d.bd = this.ci);
                    break;
                case "LegendItemBadgeMode":
                    this.sn((d) => d.bc = this.ce);
                    break;
                case "PlotAreaMarginLeft":
                    this.sn((d) => d.vq = this.is);
                    break;
                case "PlotAreaMarginTop":
                    this.sn((d) => d.vs = this.iu);
                    break;
                case "PlotAreaMarginRight":
                    this.sn((d) => d.vr = this.it);
                    break;
                case "PlotAreaMarginBottom":
                    this.sn((d) => d.vp = this.ir);
                    break;
                case "ComputedPlotAreaMarginMode":
                    this.sn((d) => d.tz = this.a7());
                    break;
                case "IsHorizontalZoomEnabled":
                    this.sn((d) => d.ul = this.f2);
                    break;
                case "IsVerticalZoomEnabled":
                    this.sn((d) => d.uo = this.f9);
                    break;
                case "WindowRect":
                    this.so((d) => d.tq = this.ve, false);
                    break;
                case "WindowRectMinWidth":
                    this.so((d) => d.hm = this.jh, false);
                    break;
                case "WindowRectMinHeight":
                    this.so((d) => d.hl = this.jg, false);
                    break;
                case "WindowSizeMinWidth":
                    this.so((d) => d.ho = this.jj, false);
                    break;
                case "WindowSizeMinHeight":
                    this.so((d) => d.hn = this.ji, false);
                    break;
                case "Title":
                    this.so((d) => d.kh = this.qb, false);
                    break;
                case "Subtitle":
                    this.so((d) => d.j5 = this.p0, false);
                    break;
                case "TitleAlignment":
                    this.sn((d) => d.r9 = this.tv);
                    break;
                case "SubtitleAlignment":
                    this.sn((d) => d.r8 = this.tu);
                    break;
                case "UnknownValuePlotting":
                    this.ru((d) => {
                        if (typeCast(IUnknownValuePlotting_$type, d) !== null) {
                            d.unknownValuePlotting = this.ds;
                        }
                    });
                    break;
                case "IsSeriesHighlightingEnabled":
                    this.ru((d) => d.dz = this.f4);
                    break;
                case "Thickness":
                    if (!isNaN_(this.i1)) {
                        this.ry((d) => d.g4 = this.i1);
                    }
                    break;
                case "OutlineMode":
                    this.ry((d) => d.bu = this.c9);
                    break;
                case "MarkerFillOpacity":
                    this.ry((d) => d.gv = this.io);
                    break;
                case "MarkerThickness":
                    if (!isNaN_(this.ip)) {
                        this.ry((d) => d.m6(this.ip));
                    }
                    break;
                case "MarkerOutlineMode":
                    this.ry((d) => d.m5(this.co));
                    break;
                case "MarkerFillMode":
                    this.ry((d) => d.m4(this.cm));
                    break;
                case "Resolution":
                    if (!isNaN_(this.iv)) {
                        this.ru((d) => d.gy = this.iv);
                    }
                    break;
                case "AreaFillOpacity":
                    if (!isNaN_(this.h7)) {
                        this.ru((d) => d.f3 = this.h7);
                    }
                    break;
                case "ShouldAvoidAxisAnnotationCollisions":
                    this.rt((d) => {
                        d.ct = this.gb;
                        d.cv = this.gb;
                    }, true);
                    break;
                case "ShouldPanOnMaximumZoom":
                    this.sn((d) => d.e9 = this.gd);
                    break;
                case "TrendLineBrushes":
                case "TrendLineType":
                case "TrendLineThickness":
                case "TrendLinePeriod":
                    this.rv((d, e) => this.rk(d, e));
                    break;
                case "MarkerMaxCount":
                    this.rz((d, e) => this.rj(d, e));
                    break;
                case "MarkerTypes":
                    let d = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), b);
                    if (d != null) {
                        d.collectionChanged = delegateRemove(d.collectionChanged, runOn(this, this.st));
                    }
                    let e = typeCast(ObservableCollection$1.$.specialize(MarkerType_$type), c);
                    if (e != null) {
                        e.collectionChanged = delegateCombine(e.collectionChanged, runOn(this, this.st));
                    }
                    this.rz((f, g) => this.rj(f, g));
                    break;
                case "MarkerAutomaticBehavior":
                    this.sn((f) => f.be = this.ck);
                    this.rz((f, g) => this.rj(f, g));
                    break;
                case "MarkerBrushes":
                    this.sn((f) => f.ah = this.ad);
                    break;
                case "MarkerOutlines":
                    this.sn((f) => f.ai = this.ae);
                    break;
                case "AlignsGridLinesToPixels":
                    this.sn((f) => f.uh = this.fg);
                    break;
                case "AnimateSeriesWhenAxisRangeChanges":
                    this.sn((f) => f.ds = this.fh);
                    break;
                case "ToolTipType":
                case "CrosshairsDisplayMode":
                case "CrosshairsSnapToData":
                case "CrosshairsLineVerticalStroke":
                case "CrosshairsLineHorizontalStroke":
                case "CrosshairsLineThickness":
                case "CrosshairsAnnotationXAxisBackground":
                case "CrosshairsAnnotationXAxisTextColor":
                case "CrosshairsAnnotationYAxisBackground":
                case "CrosshairsAnnotationYAxisTextColor":
                case "CrosshairsAnnotationEnabled":
                case "CrosshairsAnnotationXAxisPrecision":
                case "CrosshairsAnnotationYAxisPrecision":
                case "FinalValueAnnotationsVisible":
                case "FinalValueAnnotationsPrecision":
                case "FinalValueAnnotationsTextColor":
                case "FinalValueAnnotationsBackground":
                case "CalloutsVisible":
                case "AutoCalloutsVisible":
                case "CalloutsAllowedPositions":
                case "CalloutsItemsSource":
                case "CalloutsXMemberPath":
                case "CalloutsYMemberPath":
                case "CalloutsLabelMemberPath":
                case "CalloutsContentMemberPath":
                    let f = this.s2(runOn(this, this.rq), this.f3);
                    this.f3 = f.p1;
                    break;
                case "DataToolTipGroupingMode":
                case "DataToolTipPositionOffsetX":
                case "DataToolTipPositionOffsetY":
                case "DataToolTipDefaultPositionOffsetX":
                case "DataToolTipDefaultPositionOffsetY":
                case "DataToolTipGroupedPositionModeX":
                case "DataToolTipGroupedPositionModeY":
                case DomainChart.mz:
                case "DataToolTipIncludedSeries":
                case "DataToolTipExcludedSeries":
                case "DataToolTipIncludedColumns":
                case "DataToolTipExcludedColumns":
                case "DataToolTipValueFormatAbbreviation":
                case "DataToolTipValueFormatMaxFractions":
                case "DataToolTipValueFormatMinFractions":
                case "DataToolTipValueFormatMode":
                case "DataToolTipValueFormatCulture":
                case "DataToolTipValueFormatUseGrouping":
                case "DataToolTipValueFormatString":
                case "DataToolTipValueFormatSpecifiers":
                case "DataToolTipValueRowMargin":
                case "DataToolTipValueRowVisible":
                case "DataToolTipValueTextWhenMissingData":
                case "DataToolTipValueTextUseSeriesColors":
                case "DataToolTipValueTextMargin":
                case "DataToolTipValueTextColor":
                case "DataToolTipValueTextStyle":
                case "DataToolTipHeaderFormatString":
                case "DataToolTipHeaderFormatSpecifiers":
                case "DataToolTipHeaderFormatCulture":
                case "DataToolTipHeaderFormatDate":
                case "DataToolTipHeaderFormatTime":
                case "DataToolTipHeaderText":
                case "DataToolTipHeaderTextColor":
                case "DataToolTipHeaderTextMargin":
                case "DataToolTipHeaderRowMargin":
                case "DataToolTipHeaderRowVisible":
                case "DataToolTipHeaderTextStyle":
                case "DataToolTipSummaryTitleTextColor":
                case "DataToolTipSummaryTitleTextStyle":
                case "DataToolTipSummaryType":
                case "DataToolTipSummaryTitleText":
                case "DataToolTipSummaryTitleTextMargin":
                case "DataToolTipSummaryRowMargin":
                case "DataToolTipSummaryValueTextColor":
                case "DataToolTipSummaryValueTextStyle":
                case "DataToolTipSummaryLabelText":
                case "DataToolTipSummaryLabelTextColor":
                case "DataToolTipSummaryLabelTextStyle":
                case "DataToolTipSummaryUnitsText":
                case "DataToolTipSummaryUnitsTextColor":
                case "DataToolTipSummaryUnitsTextStyle":
                case "DataToolTipBadgeMargin":
                case "DataToolTipBadgeShape":
                case "DataToolTipUnitsDisplayMode":
                case "DataToolTipUnitsText":
                case "DataToolTipUnitsTextColor":
                case "DataToolTipUnitsTextMargin":
                case "DataToolTipUnitsTextStyle":
                case "DataToolTipTitleTextMargin":
                case "DataToolTipTitleTextColor":
                case "DataToolTipTitleTextStyle":
                case "DataToolTipLabelDisplayMode":
                case "DataToolTipLabelTextColor":
                case "DataToolTipLabelTextMargin":
                case "DataToolTipLabelTextStyle":
                    this.sr(a, b, c);
                    break;
                case "HorizontalViewScrollbarMode":
                    this.sn((g) => g.b5 = this.di);
                    break;
                case "VerticalViewScrollbarMode":
                    this.sn((g) => g.b6 = this.dj);
                    break;
                case "HorizontalViewScrollbarCornerRadius":
                    this.sn((g) => g.gp = this.ie);
                    break;
                case "HorizontalViewScrollbarFill":
                    this.sn((g) => g.sp = this.u4);
                    break;
                case "HorizontalViewScrollbarMaxOpacity":
                    this.sn((g) => g.gs = this.ii);
                    break;
                case "HorizontalViewScrollbarOutline":
                    this.sn((g) => g.sq = this.u5);
                    break;
                case "HorizontalViewScrollbarStrokeThickness":
                    this.sn((g) => g.gt = this.ij);
                    break;
                case "VerticalViewScrollbarCornerRadius":
                    this.sn((g) => g.hc = this.i9);
                    break;
                case "VerticalViewScrollbarFill":
                    this.sn((g) => g.sy = this.u9);
                    break;
                case "VerticalViewScrollbarMaxOpacity":
                    this.sn((g) => g.he = this.jb);
                    break;
                case "VerticalViewScrollbarOutline":
                    this.sn((g) => g.sz = this.va);
                    break;
                case "VerticalViewScrollbarStrokeThickness":
                    this.sn((g) => g.hf = this.jc);
                    break;
                case "HorizontalViewScrollbarHeight":
                    this.sn((g) => g.gq = this.ig);
                    break;
                case "HorizontalViewScrollbarInset":
                    this.sn((g) => g.gr = this.ih);
                    break;
                case DomainChart.os:
                    this.sn((g) => g.d5 = this.fv);
                    break;
                case "HorizontalViewScrollbarTrackStartInset":
                    this.sn((g) => g.gv = this.il);
                    break;
                case "HorizontalViewScrollbarTrackEndInset":
                    this.sn((g) => g.gu = this.ik);
                    break;
                case "VerticalViewScrollbarPosition":
                    this.sn((g) => g.b7 = this.dl);
                    break;
                case "HorizontalViewScrollbarPosition":
                    this.sn((g) => g.b2 = this.df);
                    break;
                case "ValueLines":
                    let g = typeCast(ObservableCollection$1.$.specialize(ValueLayerValueMode_$type), b);
                    if (g != null) {
                        g.collectionChanged = delegateRemove(g.collectionChanged, runOn(this, this.sx));
                    }
                    let h = typeCast(ObservableCollection$1.$.specialize(ValueLayerValueMode_$type), c);
                    if (h != null) {
                        h.collectionChanged = delegateCombine(h.collectionChanged, runOn(this, this.sx));
                    }
                    let i = this.s2(runOn(this, this.rq), this.f3);
                    this.f3 = i.p1;
                    break;
            }
            this.sy(a, b, c);
            this.sz(a, b, c);
            if (this.f6) {
                this.b8.onTargetPropertyChanged(this, a, b, c);
            }
        }
        sr(a, b, c) {
            if (!this.gh.containsKey(a)) {
                this.gj.add(a);
                this.gh.addItem(a, c);
            }
            else {
                this.gh.item(a, c);
            }
            this.rw((d) => {
                if (this.b3.isDataToolTipLayer(d)) {
                    this.ri(d);
                }
            });
        }
        ri(a) {
            for (let b = 0; b < this.gj.count; b++) {
                let c = this.gj._inner[b];
                let d = this.gh.item(c);
                if (stringStartsWith(c, "DataToolTip")) {
                    c = c.substr(("DataToolTip").length);
                }
                this.b3.updateDataToolTipPropertyByName(a, c, d);
            }
        }
        st(a, b) {
            this.rz((c, d) => this.rj(c, d));
        }
        sx(a, b) {
            let c = this.s2(runOn(this, this.rq), this.f3);
            this.f3 = c.p1;
        }
        get a0() {
            return this.au;
        }
        get aw() {
            return this.aq;
        }
        get av() {
            return this.ap;
        }
        get dz() {
            return this.dx;
        }
        get a4() {
            return this.a2;
        }
        get az() {
            return this.at;
        }
        get ay() {
            return this.as;
        }
        get ax() {
            return this.ar;
        }
        get a3() {
            return this.a1;
        }
        get oz() {
            return this.kz;
        }
        set oz(a) {
            let b = this.kz;
            this.kz = a;
            if (b != a) {
                this.at.n();
                this.d0.b(this.kz, (c, d, e) => this.at.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get og() {
            return this.kx;
        }
        set og(a) {
            let b = this.kx;
            this.kx = a;
            if (b != a) {
                this.as.n();
                this.d0.b(this.kx, (c, d, e) => this.as.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get ox() {
            return this.ky;
        }
        set ox(a) {
            let b = this.ky;
            this.ky = a;
            if (b != a) {
                this.ar.n();
                this.d0.b(this.ky, (c, d, e) => this.ar.j.add(new ChartSortDescription(2, c, d)));
            }
        }
        get o1() {
            return this.k0;
        }
        set o1(a) {
            let b = this.k0;
            this.k0 = a;
            if (b != a) {
                this.a1.n();
                this.d1.a(this.k0, (c, d, e) => this.a1.j.add(((() => {
                    let $ret = new ChartSummaryDescription(2, c, d);
                    $ret.n = e;
                    return $ret;
                })())));
            }
        }
        get itemsSource() {
            return this.j4;
        }
        set itemsSource(a) {
            let b = this.itemsSource;
            if (b != a) {
                this.j4 = a;
                this.sv("ItemsSource", b, this.itemsSource);
            }
        }
        get actualItemsSource() {
            return this.j3;
        }
        set actualItemsSource(a) {
            let b = this.actualItemsSource;
            if (b != a) {
                this.j3 = a;
                this.sv("ActualItemsSource", b, this.actualItemsSource);
            }
        }
        get q() {
            return this.h;
        }
        set q(a) {
            let b = this.h;
            this.h = a;
            if (b != this.h) {
                this.sv("IncludedProperties", b, this.h);
            }
        }
        get o() {
            return this.g;
        }
        set o(a) {
            let b = this.g;
            this.g = a;
            if (b != this.g) {
                this.sv("ExcludedProperties", b, this.g);
            }
        }
        get ab() {
            return this.t;
        }
        set ab(a) {
            let b = this.ab;
            if (a != b) {
                this.t = a;
                this.sv("Brushes", b, this.ab);
            }
        }
        get af() {
            return this.w;
        }
        set af(a) {
            let b = this.af;
            if (a != b) {
                this.w = a;
                this.sv("Outlines", b, this.af);
            }
        }
        get z() {
            return this.r;
        }
        set z(a) {
            let b = this.r;
            if (a != b) {
                this.r = a;
                this.sv("ActualBrushes", b, this.z);
            }
        }
        get aa() {
            return this.s;
        }
        set aa(a) {
            let b = this.s;
            if (a != b) {
                this.s = a;
                this.sv("ActualOutlines", b, this.aa);
            }
        }
        get legend() {
            return this.b4;
        }
        set legend(a) {
            let b = this.legend;
            if (a != b) {
                this.b4 = a;
                this.sv("Legend", b, this.legend);
            }
        }
        get_f2() {
            return this.e3;
        }
        set_f2(a) {
            let b = this.f2;
            if (a != b) {
                this.e3 = a;
                this.sv("IsHorizontalZoomEnabled", b, this.f2);
            }
        }
        get f2() {
            return this.get_f2();
        }
        set f2(a) {
            this.set_f2(a);
        }
        get_f9() {
            return this.e6;
        }
        set_f9(a) {
            let b = this.f9;
            if (a != b) {
                this.e6 = a;
                this.sv("IsVerticalZoomEnabled", b, this.f9);
            }
        }
        get f9() {
            return this.get_f9();
        }
        set f9(a) {
            this.set_f9(a);
        }
        get_gc() {
            return this.e8;
        }
        set_gc(a) {
            let b = this.gc;
            if (a != b) {
                this.e8 = a;
                this.sv("ShouldDisplayMockData", b, this.gc);
            }
        }
        get gc() {
            return this.get_gc();
        }
        set gc(a) {
            this.set_gc(a);
        }
        get_gf() {
            return this.fe;
        }
        set_gf(a) {
            let b = this.gf;
            if (a != b) {
                this.fe = a;
                this.sv("ShouldUseSkeletonStyleForMockData", b, this.gf);
            }
        }
        get gf() {
            return this.get_gf();
        }
        set gf(a) {
            this.set_gf(a);
        }
        get_f4() {
            return this.e5;
        }
        set_f4(a) {
            let b = this.f4;
            if (a != b) {
                this.e5 = a;
                this.sv("IsSeriesHighlightingEnabled", b, this.f4);
            }
        }
        get f4() {
            return this.get_f4();
        }
        set f4(a) {
            this.set_f4(a);
        }
        get ve() {
            return this.vc;
        }
        set ve(a) {
            let b = this.ve;
            if (Rect.l_op_Inequality(a, b)) {
                this.vc = a;
                this.sv("WindowRect", b, this.ve);
            }
        }
        get vd() {
            return this.dataChart != null ? this.dataChart.tp : Rect.empty;
        }
        get qb() {
            return this.k3;
        }
        set qb(a) {
            let b = this.qb;
            if (a != b) {
                this.k3 = a;
                this.sv("Title", b, this.qb);
            }
        }
        get p0() {
            return this.k1;
        }
        set p0(a) {
            let b = this.p0;
            if (a != b) {
                this.k1 = a;
                this.sv("Subtitle", b, this.p0);
            }
        }
        get tv() {
            return this.tt;
        }
        set tv(a) {
            let b = this.tv;
            if (b != a) {
                this.tt = a;
                this.sv("TitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.tv));
            }
        }
        get tu() {
            return this.ts;
        }
        set tu(a) {
            let b = this.tu;
            if (b != a) {
                this.ts = a;
                this.sv("SubtitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.tu));
            }
        }
        get ds() {
            return this.dr;
        }
        set ds(a) {
            let b = this.ds;
            if (a != b) {
                this.dr = a;
                this.sv("UnknownValuePlotting", enumGetBox(UnknownValuePlotting_$type, b), enumGetBox(UnknownValuePlotting_$type, this.ds));
            }
        }
        get_iv() {
            return this.hi;
        }
        set_iv(a) {
            let b = this.iv;
            if (a != b) {
                this.hi = a;
                this.sv("Resolution", b, this.iv);
            }
        }
        get iv() {
            return this.get_iv();
        }
        set iv(a) {
            this.set_iv(a);
        }
        get i1() {
            return this.ho;
        }
        set i1(a) {
            let b = this.i1;
            if (a != b) {
                this.ho = a;
                this.sv("Thickness", b, this.i1);
            }
        }
        get c9() {
            return this.c8;
        }
        set c9(a) {
            let b = this.c9;
            if (a != b) {
                this.c8 = a;
                this.sv("OutlineMode", enumGetBox(SeriesOutlineMode_$type, b), enumGetBox(SeriesOutlineMode_$type, this.c9));
            }
        }
        get co() {
            return this.cn;
        }
        set co(a) {
            let b = this.co;
            if (a != b) {
                this.cn = a;
                this.sv("MarkerOutlineMode", enumGetBox(MarkerOutlineMode_$type, b), enumGetBox(MarkerOutlineMode_$type, this.co));
            }
        }
        get cm() {
            return this.cl;
        }
        set cm(a) {
            let b = this.cm;
            if (a != b) {
                this.cl = a;
                this.sv("MarkerFillMode", enumGetBox(MarkerFillMode_$type, b), enumGetBox(MarkerFillMode_$type, this.cm));
            }
        }
        get io() {
            return this.hb;
        }
        set io(a) {
            let b = this.io;
            if (a != b) {
                this.hb = a;
                this.sv("MarkerFillOpacity", b, this.io);
            }
        }
        get ip() {
            return this.hc;
        }
        set ip(a) {
            let b = this.ip;
            if (a != b) {
                this.hc = a;
                this.sv("MarkerThickness", b, this.ip);
            }
        }
        get cu() {
            return this.ct;
        }
        set cu(a) {
            let b = this.cu;
            if (a != b) {
                this.ct = a;
                this.sv("MarkerTypes", b, this.cu);
            }
        }
        get ck() {
            return this.cj;
        }
        set ck(a) {
            let b = this.ck;
            if (a != b) {
                this.cj = a;
                this.sv("MarkerAutomaticBehavior", enumGetBox(MarkerAutomaticBehavior_$type, b), enumGetBox(MarkerAutomaticBehavior_$type, this.ck));
            }
        }
        get ad() {
            return this.u;
        }
        set ad(a) {
            let b = this.ad;
            if (a != b) {
                this.u = a;
                this.sv("MarkerBrushes", b, this.ad);
            }
        }
        get ae() {
            return this.v;
        }
        set ae(a) {
            let b = this.ae;
            if (!Base.equalsStatic(a, b)) {
                this.v = a;
                this.sv("MarkerOutlines", b, this.ae);
            }
        }
        get j0() {
            return this.jr;
        }
        set j0(a) {
            let b = this.jr;
            if (a != b) {
                this.jr = a;
                this.sv("MarkerMaxCount", b, this.jr);
            }
        }
        get h7() {
            return this.gw;
        }
        set h7(a) {
            let b = this.h7;
            if (a != b) {
                this.gw = a;
                this.sv("AreaFillOpacity", b, this.h7);
            }
        }
        get fh() {
            return this.ep;
        }
        set fh(a) {
            let b = this.ep;
            if (a != b) {
                this.ep = a;
                this.sv("AnimateSeriesWhenAxisRangeChanges", b, this.ep);
            }
        }
        get ah() {
            return this.x;
        }
        set ah(a) {
            let b = this.ah;
            if (a != b) {
                this.x = a;
                this.sv("TrendLineBrushes", b, this.ah);
            }
        }
        get dq() {
            return this.dp;
        }
        set dq(a) {
            let b = this.dq;
            if (a != b) {
                this.dp = a;
                this.sv("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.dq));
            }
        }
        get i7() {
            return this.hu;
        }
        set i7(a) {
            let b = this.i7;
            if (a != b) {
                this.hu = a;
                this.sv("TrendLineThickness", b, this.i7);
            }
        }
        get fg() {
            return this.eo;
        }
        set fg(a) {
            let b = this.fg;
            if (a != b) {
                this.eo = a;
                this.sv("AlignsGridLinesToPixels", b, this.fg);
            }
        }
        get is() {
            return this.hf;
        }
        set is(a) {
            let b = this.hf;
            this.hf = a;
            if (a != b) {
                this.sv("PlotAreaMarginLeft", b, a);
            }
        }
        get iu() {
            return this.hh;
        }
        set iu(a) {
            let b = this.hh;
            this.hh = a;
            if (a != b) {
                this.sv("PlotAreaMarginTop", b, a);
            }
        }
        get it() {
            return this.hg;
        }
        set it(a) {
            let b = this.hg;
            this.hg = a;
            if (a != b) {
                this.sv("PlotAreaMarginRight", b, a);
            }
        }
        get ir() {
            return this.he;
        }
        set ir(a) {
            let b = this.he;
            this.he = a;
            if (a != b) {
                this.sv("PlotAreaMarginBottom", b, a);
            }
        }
        su() {
        }
        get a6() {
            return this.a5;
        }
        set a6(a) {
            let b = this.a6;
            if (a != b) {
                this.a5 = a;
                this.sv("ComputedPlotAreaMarginMode", enumGetBox(ComputedPlotAreaMarginMode_$type, b), enumGetBox(ComputedPlotAreaMarginMode_$type, this.a6));
            }
        }
        a7() {
            return this.a6;
        }
        get db() {
            return this.da;
        }
        set db(a) {
            let b = this.db;
            if (a != b) {
                this.da = a;
                this.sv("SeriesPlotAreaMarginHorizontalMode", enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, b), enumGetBox(SeriesPlotAreaMarginHorizontalMode_$type, this.db));
            }
        }
        get dd() {
            return this.dc;
        }
        set dd(a) {
            let b = this.dd;
            if (a != b) {
                this.dc = a;
                this.sv("SeriesPlotAreaMarginVerticalMode", enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, b), enumGetBox(SeriesPlotAreaMarginVerticalMode_$type, this.dd));
            }
        }
        get c7() {
            return this.c6;
        }
        set c7(a) {
            let b = this.c7;
            if (a != b) {
                this.c6 = a;
                this.sv("HighlightingMode", enumGetBox(SeriesHighlightingMode_$type, b), enumGetBox(SeriesHighlightingMode_$type, this.c7));
            }
        }
        get c5() {
            return this.c4;
        }
        set c5(a) {
            let b = this.c5;
            if (a != b) {
                this.c4 = a;
                this.sv("HighlightingBehavior", enumGetBox(SeriesHighlightingBehavior_$type, b), enumGetBox(SeriesHighlightingBehavior_$type, this.c5));
            }
        }
        get cc() {
            return this.cb;
        }
        set cc(a) {
            let b = this.cc;
            if (a != b) {
                this.cb = a;
                this.sv("LegendHighlightingMode", enumGetBox(LegendHighlightingMode_$type, b), enumGetBox(LegendHighlightingMode_$type, this.cc));
            }
        }
        get ci() {
            return this.cg;
        }
        set ci(a) {
            let b = this.ci;
            if (a != b) {
                this.cg = a;
                this.sv("LegendItemBadgeShape", enumGetBox(LegendItemBadgeShape_$type, b), enumGetBox(LegendItemBadgeShape_$type, this.ci));
            }
        }
        get ce() {
            return this.cd;
        }
        set ce(a) {
            let b = this.ce;
            if (a != b) {
                this.cd = a;
                this.sv("LegendItemBadgeMode", enumGetBox(LegendItemBadgeMode_$type, b), enumGetBox(LegendItemBadgeMode_$type, this.ce));
            }
        }
        get j2() {
            return this.ju;
        }
        set j2(a) {
            let b = this.j2;
            if (a != b) {
                this.ju = a;
                this.sv("TrendLinePeriod", b, this.j2);
            }
        }
        get dn() {
            return this.dm;
        }
        set dn(a) {
            let b = this.dn;
            if (a != b) {
                this.dm = a;
                this.sv("ToolTipType", enumGetBox(ToolTipType_$type, b), enumGetBox(ToolTipType_$type, this.dn));
            }
        }
        get a9() {
            return this.a8;
        }
        set a9(a) {
            let b = this.a9;
            if (a != b) {
                this.a8 = a;
                this.sv("CrosshairsDisplayMode", enumGetBox(CrosshairsDisplayMode_$type, b), enumGetBox(CrosshairsDisplayMode_$type, this.a9));
            }
        }
        get fn() {
            return this.ev;
        }
        set fn(a) {
            let b = this.fn;
            if (a != b) {
                this.ev = a;
                this.sv("CrosshairsSnapToData", b, this.fn);
            }
        }
        get uo() {
            return this.t1;
        }
        set uo(a) {
            let b = this.uo;
            if (a != b) {
                this.t1 = a;
                this.sv("CrosshairsLineVerticalStroke", b, this.uo);
            }
        }
        get h9() {
            return this.gy;
        }
        set h9(a) {
            let b = this.h9;
            if (a != b) {
                this.gy = a;
                this.sv("CrosshairsLineThickness", b, this.h9);
            }
        }
        get un() {
            return this.t0;
        }
        set un(a) {
            let b = this.un;
            if (a != b) {
                this.t0 = a;
                this.sv("CrosshairsLineHorizontalStroke", b, this.un);
            }
        }
        get fm() {
            return this.eu;
        }
        set fm(a) {
            let b = this.fm;
            if (a != b) {
                this.eu = a;
                this.sv("CrosshairsAnnotationEnabled", b, this.fm);
            }
        }
        get uj() {
            return this.tw;
        }
        set uj(a) {
            let b = this.uj;
            if (a != b) {
                this.tw = a;
                this.sv("CrosshairsAnnotationXAxisBackground", b, this.uj);
            }
        }
        get ul() {
            return this.ty;
        }
        set ul(a) {
            let b = this.ul;
            if (a != b) {
                this.ty = a;
                this.sv("CrosshairsAnnotationYAxisBackground", b, this.ul);
            }
        }
        get uk() {
            return this.tx;
        }
        set uk(a) {
            let b = this.uk;
            if (a != b) {
                this.tx = a;
                this.sv("CrosshairsAnnotationXAxisTextColor", b, this.uk);
            }
        }
        get um() {
            return this.tz;
        }
        set um(a) {
            let b = this.um;
            if (a != b) {
                this.tz = a;
                this.sv("CrosshairsAnnotationYAxisTextColor", b, this.um);
            }
        }
        get jv() {
            return this.jm;
        }
        set jv(a) {
            let b = this.jv;
            if (a != b) {
                this.jm = a;
                this.sv("CrosshairsAnnotationXAxisPrecision", b, this.jv);
            }
        }
        get jw() {
            return this.jn;
        }
        set jw(a) {
            let b = this.jw;
            if (a != b) {
                this.jn = a;
                this.sv("CrosshairsAnnotationYAxisPrecision", b, this.jw);
            }
        }
        get gb() {
            return this.e7;
        }
        set gb(a) {
            let b = this.gb;
            if (a != b) {
                this.e7 = a;
                this.sv("ShouldAvoidAxisAnnotationCollisions", b, this.gb);
            }
        }
        get gd() {
            return this.e9;
        }
        set gd(a) {
            let b = this.e9;
            if (a != b) {
                this.e9 = a;
                this.sv("ShouldPanOnMaximumZoom", b, this.e9);
            }
        }
        get ft() {
            return this.e1;
        }
        set ft(a) {
            let b = this.ft;
            if (a != b) {
                this.e1 = a;
                this.sv("FinalValueAnnotationsVisible", b, this.ft);
            }
        }
        get uy() {
            return this.ub;
        }
        set uy(a) {
            let b = this.uy;
            if (a != b) {
                this.ub = a;
                this.sv("FinalValueAnnotationsBackground", b, this.uy);
            }
        }
        get uz() {
            return this.uc;
        }
        set uz(a) {
            let b = this.uz;
            if (a != b) {
                this.uc = a;
                this.sv("FinalValueAnnotationsTextColor", b, this.uz);
            }
        }
        get jz() {
            return this.jq;
        }
        set jz(a) {
            let b = this.jz;
            if (a != b) {
                this.jq = a;
                this.sv("FinalValueAnnotationsPrecision", b, this.jz);
            }
        }
        get fj() {
            return this.er;
        }
        set fj(a) {
            let b = this.fj;
            if (a != b) {
                this.er = a;
                this.sv("AutoCalloutsVisible", b, this.fj);
            }
        }
        get fl() {
            return this.et;
        }
        set fl(a) {
            let b = this.fl;
            if (a != b) {
                this.et = a;
                this.sv("CalloutsVisible", b, this.fl);
            }
        }
        get fk() {
            return this.es;
        }
        set fk(a) {
            let b = this.fk;
            if (a != b) {
                this.es = a;
                this.sv("CalloutStyleUpdatingEventEnabled", b, this.fk);
            }
        }
        get calloutsItemsSource() {
            return this.gt;
        }
        set calloutsItemsSource(a) {
            let b = this.calloutsItemsSource;
            if (a != b) {
                this.gt = a;
                this.sv("CalloutsItemsSource", b, this.calloutsItemsSource);
            }
        }
        get ak() {
            return this.aj;
        }
        set ak(a) {
            let b = this.ak;
            if (a != b) {
                this.aj = a;
                this.sv("CalloutsAllowedPositions", b, this.ak);
            }
        }
        get lm() {
            return this.kl;
        }
        set lm(a) {
            let b = this.lm;
            if (a != b) {
                this.kl = a;
                this.sv("CalloutsXMemberPath", b, this.lm);
            }
        }
        get lo() {
            return this.km;
        }
        set lo(a) {
            let b = this.lo;
            if (a != b) {
                this.km = a;
                this.sv("CalloutsYMemberPath", b, this.lo);
            }
        }
        get li() {
            return this.kk;
        }
        set li(a) {
            let b = this.li;
            if (a != b) {
                this.kk = a;
                this.sv("CalloutsLabelMemberPath", b, this.li);
            }
        }
        get lf() {
            return this.kj;
        }
        set lf(a) {
            let b = this.lf;
            if (a != b) {
                this.kj = a;
                this.sv("CalloutsContentMemberPath", b, this.lf);
            }
        }
        get du() {
            return this.dt;
        }
        set du(a) {
            let b = this.dt;
            if (a != b) {
                this.dt = a;
                this.sv("ValueLines", b, this.dt);
            }
        }
        get ai() {
            return this.y;
        }
        set ai(a) {
            let b = this.y;
            if (a != b) {
                this.y = a;
                this.sv("ValueLinesBrushes", b, this.y);
            }
        }
        get i8() {
            return this.hv;
        }
        set i8(a) {
            let b = this.hv;
            if (a != b) {
                this.hv = a;
                this.sv("ValueLinesThickness", b, this.hv);
            }
        }
        get di() {
            return this.dg;
        }
        set di(a) {
            let b = this.dg;
            this.dg = a;
            if (b != this.dg) {
                this.sv("HorizontalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.dg));
            }
        }
        get dj() {
            return this.dh;
        }
        set dj(a) {
            let b = this.dh;
            this.dh = a;
            if (b != this.dh) {
                this.sv("VerticalViewScrollbarMode", enumGetBox(SeriesViewerScrollbarMode_$type, b), enumGetBox(SeriesViewerScrollbarMode_$type, this.dh));
            }
        }
        get df() {
            return this.de;
        }
        set df(a) {
            let b = this.de;
            this.de = a;
            if (b != this.de) {
                this.sv("HorizontalViewScrollbarPosition", enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, b), enumGetBox(SeriesViewerHorizontalScrollbarPosition_$type, this.de));
            }
        }
        get dl() {
            return this.dk;
        }
        set dl(a) {
            let b = this.dk;
            this.dk = a;
            if (b != this.dk) {
                this.sv("VerticalViewScrollbarPosition", enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, b), enumGetBox(SeriesViewerVerticalScrollbarPosition_$type, this.dk));
            }
        }
        get u4() {
            return this.ud;
        }
        set u4(a) {
            let b = this.ud;
            this.ud = a;
            if (b != this.ud) {
                this.sv("HorizontalViewScrollbarFill", b, this.ud);
            }
        }
        get u5() {
            return this.ue;
        }
        set u5(a) {
            let b = this.ue;
            this.ue = a;
            if (b != this.ue) {
                this.sv("HorizontalViewScrollbarOutline", b, this.ue);
            }
        }
        get ij() {
            return this.g7;
        }
        set ij(a) {
            let b = this.g7;
            this.g7 = a;
            if (b != this.g7) {
                this.sv("HorizontalViewScrollbarStrokeThickness", b, this.g7);
            }
        }
        get ii() {
            return this.g6;
        }
        set ii(a) {
            let b = this.g6;
            this.g6 = a;
            if (b != this.g6) {
                this.sv("HorizontalViewScrollbarMaxOpacity", b, this.g6);
            }
        }
        get ie() {
            return this.g3;
        }
        set ie(a) {
            let b = this.g3;
            this.g3 = a;
            if (b != this.g3) {
                this.sv("HorizontalViewScrollbarCornerRadius", b, this.g3);
            }
        }
        get ig() {
            return this.g4;
        }
        set ig(a) {
            let b = this.g4;
            this.g4 = a;
            if (b != this.g4) {
                this.sv("HorizontalViewScrollbarHeight", b, this.g4);
            }
        }
        get ih() {
            return this.g5;
        }
        set ih(a) {
            let b = this.g5;
            this.g5 = a;
            if (b != this.g5) {
                this.sv("HorizontalViewScrollbarInset", b, this.g5);
            }
        }
        get il() {
            return this.g9;
        }
        set il(a) {
            let b = this.g9;
            this.g9 = a;
            if (b != this.g9) {
                this.sv("HorizontalViewScrollbarTrackStartInset", b, this.g9);
            }
        }
        get ik() {
            return this.g8;
        }
        set ik(a) {
            let b = this.g8;
            this.g8 = a;
            if (b != this.g8) {
                this.sv("HorizontalViewScrollbarTrackEndInset", b, this.g8);
            }
        }
        get fv() {
            return this.e2;
        }
        set fv(a) {
            let b = this.e2;
            this.e2 = a;
            if (b != this.e2) {
                this.sv(DomainChart.os, b, this.e2);
            }
        }
        get u9() {
            return this.uh;
        }
        set u9(a) {
            let b = this.uh;
            this.uh = a;
            if (b != this.uh) {
                this.sv("VerticalViewScrollbarFill", b, this.uh);
            }
        }
        get va() {
            return this.ui;
        }
        set va(a) {
            let b = this.ui;
            this.ui = a;
            if (b != this.ui) {
                this.sv("VerticalViewScrollbarOutline", b, this.ui);
            }
        }
        get jc() {
            return this.hz;
        }
        set jc(a) {
            let b = this.hz;
            this.hz = a;
            if (b != this.hz) {
                this.sv("VerticalViewScrollbarStrokeThickness", b, this.hz);
            }
        }
        get jb() {
            return this.hy;
        }
        set jb(a) {
            let b = this.hy;
            this.hy = a;
            if (b != this.hy) {
                this.sv("VerticalViewScrollbarMaxOpacity", b, this.hy);
            }
        }
        get i9() {
            return this.hw;
        }
        set i9(a) {
            let b = this.hw;
            this.hw = a;
            if (b != this.hw) {
                this.sv("VerticalViewScrollbarCornerRadius", b, this.hw);
            }
        }
        get jf() {
            return this.h2;
        }
        set jf(a) {
            let b = this.h2;
            this.h2 = a;
            if (b != this.h2) {
                this.sv("VerticalViewScrollbarWidth", b, this.h2);
            }
        }
        get ja() {
            return this.hx;
        }
        set ja(a) {
            let b = this.hx;
            this.hx = a;
            if (b != this.hx) {
                this.sv("VerticalViewScrollbarInset", b, this.hx);
            }
        }
        get je() {
            return this.h1;
        }
        set je(a) {
            let b = this.h1;
            this.h1 = a;
            if (b != this.h1) {
                this.sv("VerticalViewScrollbarTrackStartInset", b, this.h1);
            }
        }
        get jd() {
            return this.h0;
        }
        set jd(a) {
            let b = this.h0;
            this.h0 = a;
            if (b != this.h0) {
                this.sv("VerticalViewScrollbarTrackEndInset", b, this.h0);
            }
        }
        get gg() {
            return this.ff;
        }
        set gg(a) {
            let b = this.ff;
            this.ff = a;
            if (b != this.ff) {
                this.sv(DomainChart.q7, b, this.ff);
            }
        }
        get jh() {
            return this.h4;
        }
        set jh(a) {
            let b = this.h4;
            this.h4 = a;
            if (b != this.h4) {
                this.sv("WindowRectMinWidth", b, this.h4);
            }
        }
        get jg() {
            return this.h3;
        }
        set jg(a) {
            let b = this.h3;
            this.h3 = a;
            if (b != this.h3) {
                this.sv("WindowRectMinHeight", b, this.h3);
            }
        }
        get jj() {
            return this.h6;
        }
        set jj(a) {
            let b = this.h6;
            this.h6 = a;
            if (b != this.h6) {
                this.sv("WindowSizeMinWidth", b, this.h6);
            }
        }
        get ji() {
            return this.h5;
        }
        set ji(a) {
            let b = this.h5;
            this.h5 = a;
            if (b != this.h5) {
                this.sv("WindowSizeMinHeight", b, this.h5);
            }
        }
    }
    DomainChart.$t = /*@__PURE__*/ markType(DomainChart, 'DomainChart', Base.$, [INotifyPropertyChanged_$type, IDataLegendTarget_$type, IToolbarTarget_$type]);
    DomainChart.ki = /*@__PURE__*/ new Random(0);
    DomainChart.kh = /*@__PURE__*/ new Random(0);
    DomainChart.mz = "DataToolTipShouldUpdateWhenSeriesDataChanges";
    DomainChart.os = "HorizontalViewScrollbarShouldAddAutoTrackInsets";
    DomainChart.q7 = "VerticalViewScrollbarShouldAddAutoTrackInsets";
    return DomainChart;
})();
/**
 * @hidden
 */
export let IDomainChartToolbarProvider_$type = /*@__PURE__*/ new Type(null, 'IDomainChartToolbarProvider');
