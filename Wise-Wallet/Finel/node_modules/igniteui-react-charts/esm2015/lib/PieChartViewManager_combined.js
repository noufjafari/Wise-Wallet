/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Base, Point_$type, runOn, delegateCombine, markType, PointUtil, EventArgs, typeCast, INotifyPropertyChanged_$type, IEnumerable_$type, IList_$type, PropertyChangedEventArgs, Number_$type, enumGetBox, EnumUtil, Boolean_$type, delegateRemove, Array_$type, Delegate_$type, fromEnum, fromEn, markDep } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { RenderingContext } from "igniteui-react-core";
import { PieChartStyleInfo } from "./PieChartStyleInfo";
import { BrushCollection } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { FontUtil } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { CanvasViewRenderer } from "igniteui-react-core";
import { DOMEventProxy } from "igniteui-react-core";
import { PieChartVisualData } from "./PieChartVisualData";
import { Style } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Control } from "igniteui-react-core";
import { Line } from "igniteui-react-core";
import { LabelsPosition_$type } from "./LabelsPosition";
import { TextBlock } from "igniteui-react-core";
import { GeometryUtil } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { BezierSegment } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { LeaderLineType_$type } from "./LeaderLineType";
import { stringEmpty, stringIsNullOrWhiteSpace } from "igniteui-react-core";
import { ILegendOwner_$type } from "igniteui-react-core";
import { ILegendSeries_$type } from "igniteui-react-core";
import { ILegendTemplateProvider_$type } from "igniteui-react-core";
import { FastItemsSource } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { SRProvider } from "igniteui-react-core";
import { OthersCategoryType_$type } from "./OthersCategoryType";
import { IndexCollection } from "./IndexCollection";
import { NotifyCollectionChangedEventArgs } from "igniteui-react-core";
import { IChartLegend_$type } from "igniteui-react-core";
import { SweepDirection_$type } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { LegendEmptyValuesMode_$type } from "./LegendEmptyValuesMode";
import { SliceSelectionMode_$type } from "./SliceSelectionMode";
import { ObjectCollection } from "igniteui-react-core";
import { BindingFormatter } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { SelectedItemChangingEventArgs } from "./SelectedItemChangingEventArgs";
import { SelectedItemsChangingEventArgs } from "./SelectedItemsChangingEventArgs";
import { SelectedItemChangedEventArgs } from "./SelectedItemChangedEventArgs";
import { SelectedItemsChangedEventArgs } from "./SelectedItemsChangedEventArgs";
import { MathUtil } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { PieSliceVisualData } from "./PieSliceVisualData";
import { RectData } from "igniteui-react-core";
import { PieChartMockDataGenerator } from "./PieChartMockDataGenerator";
import { MouseEventArgs } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { FastItemObjectColumn } from "igniteui-react-core";
import { ArcSegment } from "igniteui-react-core";
import { LineSegment } from "igniteui-react-core";
import { EllipseGeometry } from "igniteui-react-core";
import { PathSegmentCollection } from "igniteui-react-core";
import { PathFigureCollection } from "igniteui-react-core";
import { GeometryGroup } from "igniteui-react-core";
import { RectUtil } from "igniteui-react-core";
import { PrimitiveAppearanceData } from "igniteui-react-core";
import { LabelAppearanceData } from "igniteui-react-core";
import { PointData } from "igniteui-react-core";
import { AppearanceHelper } from "igniteui-react-core";
import { PathVisualData } from "igniteui-react-core";
import { PieLegendTemplates } from "./PieLegendTemplates";
import { MouseButtonEventArgs } from "igniteui-react-core";
import { TranslateTransform } from "igniteui-react-core";
/**
 * @hidden
 */
export let PieChartViewManager = /*@__PURE__*/ (() => {
    class PieChartViewManager extends Base {
        constructor(a) {
            super();
            this.n = null;
            this.p = null;
            this.s = null;
            this.r = null;
            this.q = null;
            this.k = 0;
            this.j = 0;
            this.l = 1;
            this.ap = null;
            this.e = null;
            this.g = null;
            this.f = null;
            this.h = null;
            this.a = null;
            this.c = null;
            this._toolTipObject = null;
            this.u = null;
            this.i = true;
            this.a = a;
        }
        aa() {
            let a = this.n.rootWrapper.width();
            let b = this.n.rootWrapper.height();
            this.ad(a, b);
        }
        ad(a, b) {
            this.z();
            this.c.bl = new Rect(0, 0, 0, a, b);
            let c = this.a.a.c1;
            if (c == this.l && a == this.k && b == this.j) {
                return;
            }
            this.k = a;
            this.j = b;
            this.l = c;
            this.a.bb();
        }
        ae() {
            if (this.c != null) {
                this.c.bh(this.s, "");
            }
        }
        ab() {
            this.z();
            if (this.c != null) {
                this.c.at(this.s, "");
            }
        }
        z() {
            let a = this.a.a.de;
            let b = this.a.a.c1;
            if (!isNaN_(a) && a != 0) {
                return;
            }
            if (window.devicePixelRatio != undefined && window.devicePixelRatio != b) {
                this.a.a.c1 = window.devicePixelRatio;
            }
        }
        w(a, b) {
            let c = this.a.a.c1;
            if (a != this.k || b != this.j || c != this.l) {
                this.k = a;
                this.j = b;
                this.l = this.a.a.c1;
                this.ao();
            }
        }
        ao() {
            this.ap = new Rect(0, 0, 0, this.k, this.j);
            let a = this.k;
            let b = this.j;
            let c = this.l;
            if (c != 1) {
                a = Math.round(this.k * c);
                b = Math.round(this.j * c);
            }
            this.p.setAttribute("width", a.toString());
            this.p.setAttribute("height", b.toString());
            this.p.setStyleProperty("width", this.k.toString() + "px");
            this.p.setStyleProperty("height", this.j.toString() + "px");
            this.r.setAttribute("width", a.toString());
            this.r.setAttribute("height", b.toString());
            this.r.setStyleProperty("width", this.k.toString() + "px");
            this.r.setStyleProperty("height", this.j.toString() + "px");
            this.q.setAttribute("width", a.toString());
            this.q.setAttribute("height", b.toString());
            this.q.setStyleProperty("width", this.k.toString() + "px");
            this.q.setStyleProperty("height", this.j.toString() + "px");
            this.s.setAttribute("width", a.toString());
            this.s.setAttribute("height", b.toString());
            this.s.setStyleProperty("width", this.k.toString() + "px");
            this.s.setStyleProperty("height", this.j.toString() + "px");
            return this.ap;
        }
        d() {
            return this.a.b.c;
        }
        an() {
            let a = DOMEventProxy.c4(this.n.rootWrapper);
            return { $type: Point_$type, x: a.left, y: a.top };
        }
        ah(a) {
            if (this.n != null) {
                this.n.setTimeout(a, 0);
            }
            else {
                window.setTimeout(a, 0);
            }
        }
        b() {
            let a = new PieChartStyleInfo();
            let b;
            let c;
            let d = BrushUtil.e("chart", this.n, b, c);
            b = d.p2;
            c = d.p3;
            a.a = b;
            a.b = c;
            this.n.startCSSQuery();
            a.f = ((() => {
                let $ret = new Brush();
                $ret.fill = this.n.getCssDefaultPropertyValue("ui-chart-innerlabels", "color");
                return $ret;
            })());
            a.g = ((() => {
                let $ret = new Brush();
                $ret.fill = this.n.getCssDefaultPropertyValue("ui-chart-outerlabels", "color");
                return $ret;
            })());
            this.n.endCSSQuery();
            a.c = FontUtil.getFont(this.n);
            a.e = DeviceUtils.g(6);
            a.i = ((() => {
                let $ret = new Brush();
                $ret.fill = "#00000033";
                return $ret;
            })());
            a.d = 1;
            return a;
        }
        ai(a) {
            a._stroke = ((() => {
                let $ret = new Brush();
                $ret.fill = "#000000";
                return $ret;
            })());
            a._fill = ((() => {
                let $ret = new Brush();
                $ret.fill = "#222222";
                return $ret;
            })());
        }
        ac(a) {
            if (a == null) {
                if (this.c != null) {
                    this.c.av();
                }
                this.n = null;
                this.p = null;
                this.r = null;
                this.q = null;
                this.s = null;
                this.e = null;
                this.g = null;
                this.f = null;
                this.h = null;
                this.c = null;
                return;
            }
            let b = a;
            this.n = b;
            this.a.bc();
            this.a.bl();
            this.n.rootWrapper.setStyleProperty("position", "relative");
            this.n.rootWrapper.addClass("ui-corner-all");
            this.n.rootWrapper.addClass("ui-widget-content");
            this.p = this.n.createElement("canvas");
            this.p.setStyleProperty("position", "absolute");
            this.p.setStyleProperty("top", "0px");
            this.p.setStyleProperty("left", "0px");
            this.r = this.n.createElement("canvas");
            this.r.setStyleProperty("position", "absolute");
            this.r.setStyleProperty("top", "0px");
            this.r.setStyleProperty("left", "0px");
            this.q = this.n.createElement("canvas");
            this.q.setStyleProperty("position", "absolute");
            this.q.setStyleProperty("top", "0px");
            this.q.setStyleProperty("left", "0px");
            this.s = this.n.createElement("canvas");
            this.s.setStyleProperty("position", "absolute");
            this.s.setStyleProperty("top", "0px");
            this.s.setStyleProperty("left", "0px");
            this.n.append(this.p);
            this.n.append(this.r);
            this.n.append(this.q);
            this.n.append(this.s);
            this.e = new RenderingContext(new CanvasViewRenderer(), this.n.get2DCanvasContext(this.p));
            this.g = new RenderingContext(new CanvasViewRenderer(), this.n.get2DCanvasContext(this.r));
            this.f = new RenderingContext(new CanvasViewRenderer(), this.n.get2DCanvasContext(this.q));
            this.h = new RenderingContext(new CanvasViewRenderer(), this.n.get2DCanvasContext(this.s));
            this.c = new DOMEventProxy(this.s, this.n, false);
            let c = this.c;
            c.onMouseOver = delegateCombine(c.onMouseOver, runOn(this.a, this.a.ak));
            let d = this.c;
            d.onMouseLeave = delegateCombine(d.onMouseLeave, runOn(this.a, this.a.aj));
            let e = this.c;
            e.onMouseDown = delegateCombine(e.onMouseDown, runOn(this.a, this.a.ai));
            let f = this.c;
            f.onMouseUp = delegateCombine(f.onMouseUp, runOn(this.a, this.a.al));
            this.c.ae = this.a.a.ce;
            this.ad(this.n.rootWrapper.width(), this.n.rootWrapper.height());
        }
        v(a) {
            this.n.append(a);
        }
        af(a) {
            if (this.c == null) {
                return;
            }
            this.c.ae = a;
        }
        t() {
            return this.n;
        }
        x(a) {
            a.width = this.k;
            a.height = this.j;
        }
        ak(a) {
            this.u = null;
            this._toolTipObject = null;
            if (typeof a === 'string') {
                this.u = a;
            }
            else {
                this._toolTipObject = a;
                if (this._toolTipObject != null) {
                    this._toolTipObject.setStyleProperty("position", "absolute");
                    this._toolTipObject.setStyleProperty("white-space", "nowrap");
                    this._toolTipObject.setStyleProperty("top", "0");
                    this._toolTipObject.setStyleProperty("left", "0");
                    this._toolTipObject.setStyleProperty("z-index", "10000");
                }
            }
        }
        aj(pos_, context_) {
            if (this._toolTipObject != null) {
                if (this.i) {
                    this.v(this._toolTipObject);
                    this.i = false;
                }
                context_.hideOthers = true;
                if (this._toolTipObject.updateToolTip) {
                    this._toolTipObject.updateToolTip(context_);
                }
                ;
                this._toolTipObject.setOffset(pos_.x, pos_.y);
            }
        }
        y(a) {
            if (this._toolTipObject != null) {
                let context_ = a;
                if (this._toolTipObject.hideToolTip) {
                    this._toolTipObject.hideToolTip(context_);
                }
                ;
            }
        }
        al(style_) {
            let a = null;
            let fillColor_ = null;
            if (style_ != null) {
                if (style_.fill) {
                    fillColor_ = style_.fill;
                }
                ;
                if (fillColor_ != null) {
                    a = Brush.create(fillColor_);
                }
            }
            return a;
        }
        am(style_) {
            let a = null;
            let outlineColor_ = null;
            if (style_ != null) {
                if (style_.stroke) {
                    outlineColor_ = style_.stroke;
                }
                ;
                if (outlineColor_ != null) {
                    a = Brush.create(outlineColor_);
                }
            }
            return a;
        }
        m(style_) {
            let actualOutlineThickness_ = NaN;
            if (style_ != null) {
                if (style_.strokeThickness) {
                    actualOutlineThickness_ = style_.strokeThickness;
                }
                ;
            }
            return actualOutlineThickness_;
        }
        ag() {
        }
    }
    PieChartViewManager.$t = /*@__PURE__*/ markType(PieChartViewManager, 'PieChartViewManager');
    return PieChartViewManager;
})();
/**
 * @hidden
 */
export let LabelClickEventArgs = /*@__PURE__*/ (() => {
    class LabelClickEventArgs extends EventArgs {
        constructor(a, b) {
            super();
            this._slice = null;
            this.c = true;
            this.slice = a;
        }
        get slice() {
            return this._slice;
        }
        set slice(a) {
            this._slice = a;
        }
        get item() {
            if (this.slice != null) {
                return this.slice.dataContext;
            }
            else {
                return null;
            }
        }
        get allowSliceClick() {
            return this.c;
        }
        set allowSliceClick(a) {
            this.c = a;
        }
    }
    LabelClickEventArgs.$t = /*@__PURE__*/ markType(LabelClickEventArgs, 'LabelClickEventArgs', EventArgs.$);
    return LabelClickEventArgs;
})();
/**
 * @hidden
 */
export let SliceClickEventArgs = /*@__PURE__*/ (() => {
    class SliceClickEventArgs extends EventArgs {
        constructor(a, b) {
            super();
            this._slice = null;
            this.d = false;
            this.c = false;
            this._originalEvent = null;
            this.slice = a;
            this.originalEvent = b;
            if (a == null) {
                return;
            }
            this.d = a.isSelected;
            this.c = a.isExploded;
        }
        get slice() {
            return this._slice;
        }
        set slice(a) {
            this._slice = a;
        }
        get isSelected() {
            return this.d;
        }
        set isSelected(a) {
            this.d = a;
            this.slice.ai.g1(this.slice, a);
        }
        get isExploded() {
            return this.c;
        }
        set isExploded(a) {
            this.c = a;
            this.slice.isExploded = a;
        }
        get isOthersSlice() {
            return this.slice.isOthersSlice;
        }
        get index() {
            return this.slice.a5;
        }
        get dataContext() {
            if (this.slice != null) {
                return this.slice.dataContext;
            }
            return null;
        }
        get originalEvent() {
            return this._originalEvent;
        }
        set originalEvent(a) {
            this._originalEvent = a;
        }
        get origin() {
            return this.slice.isExploded ? this.slice.b3 : this.slice.b7;
        }
        get radius() {
            return this.slice.isExploded ? this.slice.ay : this.slice.a2;
        }
        get bounds() {
            return this.slice.isExploded ? this.slice.b9 : this.slice.cc;
        }
        get startAngle() {
            return this.slice.a3;
        }
        get endAngle() {
            return this.slice.ax;
        }
        get fill() {
            return this.slice.b0;
        }
        get outline() {
            return this.slice.b1;
        }
    }
    SliceClickEventArgs.$t = /*@__PURE__*/ markType(SliceClickEventArgs, 'SliceClickEventArgs', EventArgs.$);
    return SliceClickEventArgs;
})();
/**
 * @hidden
 */
export let SliceEventArgs = /*@__PURE__*/ (() => {
    class SliceEventArgs extends EventArgs {
        constructor(a, b) {
            super();
            this._slice = null;
            this.d = false;
            this.c = false;
            this._originalEvent = null;
            this.slice = a;
            this.originalEvent = b;
            if (a == null) {
                return;
            }
            this.d = a.isSelected;
            this.c = a.isExploded;
        }
        get slice() {
            return this._slice;
        }
        set slice(a) {
            this._slice = a;
        }
        get isSelected() {
            return this.d;
        }
        set isSelected(a) {
            this.d = a;
            this.slice.ai.g1(this.slice, a);
        }
        get isExploded() {
            return this.c;
        }
        set isExploded(a) {
            this.c = a;
            this.slice.isExploded = a;
        }
        get isOthersSlice() {
            return this.slice.isOthersSlice;
        }
        get index() {
            return this.slice.a5;
        }
        get origin() {
            return this.slice.isExploded ? this.slice.b3 : this.slice.b7;
        }
        get radius() {
            return this.slice.isExploded ? this.slice.ay : this.slice.a2;
        }
        get bounds() {
            return this.slice.isExploded ? this.slice.b9 : this.slice.cc;
        }
        get startAngle() {
            return this.slice.a3;
        }
        get endAngle() {
            return this.slice.ax;
        }
        get fill() {
            return this.slice.b0;
        }
        get outline() {
            return this.slice.b1;
        }
        get dataContext() {
            if (this.slice != null) {
                if (this.slice.isOthersSlice) {
                    return this.slice.dataContext.toArray();
                }
                return this.slice.dataContext;
            }
            return null;
        }
        get originalEvent() {
            return this._originalEvent;
        }
        set originalEvent(a) {
            this._originalEvent = a;
        }
    }
    SliceEventArgs.$t = /*@__PURE__*/ markType(SliceEventArgs, 'SliceEventArgs', EventArgs.$);
    return SliceEventArgs;
})();
/**
 * @hidden
 */
export let PieLabel = /*@__PURE__*/ (() => {
    class PieLabel extends Control {
        constructor() {
            super();
            this.ah = null;
            this.ao = null;
            this.ai = 0;
            this.aj = null;
            this.ap = null;
            this.aq = null;
            this.ag = 0;
        }
        ak(a) {
            if (a.a.az == 3) {
                this.ao = a.b3(this);
                let b = typeCast(TextBlock.$, this.aj);
                let c = b.al;
                a.a.gy();
                let d = this.ah.isExploded ? this.ah.b5 : this.ah.b7;
                let e = GeometryUtil.m(d, this.ai, this.ah.a2 + a.a.da);
                let f = a.b4.width;
                if (a.z(b) + e.x > f && e.x < f) {
                    while (c.length > 0 && a.z(b) + e.x > f) {
                        c = c.substr(0, c.length - 1);
                        b.al = c;
                    }
                    if (c.length > 3) {
                        c = c.substr(0, c.length - 3);
                        c = c + "...";
                    }
                    else {
                        if (a.z("...") < this.ao.width) {
                            c = "...";
                        }
                        else {
                            c = stringEmpty();
                        }
                    }
                }
                let g = new TextBlock();
                g.al = c;
                this.aj = g;
            }
        }
        al() {
        }
        am() {
            this.ap._visibility = this.ah.ai.jd != 0 ? this.ah.ai.jd : this.ah.aj._visibility;
            let a;
            let b = this.ah.ai.db;
            let c = GeometryUtil.m(this.ah.b6(), this.ai, this.ah.a2);
            this.ap.an = c.x;
            this.ap.ap = c.y;
            if (this.ai < 90 || this.ai >= 270) {
                a = { $type: Point_$type, x: this.ao.left, y: (this.ao.top + this.ao.bottom) / 2 };
            }
            else {
                a = { $type: Point_$type, x: this.ao.right, y: (this.ao.top + this.ao.bottom) / 2 };
            }
            if (b > 0) {
                let d = GeometryUtil.g(c, a);
                if (b < d) {
                    a = GeometryUtil.o(a, c, b);
                }
                else {
                    a = c;
                }
            }
            this.ap.ao = a.x;
            this.ap.aq = a.y;
        }
        an() {
            this.aq._visibility = this.ah.ai.jd != 0 ? this.ah.ai.jd : this.ah.aj._visibility;
            let a = this.ah.b6();
            let b = this.aq.an.c._inner[0];
            let c = b._segments._inner[0];
            let d = this.ah.ai.db;
            let e = (this.ao.top + this.ao.bottom) / 2;
            let f = GeometryUtil.m(a, this.ai, this.ah.a2);
            let g = GeometryUtil.m(a, this.ai, this.ah.a2 + this.ah.ai.da / 2);
            let h;
            let i;
            let j;
            let k = e;
            if (this.ai < 90 && this.ai >= 0) {
                h = { $type: Point_$type, x: this.ao.left - 30, y: k };
                j = { $type: Point_$type, x: this.ao.left, y: e };
            }
            else if (this.ai < 180 && this.ai >= 90) {
                h = { $type: Point_$type, x: this.ao.right + 30, y: k };
                j = { $type: Point_$type, x: this.ao.right, y: e };
            }
            else if (this.ai < 270 && this.ai >= 180) {
                h = { $type: Point_$type, x: this.ao.right + 30, y: k };
                j = { $type: Point_$type, x: this.ao.right, y: e };
            }
            else {
                h = { $type: Point_$type, x: this.ao.left - 30, y: k };
                j = { $type: Point_$type, x: this.ao.left, y: e };
            }
            if (d > 0) {
                let l = GeometryUtil.g(f, j);
                if (d < l) {
                    i = GeometryUtil.o(j, f, d);
                    let m = g.x - f.x;
                    let n = g.y - f.y;
                    g = GeometryUtil.o(g, f, d);
                    let o = g.x - f.x;
                    let p = g.y - f.y;
                    if ((m > 0 && o < 0) || (m < 0 && o > 0) || (n > 0 && p < 0) || (n < 0 && p > 0)) {
                        g = f;
                    }
                    h = GeometryUtil.o(h, f, d);
                    let q = GeometryUtil.g(f, i) / GeometryUtil.g(f, j);
                    h.x = f.x + (h.x - f.x) * q;
                    h.y = f.y + (h.y - f.y) * q;
                }
                else {
                    this.aq._visibility = 1;
                    return;
                }
            }
            else {
                i = j;
            }
            if (this.ai < 180 && this.ai >= 0) {
                if (g.y > h.y) {
                    g.y = f.y;
                }
            }
            else {
                if (g.y < h.y) {
                    g.y = f.y;
                }
            }
            b._startPoint = f;
            if (this.ah.ai.a0 == 1) {
                c.e = f;
            }
            else {
                c.e = g;
            }
            c.f = h;
            c.g = i;
        }
    }
    PieLabel.$t = /*@__PURE__*/ markType(PieLabel, 'PieLabel', Control.$);
    return PieLabel;
})();
/**
 * @hidden
 */
export let PieChartBase = /*@__PURE__*/ (() => {
    class PieChartBase extends Control {
        a3() {
            return new PieChartBaseView(this);
        }
        gn(a) {
            this.a4 = a;
        }
        onDetachedFromUI() {
            this.a4.a1();
        }
        onAttachedToUI() {
            this.a4.ay();
        }
        constructor() {
            super();
            this.a4 = null;
            this.bz = false;
            this.b2 = false;
            this.b1 = false;
            this.b3 = false;
            this.b0 = false;
            this.b6 = false;
            this.b5 = false;
            this.b4 = false;
            this.a8 = null;
            this.ct = null;
            this.cv = null;
            this.cu = null;
            this.cw = null;
            this.dj = null;
            this.bp = null;
            this.dl = 0;
            this.dd = 0;
            this.di = 0;
            this.cn = null;
            this.cm = null;
            this.cl = null;
            this.c3 = 0;
            this.ck = null;
            this.a7 = null;
            this._xsr = null;
            this.bn = null;
            this.bo = null;
            this.au = new IndexCollection();
            this.av = new IndexCollection();
            this.cy = NaN;
            this.cx = 1;
            this._selectedItems = null;
            this.labelClick = null;
            this.selectedItemChanging = null;
            this.selectedItemsChanging = null;
            this.selectedItemChanged = null;
            this.selectedItemsChanged = null;
            this.sliceClick = null;
            this.bw = null;
            this.bv = null;
            this.i8 = null;
            this.ap = null;
            this.as = null;
            this.aq = null;
            this.ar = null;
            this.co = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.dm = null;
            this.sliceEnter = null;
            this.sliceLeave = null;
            this.sliceHover = null;
            this.dr = null;
            this.i8 = Rect.empty;
            let a = this.a3();
            this.gn(a);
            a.a2();
            this.ab = PieChartBase.$;
            this.cn = new List$1(Number_$type, 0);
            this.cm = new List$1(Number_$type, 0);
            this.cl = new List$1(Base.$, 0);
            this.a8 = (b, c) => this.gr(b, c.propertyName, c.oldValue, c.newValue);
            this.ct = (b, c) => {
                this.gy();
                this.gx();
            };
            this.cu = (b, c) => {
                if (this.b7) {
                    this.gq();
                    this.gp();
                    this.gy();
                    this.gw();
                }
            };
            this.cv = (b, c) => this.g0(c);
            this.cw = (b, c) => this.gg(c);
            this.dj = (b, c) => this.fw(c.action, c.position, c.count, c.propertyName);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, this.a8);
            let b = this.selectedSlices;
            b.collectionChanged = delegateCombine(b.collectionChanged, this.cv);
            this.b3 = true;
            let c = this.explodedSlices;
            c.collectionChanged = delegateCombine(c.collectionChanged, this.cu);
            this.b0 = true;
            this.selectedItems = new ObjectCollection(0);
            let d = this.selectedItems;
            d.collectionChanged = delegateCombine(d.collectionChanged, this.cw);
            this.bw = ((() => {
                let $ret = new Pool$1(Slice.$);
                $ret.create = runOn(this.a4, this.a4.g);
                $ret.activate = runOn(this.a4, this.a4.bf);
                $ret.disactivate = runOn(this.a4, this.a4.bh);
                $ret.destroy = runOn(this.a4, this.a4.bg);
                return $ret;
            })());
            this.bv = ((() => {
                let $ret = new Pool$1(PieLabel.$);
                $ret.create = runOn(this.a4, this.a4.d);
                $ret.activate = runOn(this.a4, this.a4.as);
                $ret.disactivate = runOn(this.a4, this.a4.au);
                $ret.destroy = runOn(this.a4, this.a4.at);
                return $ret;
            })());
            this.a7 = new PieChartSliceSelector(this);
            FastItemObjectColumn.m();
        }
        get bu() {
            return this.bp;
        }
        set bu(a) {
            if (this.bp != a) {
                let b = this.bp;
                this.bp = a;
                this.gt("ValueColumn", b, this.bp);
            }
        }
        get c0() {
            return Math.abs(this.c9) > 1 ? this.c9 : this.c9 * 100;
        }
        get XSRP() {
            if (this._xsr == null) {
                this._xsr = new SRProvider(this.a4.c.n);
            }
            return this._xsr;
        }
        get d8() {
            let a = this.XSRP.b1("InvalidLabelBinding");
            if (stringIsNullOrWhiteSpace(a)) {
                a = "There is no such value for the labels to bind.";
            }
            return a;
        }
        get c9() {
            return this.c(PieChartBase.ho);
        }
        set c9(a) {
            let b = a;
            if (isNaN_(a) || isInfinity(a)) {
                b = 0;
            }
            if (a < 0) {
                b = 0;
            }
            if (a > 100) {
                b = 100;
            }
            this.h(PieChartBase.ho, b);
        }
        get bq() {
            return this.bn;
        }
        set bq(a) {
            if (this.bn != a) {
                let b = this.bq;
                this.bn = a;
                this.gt("LabelColumn", b, this.bq);
            }
        }
        get br() {
            return this.bo;
        }
        set br(a) {
            if (this.bo != a) {
                let b = this.br;
                this.bo = a;
                this.gt("LegendLabelColumn", b, this.br);
            }
        }
        get cz() {
            let a = this.c4;
            if (isNaN_(a) || isInfinity(a) || a < 0) {
                return 0;
            }
            if (a > 1) {
                return 1;
            }
            return a;
        }
        get c2() {
            let a = this.df;
            if (isNaN_(a) || isInfinity(a) || a < 0) {
                return 0;
            }
            if (a > 1) {
                return 1;
            }
            return a;
        }
        get explodedSlices() {
            return this.au;
        }
        set explodedSlices(a) {
            let b = this.au;
            if (b != null) {
                let c = this.au;
                c.collectionChanged = delegateRemove(c.collectionChanged, this.cu);
            }
            this.b0 = false;
            this.au = a;
            if (this.au != null) {
                let d = this.au;
                d.collectionChanged = delegateCombine(d.collectionChanged, this.cu);
                this.b0 = true;
            }
            if (this.b7) {
                this.gq();
                this.gp();
                this.gy();
                this.gw();
            }
        }
        get selectedSlices() {
            return this.av;
        }
        set selectedSlices(a) {
            let b = this.av;
            b.collectionChanged = delegateRemove(b.collectionChanged, this.cv);
            this.b3 = false;
            this.av = a;
            if (this.av != null) {
                let c = this.av;
                c.collectionChanged = delegateCombine(c.collectionChanged, this.cv);
                this.b3 = true;
            }
            if (this.b8) {
                this.gq();
                this.gp();
                this.gy();
                this.gw();
                this.gx();
            }
        }
        get hb() {
            return typeCast(DataTemplate.$, this.c(PieChartBase.hz));
        }
        set hb(a) {
            this.h(PieChartBase.hz, a);
        }
        ca() {
            return this.a5 != null;
        }
        cb() {
            return this.a6 != null;
        }
        get de() {
            return this.cy;
        }
        set de(a) {
            let b = this.cy;
            this.cy = a;
            this.gt("PixelScalingRatio", b, this.cy);
        }
        get c1() {
            return this.cx;
        }
        set c1(a) {
            let b = this.cx;
            this.cx = a;
            this.gt("ActualPixelScalingRatio", b, this.cx);
        }
        get selectedItem() {
            return this.c(PieChartBase.im);
        }
        set selectedItem(a) {
            this.h(PieChartBase.im, a);
        }
        get selectedItems() {
            return this._selectedItems;
        }
        set selectedItems(a) {
            this._selectedItems = a;
        }
        gc(a, b) {
            if (this.labelClick != null) {
                this.labelClick(a, b);
            }
        }
        ge(a, b) {
            if (this.selectedItemChanging != null) {
                this.selectedItemChanging(a, b);
            }
        }
        gh(a, b) {
            if (this.selectedItemsChanging != null) {
                this.selectedItemsChanging(a, b);
            }
        }
        gd(a, b) {
            if (this.selectedItemChanged != null) {
                this.selectedItemChanged(a, b);
            }
        }
        gf(a, b) {
            if (this.selectedItemsChanged != null) {
                this.selectedItemsChanged(a, b);
            }
        }
        gj(a, b) {
            if (this.sliceClick != null) {
                this.sliceClick(a, b);
            }
        }
        fy(a, b) {
            if (!this.b0) {
                return;
            }
            if (!this.explodedSlices.contains(a.a5) && b) {
                this.explodedSlices.add(a.a5);
            }
            if (this.explodedSlices.contains(a.a5) && !b) {
                this.explodedSlices.remove(a.a5);
            }
        }
        g1(a, b) {
            this.b5 = true;
            if (!this.selectedSlices.contains(a.a5) && b) {
                this.selectedSlices.add(a.a5);
            }
            if (this.selectedSlices.contains(a.a5) && !b) {
                this.selectedSlices.remove(a.a5);
            }
            this.b5 = false;
        }
        g2(a) {
            this.a4.bd(a);
        }
        dn(a) {
            return this.a4.ae(a);
        }
        i7(a, b) {
            let c = new Rect(0, 0, 0, 0, 0);
            return c;
        }
        b9(a, b) {
            let c = a.ah;
            if (c == null) {
                return false;
            }
            let d = c.b6();
            let e = this.i2 == 1 ? c.a3 : c.ax;
            let f = this.i2 == 1 ? c.ax : c.a3;
            let g = false;
            let h = false;
            let i = GeometryUtil.m(d, e, c.a2);
            let j = GeometryUtil.m(d, f, c.a2);
            e = PieChartBase.c5(i.x, d.x, i.y, d.y);
            f = PieChartBase.c5(j.x, d.x, j.y, d.y);
            if (this.cc(c)) {
                h = true;
            }
            let k;
            k = MathUtil.g(a.ao.right - d.x, a.ao.top - d.y);
            if (k > c.a2) {
                return false;
            }
            k = MathUtil.g(a.ao.right - d.x, a.ao.bottom - d.y);
            if (k > c.a2) {
                return false;
            }
            k = MathUtil.g(a.ao.left - d.x, a.ao.top - d.y);
            if (k > c.a2) {
                return false;
            }
            k = MathUtil.g(a.ao.left - d.x, a.ao.bottom - d.y);
            if (k > c.a2) {
                return false;
            }
            if (h) {
                return true;
            }
            if (e > f) {
                e = e - 360;
                g = true;
            }
            let l;
            l = PieChartBase.c5(a.ao.right, d.x, a.ao.top, d.y);
            if (g && l > 180 && l < 360) {
                l = l - 360;
            }
            if (l < e || l > f) {
                return false;
            }
            l = PieChartBase.c5(a.ao.right, d.x, a.ao.bottom, d.y);
            if (g && l > 180 && l < 360) {
                l = l - 360;
            }
            if (l < e || l > f) {
                return false;
            }
            l = PieChartBase.c5(a.ao.left, d.x, a.ao.top, d.y);
            if (g && l > 180 && l < 360) {
                l = l - 360;
            }
            if (l < e || l > f) {
                return false;
            }
            l = PieChartBase.c5(a.ao.left, d.x, a.ao.bottom, d.y);
            if (g && l > 180 && l < 360) {
                l = l - 360;
            }
            if (l < e || l > f) {
                return false;
            }
            return true;
        }
        static dg(a) {
            let b = Math.round(a * Math.pow(10, 5)) / Math.pow(10, 5);
            return b;
        }
        cc(a) {
            return PieChartBase.dg(Math.abs(a.ax - a.a3)) == 360;
        }
        static c5(a, b, c, d) {
            let e = MathUtil.g(a - b, c - d);
            let f = Math.asin((c - d) / e) * 180 / Math.PI;
            if (a < b) {
                f = 180 - f;
            }
            if (a > b) {
                f = 360 + f;
            }
            if (f == 360) {
                f = 0;
            }
            return GeometryUtil.i(f);
        }
        static g7(a) {
            let b = new Array(a.count);
            for (let c = 0; c < a.count; c++) {
                let d = a._inner[c];
                let e = d.ah;
                let f = GeometryUtil.m(e.b7, d.ai, e.a2);
                b[c] = f.y;
            }
            for (let g = 0; g < a.count; g++) {
                for (let h = g + 1; h < a.count; h++) {
                    if (b[g] >= b[h]) {
                        let i = a._inner[g];
                        a._inner[g] = a._inner[h];
                        a._inner[h] = i;
                        let j = b[g];
                        b[g] = b[h];
                        b[h] = j;
                    }
                }
            }
        }
        gz(a) {
            if (a.count == 0) {
                return;
            }
            let b = this.a4.b4.width;
            let c = this.a4.b4.height;
            let d = a.count;
            let e = a._inner[0].ah.a2;
            let f = a._inner[0].ah.b6();
            let g = true;
            let h = 0;
            let i = Number.POSITIVE_INFINITY;
            let j = Number.NEGATIVE_INFINITY;
            for (let k = 0; k < d - 1; k++) {
                let l = a._inner[k];
                let m = a._inner[k + 1];
                if (l.ao.intersectsWith(m.ao)) {
                    h++;
                }
            }
            let n = 0;
            for (let o of fromEnum(a)) {
                i = Math.min(i, o.ao.height);
                j = Math.max(j, o.ao.height);
                n += o.ao.height;
            }
            if (n > c) {
                g = false;
            }
            if (g && h > 0) {
                for (let p = 0; p < d - 1; p++) {
                    for (let q = p + 1; q < d; q++) {
                        let r = a._inner[p];
                        let s = a._inner[q];
                        if (r.ao.intersectsWith(s.ao)) {
                            let t = s.ao;
                            t.y = Math.min(r.ao.bottom + 0.01, c - i);
                            let u = this.da + e;
                            let v = Math.abs(f.y - (t.y + i / 2));
                            let w = Math.sqrt(Math.abs(u * u - v * v));
                            let x = GeometryUtil.i(s.ai);
                            if (x > 90 && x < 270) {
                                w = (t.width + w) * -1;
                            }
                            t.x = f.x + w;
                            s.ao = t;
                        }
                    }
                }
                for (let y = d - 1; y > 0; y--) {
                    for (let z = y - 1; z >= 0; z--) {
                        let aa = a._inner[y];
                        let ab = a._inner[z];
                        if (aa.ao.intersectsWith(ab.ao)) {
                            let ac = ab.ao;
                            ac.y = Math.max(aa.ao.top - i - 0.01, 0);
                            let ad = this.da + e;
                            let ae = Math.abs(f.y - (ac.y + i / 2));
                            let af = Math.sqrt(Math.abs(ad * ad - ae * ae));
                            let ag = GeometryUtil.i(ab.ai);
                            if (ag > 90 && ag < 270) {
                                af = (ac.width + af) * -1;
                            }
                            ac.x = f.x + af;
                            ab.ao = ac;
                        }
                    }
                }
            }
            for (let ah of fromEnum(a)) {
                let ai = ah.ao;
                if (ai.left > b || ai.right < 0) {
                    ah._visibility = 1;
                    if (this.a0 == 0) {
                        ah.ap._visibility = 1;
                    }
                    else {
                        ah.aq._visibility = 1;
                    }
                }
                else if (ai.left < 0) {
                    let aj = Math.abs(ai.x);
                    ai.x = 0;
                    if (aj > ai.width) {
                        ai.width = 0;
                    }
                    else {
                    }
                    ah.ao = ai;
                }
                else if (ai.right > b) {
                    let ak = ai.right - b;
                    if (ak > ai.width) {
                        ai.width = 0;
                    }
                    else {
                        ai.width = ai.width - ak;
                    }
                    ah.ao = ai;
                }
            }
        }
        fw(a, b, c, d) {
            this.gv();
        }
        gv() {
            this.go();
            this.gq();
            this.gp();
            this.gy();
            this.gw();
            this.gx();
            this.a4.bs();
        }
        go() {
            this.di = 0;
            this.dd = 0;
            this.cn.clear();
            this.cm.clear();
            this.cl.clear();
            if (this.actualItemsSource == null || this.bl == null) {
                return;
            }
            if (this.bu == null || this.bu.count == 0) {
                return;
            }
            for (let a of fromEnum(this.bu)) {
                if (isNaN_(a) || isInfinity(a) || a <= 0) {
                    continue;
                }
                this.di = this.di + a;
            }
            for (let b = 0; b < this.bu.count; b++) {
                let c = this.bu.item(b);
                let d = this.a1 == 0 ? c <= 0 : c < 0;
                if (isNaN_(c) || isInfinity(c) || d) {
                    continue;
                }
                let e = this.a2 == 1 ? c / this.di : c;
                let f = this.a2 == 1 ? this.dc / 100 : this.dc;
                let g = c > 0 || (this.dc > 0 && this.a1 != 1);
                if (e <= f && g) {
                    this.dd = this.dd + c;
                    this.cm.add(b);
                    this.cl.add1(this.bl.item(b));
                }
                else {
                    this.cn.add(b);
                }
            }
        }
        gq() {
            if (this.actualItemsSource == null || this.bl == null) {
                this.bw.count = 0;
                return;
            }
            let a = this.cn.count;
            let b = this.cm.count > 0;
            let c = PieChartBase.dg(this.c3);
            let d = PieChartBase.dg(this.c3);
            if (b) {
                a++;
            }
            this.dl = a;
            for (let e = 0; e < a; e++) {
                let f = false;
                let g;
                if (e == a - 1 && b) {
                    g = this.dd;
                    f = true;
                }
                else {
                    g = this.bu.item(this.cn._inner[e]);
                }
                if (this.i2 == 1) {
                    d += PieChartBase.dg(Math.abs(g) * 360 / this.di);
                }
                else {
                    d -= PieChartBase.dg(Math.abs(g) * 360 / this.di);
                }
                let h = this.bw.item(e);
                h.aw = true;
                h.a3 = c;
                h.ax = d;
                h.a1 = this.c0;
                h.a0 = this.c0;
                h.isOthersSlice = f;
                h.ay = this.cz;
                h.a5 = e;
                h.dataContext = f ? this.cl : this.bl.item(this.cn._inner[e]);
                this.a7.j(h);
                h.isExploded = this.b0 ? this.explodedSlices.contains(e) : false;
                c = d;
                h.aw = false;
            }
            this.bw.count = a;
        }
        fg() {
            let a = this.XSRP.b7;
            if (stringIsNullOrWhiteSpace(a)) {
                a = "Others";
            }
            return this.e5 != null ? this.e5 : a;
        }
        gp() {
            if (this.actualItemsSource == null || this.bl == null) {
                this.bv.count = 0;
                return;
            }
            if (this.bq == null || this.bq.count == 0 || this.az == 0) {
                this.bv.count = 0;
            }
            let a = this.cn.count;
            if (this.cm.count > 0) {
                a++;
            }
            this.a4.av();
            let b = 0;
            for (let c = 0; c < a; c++) {
                let d = stringEmpty();
                let e = false;
                let f;
                let g = null;
                if (c == a - 1 && this.cm.count > 0) {
                    f = this.fg();
                    e = true;
                    if (this.ca() || this.ap != null || this.as != null) {
                        let h = ((() => {
                            let $ret = new PieSliceDataContext();
                            $ret.series = this;
                            $ret.item = e ? this.cl : this.bl.item(this.cn._inner[c]);
                            $ret.percentValue = this.c8(this.bw.item(c));
                            $ret.isOthersSlice = e;
                            return $ret;
                        })());
                        if (f != null) {
                            h.itemLabel = f.toString();
                            h.legendLabel = f.toString();
                        }
                        let i = h;
                        i = i.flatten();
                        if (this.ap != null && !e) {
                            f = this.ap.i(i);
                        }
                        else if (this.as != null && e) {
                            f = this.as.i(i);
                        }
                        else if (this.ca()) {
                            f = this.a5(i);
                        }
                    }
                    if (null != f) {
                        d = f.toString();
                    }
                    else {
                        d = this.fg();
                    }
                }
                else {
                    if (this.bq != null && this.bq.count >= this.cn.count) {
                        f = this.bq.item(this.cn._inner[c]);
                    }
                    else {
                        f = null;
                    }
                    g = (this.br != null && this.br.count > 0) ? this.br.item(this.cn._inner[c]) : null;
                    if (this.ca() || this.ap != null || this.as != null) {
                        let j = ((() => {
                            let $ret = new PieSliceDataContext();
                            $ret.series = this;
                            $ret.item = e ? this.cl : this.bl.item(this.cn._inner[c]);
                            $ret.itemLabel = f != null ? f.toString() : null;
                            $ret.legendLabel = g != null ? g.toString() : f != null ? f.toString() : null;
                            $ret.percentValue = this.c8(this.bw.item(c));
                            $ret.isOthersSlice = e;
                            return $ret;
                        })());
                        let k = j;
                        k = k.flatten();
                        let formattedLabel_ = null;
                        if ((this.ap != null && !e) || (this.as != null && e)) {
                            if (e) {
                                formattedLabel_ = this.as.i(k);
                            }
                            else {
                                formattedLabel_ = this.ap.i(k);
                            }
                        }
                        else {
                            formattedLabel_ = this.a5(k);
                        }
                        if (null == formattedLabel_ && this.bq != null && this.bq.count > 0) {
                            f = this.bq.item(this.cn._inner[c]);
                        }
                        else {
                            f = formattedLabel_;
                        }
                    }
                    let label_ = f;
                    let errorMsg_ = this.d8;
                    if (label_ === undefined) {
                        throw new Error(errorMsg_);
                    }
                    ;
                    if (null != f) {
                        d = f.toString();
                    }
                    else {
                        d = null;
                    }
                }
                if (this.bq != null && this.bq.count > 0) {
                    let l = this.bv.item(c);
                    let m = this.bw.item(c);
                    m.aj = l;
                    l.ai = GeometryUtil.i((m.a3 + m.ax) / 2);
                    l.ah = m;
                    l.aj = ((() => {
                        let $ret = new TextBlock();
                        $ret.al = d;
                        return $ret;
                    })());
                    if (this.hb == null) {
                        l.dataContext = e ? this.cl : this.bl.item(this.cn._inner[c]);
                        l.ak(this.a4);
                    }
                    else {
                    }
                    l._visibility = 0;
                    l.ao = this.a4.b3(l);
                    b++;
                }
                if (this.br != null && this.br.count > 0) {
                    let n = this.bw.item(c);
                    n.bf = g != null ? g.toString() : null;
                }
            }
            this.bv.count = b;
        }
        gy() {
            if (this.actualItemsSource == null || this.bl == null) {
                return;
            }
            let a = this.a4.b5();
            this.i8 = new Rect(0, 0, 0, a.width, a.height);
            let b = this.a4.ab();
            let c = this.a4.aa(this.jb);
            b = isNaN_(b) ? 0 : b / 2;
            c = isNaN_(c) ? 0 : c / 2;
            b = Math.max(c, b);
            let d = Math.min(a.width / 2, a.height / 2);
            let e = { $type: Point_$type, x: a.width / 2, y: a.height / 2 };
            let f = d * this.c2;
            let g = f + b;
            if (g > d) {
                let h = g - d;
                f = f - h;
            }
            for (let i of fromEnum(this.bw.a)) {
                let j = GeometryUtil.l(a.width, a.height, true, (i.a3 + i.ax) / 2, f * this.cz);
                i.aw = true;
                i.a1 = this.c0;
                i.a0 = this.c0;
                i.a2 = f;
                i.ay = this.cz;
                i.b7 = e;
                i.b5 = j;
                this.g2(i);
                i.aw = false;
            }
            this.a4.bs();
        }
        gw() {
            let a = this.a4.b4.width;
            let b = this.a4.b4.height;
            if (b == 0 || a == 0) {
                return;
            }
            if (this.bv.a.count == 0 || this.az == 0) {
                this.bv.count = 0;
                return;
            }
            let c = new List$1(PieLabel.$, 0);
            let d = new List$1(PieLabel.$, 0);
            let e = new List$1(PieLabel.$, 0);
            let f = new List$1(PieLabel.$, 0);
            for (let g of fromEnum(this.bv.a)) {
                let h = g.ah;
                if (h == null) {
                    continue;
                }
                let i = h.b6();
                let j = g.ao.width;
                let k = g.ao.height;
                if (this.az == 1 || this.az == 4) {
                    let l = h.a2 * h.a1 / 100;
                    let m = GeometryUtil.m(i, g.ai, h.a2 - (h.a2 - l) / 2);
                    g.ao = new Rect(0, m.x - j / 2, m.y - k / 2, j, k);
                    let n = this.b9(g, m);
                    if (n || this.az == 1) {
                        if (this.ix == null) {
                            h.f(Slice.bp);
                        }
                        else {
                            h.b2 = this.ix;
                        }
                        h.au = true;
                        e.add(g);
                        g.ag = 1;
                        if (g.ah.ai.a0 == 0) {
                            g.ap._visibility = 1;
                        }
                        else {
                            g.aq._visibility = 1;
                        }
                        if (!n && this.az == 1) {
                            g._visibility = 1;
                        }
                        else {
                            g._visibility = 0;
                        }
                        continue;
                    }
                }
                if (this.az == 2 || this.az == 4) {
                    let o = PieChartBase.c6(i, h.a2, g);
                    let p = GeometryUtil.m(i, g.ai, o);
                    g.ao = new Rect(0, p.x - j / 2, p.y - k / 2, j, k);
                    let q = this.b9(g, p);
                    if (q || this.az == 2) {
                        if (this.ix == null) {
                            h.f(Slice.bp);
                        }
                        else {
                            h.b2 = this.ix;
                        }
                        h.au = true;
                        f.add(g);
                        g.ag = 2;
                        if (g.ah.ai.a0 == 0) {
                            g.ap._visibility = 1;
                        }
                        else {
                            g.aq._visibility = 1;
                        }
                        if (!q && this.az == 2) {
                            g._visibility = 1;
                        }
                        else {
                            g._visibility = 0;
                        }
                        continue;
                    }
                }
                if (this.iy == null) {
                    h.f(Slice.bp);
                }
                else {
                    h.b2 = this.iy;
                }
                h.au = false;
                let r = GeometryUtil.m(i, g.ai, h.a2 + this.da);
                g.ag = 3;
                g._visibility = 0;
                g.al();
                if (g.ai < 90 && g.ai >= 0) {
                    g.ao = new Rect(0, r.x, r.y, j, k);
                    c.add(g);
                }
                else if (g.ai < 180 && g.ai >= 90) {
                    g.ao = new Rect(0, r.x - j, r.y, j, k);
                    d.add(g);
                }
                else if (g.ai < 270 && g.ai >= 180) {
                    g.ao = new Rect(0, r.x - j, r.y - k, j, k);
                    d.add(g);
                }
                else {
                    g.ao = new Rect(0, r.x, r.y - k, j, k);
                    c.add(g);
                }
                if (g.ao.y < 0) {
                    g.ao = new Rect(0, g.ao.x, 0, g.ao.width, g.ao.height);
                }
                if (g.ao.bottom > b) {
                    g.ao = new Rect(0, g.ao.x, b - g.ao.height, g.ao.width, g.ao.height);
                }
            }
            PieChartBase.g7(c);
            this.gz(c);
            PieChartBase.g7(d);
            this.gz(d);
            for (let s of fromEnum(e)) {
                this.a4.bn(s, s.ao.x, s.ao.y);
            }
            for (let t of fromEnum(f)) {
                this.a4.bn(t, t.ao.x, t.ao.y);
            }
            for (let u of fromEnum(c)) {
                this.a4.bn(u, u.ao.x, u.ao.y);
                if (u.ah.ai.a0 == 0) {
                    u.am();
                }
                else {
                    u.an();
                }
            }
            for (let v of fromEnum(d)) {
                this.a4.bn(v, v.ao.x, v.ao.y);
                if (v.ah.ai.a0 == 0) {
                    v.am();
                }
                else {
                    v.an();
                }
            }
            this.a4.bs();
        }
        static c6(a, b, c) {
            let d = c.ai * Math.PI / 180;
            let e = 1;
            let f = GeometryUtil.m({ $type: Point_$type, x: 0, y: 0 }, c.ai, e);
            let g = PieChartBase.i4(c);
            let h = Math.sqrt(g.x * g.x + g.y * g.y);
            let i = { $type: Point_$type, x: g.x / h, y: g.y / h };
            let j = PieChartBase.c7(f, i);
            let k = h / b;
            let l = j * k;
            let m = l;
            let n = GeometryUtil.f({ $type: Point_$type, x: 0, y: 0 }, f);
            let o = GeometryUtil.f({ $type: Point_$type, x: 0, y: 0 }, i);
            if (o < n) {
                m = -m;
            }
            let p = GeometryUtil.m(a, (d + m) * 180 / Math.PI, b);
            let q = PieChartBase.i3(c, p);
            let r = Math.sqrt((q.x - a.x) * (q.x - a.x) + (q.y - a.y) * (q.y - a.y));
            let s = r - 5;
            return s;
        }
        static i3(a, b) {
            let c = GeometryUtil.i(a.ai);
            let d = a.ao.width / 2;
            let e = a.ao.height / 2;
            if (c >= 0 && c <= 90) {
                return { $type: Point_$type, x: b.x - d, y: b.y - e };
            }
            if (c >= 90 && c <= 180) {
                return { $type: Point_$type, x: b.x + d, y: b.y - e };
            }
            if (c >= 180 && c <= 270) {
                return { $type: Point_$type, x: b.x + d, y: b.y + e };
            }
            return { $type: Point_$type, x: b.x - d, y: b.y + e };
        }
        static c7(a, b) {
            let c = a.x * b.x + a.y * b.y;
            let d = Math.sqrt(a.x * a.x + a.y * a.y);
            let e = Math.sqrt(b.x * b.x + b.y * b.y);
            let f = Math.acos(c / (d * e));
            return f;
        }
        static i4(a) {
            let b = GeometryUtil.i(a.ai);
            let c = a.ao.width / 2;
            let d = a.ao.height / 2;
            if (b >= 0 && b <= 90) {
                return { $type: Point_$type, x: c, y: d };
            }
            if (b >= 90 && b <= 180) {
                return { $type: Point_$type, x: -c, y: d };
            }
            if (b >= 180 && b <= 270) {
                return { $type: Point_$type, x: -c, y: -d };
            }
            return { $type: Point_$type, x: c, y: -d };
        }
        gx() {
            if (this.legend == null || !this.legend.isItemwise) {
                return;
            }
            if ((this.bq == null || this.bq.count == 0) && (this.br == null || this.br.count == 0)) {
                this.legend.clearLegendItemsForSeries(this);
                return;
            }
            this.ck = new List$1(UIElement.$, 0);
            for (let a of fromEnum(this.bw.a)) {
                let b = new ContentControl();
                let c = this.dn(a);
                let d = this.a4.bu(a);
                let e = this.a4.bv(a);
                b.content = ((() => {
                    let $ret = new PieSliceDataContext();
                    $ret.series = this;
                    $ret.slice = a;
                    $ret.item = a.dataContext;
                    $ret.itemBrush = d;
                    $ret.outline = e;
                    $ret.thickness = a.a4;
                    $ret.itemLabel = c != null ? c.toString() : null;
                    $ret.legendLabel = a.isOthersSlice ? this.fg() : a.bf != null ? a.bf : (c != null ? c.toString() : null);
                    $ret.percentValue = this.c8(a);
                    $ret.isOthersSlice = a.isOthersSlice;
                    return $ret;
                })());
                let f = b.content;
                if (this.cb() || this.aq != null || this.ar != null) {
                    let g = null;
                    if (this.cb()) {
                        g = this.a6(b.content);
                    }
                    if (this.aq != null && !f.isOthersSlice) {
                        g = this.aq.i(b.content);
                    }
                    if (this.ar != null && f.isOthersSlice) {
                        g = this.ar.i(b.content);
                    }
                    if (g != null) {
                        f.legendLabel = g.toString();
                    }
                }
                if (this.legendItemTemplate != null) {
                    b.ah = this.legendItemTemplate;
                }
                this.ck.add(b);
            }
            if (this.legend.isItemwise) {
                let h = this.legend;
                h.createItemwiseLegendItems(this.ck, this);
            }
        }
        bk() {
            let a = new PieChartVisualData();
            a.viewport = RectData.b(this.i8);
            this.a4.ao(a);
            for (let b = 0; b < this.bw.count; b++) {
                let c = this.bw.item(b).am();
                a.slices.add(c);
                if (this.bw.item(b).isOthersSlice) {
                    a.othersSlice = this.bw.item(b).am();
                }
            }
            a.others = this.cl;
            a.name = this.name;
            a.radiusFactor = this.c2;
            a.leaderLineMargin = this.db;
            return a;
        }
        d3() {
            let a = this.bk();
            a.scaleByViewport();
            return a.serialize();
        }
        bs(a) {
            let b = null;
            return this.bl.registerColumn(a, b, false);
        }
        bt(a) {
            let b = null;
            return this.bl.registerColumnObject(a, b, false);
        }
        gr(a, b, c, d) {
            switch (b) {
                case PieChartBase.$$p[14]:
                    this.actualItemsSource = this.cr();
                    break;
                case PieChartBase.$$p[45]:
                case PieChartBase.$$p[46]:
                    this.ix = this.i1(this.iz);
                    this.iy = this.i1(this.i0);
                    this.ak = this.ao(this.am);
                    this.al = this.ao(this.al);
                    this.actualItemsSource = this.cr();
                    break;
                case PieChartBase.$$p[1]:
                    if (this.cg) {
                        this.ak = this.ao(this.am);
                        this.al = this.ao(this.al);
                        this.ix = this.i1(this.iz);
                        this.iy = this.i1(this.i0);
                    }
                    this.bl = ((() => {
                        let $ret = new FastItemsSource();
                        $ret.e = d;
                        return $ret;
                    })());
                    break;
                case PieChartBase.$$p[16]:
                case PieChartBase.$$p[17]:
                    if (this.ee != null) {
                        this.ap = new BindingFormatter();
                        this.ap.j = this.ee;
                        this.ap.d = this.ag;
                    }
                    else {
                        this.ap = null;
                    }
                    break;
                case PieChartBase.$$p[39]:
                case PieChartBase.$$p[40]:
                    if (this.e9 != null) {
                        this.as = new BindingFormatter();
                        this.as.j = this.e9;
                        this.as.d = this.aj;
                    }
                    else {
                        this.as = null;
                    }
                    break;
                case PieChartBase.$$p[29]:
                case PieChartBase.$$p[30]:
                    if (this.ev != null) {
                        this.aq = new BindingFormatter();
                        this.aq.j = this.ev;
                        this.aq.d = this.ah;
                    }
                    else {
                        this.aq = null;
                    }
                    break;
                case PieChartBase.$$p[32]:
                case PieChartBase.$$p[33]:
                    if (this.e0 != null) {
                        this.ar = new BindingFormatter();
                        this.ar.j = this.e0;
                        this.ar.d = this.ai;
                    }
                    else {
                        this.ar = null;
                    }
                    break;
                case PieChartBase.$$p[9]:
                    if (typeCast(FastItemsSource.$, c) != null) {
                        let e = c;
                        e.event = delegateRemove(e.event, this.dj);
                        this.b1 = false;
                        c.deregisterColumn(this.bu);
                        c.deregisterColumn(this.bq);
                        this.bu = null;
                        this.bq = null;
                        this.selectedItem = null;
                        this.selectedItems.clear();
                        if (this.selectedSlices != null) {
                            this.selectedSlices.clear();
                        }
                        (typeCast(FastItemsSource.$, c)).deregisterColumn(this.br);
                        this.br = null;
                    }
                    if (typeCast(FastItemsSource.$, d) != null) {
                        let f = d;
                        f.event = delegateCombine(f.event, this.dj);
                        this.b1 = true;
                        this.bu = this.bs(this.fh(this.fu));
                        this.bq = this.bt(this.ff(this.ei));
                        this.br = this.bt(this.ey);
                        this.gq();
                        if (this.selectedItem != null || this.selectedItems.count > 0) {
                            this.g9();
                        }
                        else if (this.selectedSlices != null && this.selectedSlices.count > 0) {
                            this.ha();
                        }
                    }
                    this.gv();
                    break;
                case PieChartBase.$$p[51]:
                    if (this.bl != null) {
                        this.bl.deregisterColumn(this.bu);
                        this.bu = this.bs(this.fh(this.fu));
                    }
                    break;
                case PieChartBase.$$p[31]:
                    if (this.bl != null) {
                        this.bl.deregisterColumn(this.br);
                        this.br = this.bt(this.ey);
                        this.gp();
                        this.gw();
                        this.gx();
                    }
                    break;
                case PieChartBase.$$p[11]:
                    this.gx();
                    break;
                case PieChartBase.$$p[10]:
                case PieChartBase.$$p[19]:
                    if (this.bl != null) {
                        this.bl.deregisterColumn(this.bq);
                        this.bq = this.bt(this.ff(this.ei));
                        this.gp();
                        this.gw();
                        this.gx();
                    }
                    break;
                case PieChartBase.$$p[47]:
                    this.c3 = d;
                    this.gq();
                    this.gp();
                    this.gy();
                    this.gw();
                    break;
                case PieChartBase.$$p[49]:
                    this.a4.bq(this.dq);
                    break;
                case PieChartBase.$$p[34]:
                    let g = typeCast(IChartLegend_$type, c);
                    if (g != null) {
                        g.clearLegendItemsForSeries(this);
                    }
                    this.gx();
                    break;
                case PieChartBase.$$p[27]:
                case PieChartBase.$$p[28]:
                    this.gx();
                    break;
                case PieChartBase.$$p[42]:
                case PieChartBase.$$p[8]:
                case PieChartBase.$$p[48]:
                    this.gq();
                    this.gp();
                    this.gy();
                    this.gw();
                    break;
                case PieChartBase.$$p[35]:
                case PieChartBase.$$p[43]:
                    this.gy();
                    this.gx();
                    break;
                case PieChartBase.$$p[7]:
                    this.ak = this.ao(this.am);
                    break;
                case PieChartBase.$$p[41]:
                    this.al = this.ao(this.an);
                    break;
                case PieChartBase.$$p[0]:
                    if (c != null) {
                        let h = c;
                        h.collectionChanged = delegateRemove(h.collectionChanged, this.ct);
                        this.bz = false;
                    }
                    if (d != null) {
                        let i = d;
                        i.collectionChanged = delegateCombine(i.collectionChanged, this.ct);
                        this.bz = true;
                    }
                    this.gy();
                    this.gx();
                    break;
                case PieChartBase.$$p[4]:
                    if (c != null) {
                        let j = c;
                        j.collectionChanged = delegateRemove(j.collectionChanged, this.ct);
                        this.b2 = false;
                    }
                    if (d != null) {
                        let k = d;
                        k.collectionChanged = delegateCombine(k.collectionChanged, this.ct);
                        this.b2 = true;
                    }
                    this.gy();
                    this.gx();
                    break;
                case "ValueColumn":
                case PieChartBase.$$p[37]:
                case PieChartBase.$$p[38]:
                    this.gv();
                    this.g9();
                    this.ha();
                    break;
                case PieChartBase.$$p[5]:
                case PieChartBase.$$p[6]:
                    this.gv();
                    break;
                case PieChartBase.$$p[21]:
                    this.gp();
                    this.gw();
                    this.a4.bs();
                    break;
                case PieChartBase.$$p[18]:
                    this.ix = this.i1(this.iz);
                    break;
                case PieChartBase.$$p[20]:
                    this.iy = this.i1(this.i0);
                    break;
                case PieChartBase.$$p[2]:
                case PieChartBase.$$p[3]:
                case PieChartBase.$$p[15]:
                    this.gp();
                    this.gw();
                    break;
                case PieChartBase.$$p[36]:
                    this.gp();
                    this.gw();
                    this.gx();
                    break;
                case PieChartBase.$$p[25]:
                    this.gw();
                    break;
                case PieChartBase.$$p[23]:
                    this.gw();
                    break;
                case "TextStyle":
                    this.a4.bi();
                    break;
                case "PixelScalingRatio":
                    if (isNaN_(DeviceUtils.a(this.de))) {
                        this.c1 = 1;
                    }
                    else {
                        this.c1 = DeviceUtils.a(this.de);
                    }
                    break;
                case "ActualPixelScalingRatio":
                    this.a4.a4();
                    break;
                case "LabelTemplate":
                    this.gp();
                    this.gw();
                    break;
                case PieChartBase.$$p[24]:
                case PieChartBase.$$p[22]:
                    this.bv.c(runOn(this.a4, this.a4.bm));
                    this.gw();
                    break;
                case PieChartBase.$$p[13]:
                    this.a4.a3();
                    break;
                case "InnerExtent":
                    this.gv();
                    break;
                case PieChartBase.$$p[26]:
                    this.gv();
                    break;
                case "SelectedItem":
                    if (!this.b5) {
                        this.gq();
                        this.gy();
                        this.gx();
                    }
                    break;
                case PieChartBase.$$p[44]:
                    if (EnumUtil.getEnumValue(SliceSelectionMode_$type, d) == 1 && this.selectedItems != null && this.selectedItems.count > 1) {
                        this.selectedItems.clear();
                    }
                    else if (EnumUtil.getEnumValue(SliceSelectionMode_$type, d) == 2 && this.selectedItem != null && this.selectedItems != null) {
                        if (!this.selectedItems.contains1(this.selectedItem)) {
                            if (typeCast(PieSliceOthersContext.$, this.selectedItem) !== null) {
                                let l = typeCast(PieSliceOthersContext.$, this.selectedItem);
                                for (let m of fromEn(l.data)) {
                                    this.selectedItems.add1(m);
                                }
                            }
                            else {
                                this.selectedItems.add1(this.selectedItem);
                            }
                            this.ha();
                        }
                    }
                    this.g9();
                    this.gq();
                    this.gy();
                    break;
            }
        }
        ao(a) {
            if (!this.cg || !this.ch || this.itemsSource != null) {
                return a;
            }
            if (a == null) {
                return null;
            }
            let b = new BrushCollection();
            for (let c of fromEnum(a)) {
                let d = BrushUtil.s(c);
                b.add(d);
            }
            return b;
        }
        i1(a) {
            if (!this.cg || !this.ch || this.itemsSource != null) {
                return a;
            }
            let b = BrushUtil.g(0, 0, 0, 0);
            return b;
        }
        ff(a) {
            if (this.cg && this.itemsSource == null) {
                return "Label";
            }
            return a;
        }
        fh(a) {
            if (this.cg && this.itemsSource == null) {
                return "Value";
            }
            return a;
        }
        cr() {
            if (this.itemsSource != null) {
                return this.itemsSource;
            }
            if (!this.cg) {
                return null;
            }
            if (this.co == null) {
                this.co = PieChartMockDataGenerator.a();
            }
            return this.co;
        }
        g0(a) {
            if (this.b6) {
                return;
            }
            this.ha();
            if (this.b8) {
                this.gq();
                this.gy();
                this.gx();
            }
        }
        gg(a) {
            if (a.action == 4 && a.newItems == null && a.oldItems == null) {
                return;
            }
            if (this.b5) {
                return;
            }
            this.g9();
            if (this.b8) {
                this.gq();
                this.gy();
                this.gx();
            }
            let b = new ObjectCollection(0);
            if (a.oldItems != null) {
                for (let c = 0; c < a.oldItems.count; c++) {
                    b.add1(a.oldItems.item(c));
                }
            }
            let d = new ObjectCollection(0);
            if (a.newItems != null) {
                for (let e = 0; e < a.newItems.count; e++) {
                    d.add1(a.newItems.item(e));
                }
            }
            let f = this.selectedItems;
            this.gf(this, new SelectedItemsChangedEventArgs(b, d, f));
        }
        gt(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        ha() {
            if (this.actualItemsSource == null || this.bw.a.count == 0) {
                return;
            }
            this.b5 = true;
            let a = this.selectedSlices.count;
            if (a == 0) {
                if (this.selectedItems.count > 0) {
                    this.selectedItems.clear();
                }
                if (this.selectedItem != null) {
                    this.selectedItem = null;
                }
            }
            if (this.bj == 1) {
                if (a != 0) {
                    let b = this.bw.a._inner[this.selectedSlices._inner[a - 1]];
                    if (b.isOthersSlice) {
                        this.selectedItem = ((() => {
                            let $ret = new PieSliceOthersContext();
                            $ret.data = typeCast(IList_$type, b.dataContext);
                            $ret.slice = b;
                            return $ret;
                        })());
                    }
                    else {
                        this.selectedItem = b.dataContext;
                    }
                }
            }
            else if (this.bj == 2) {
                if (a != 0) {
                    this.selectedItems.clear();
                    for (let c of fromEnum(this.selectedSlices)) {
                        let d = this.bw.a._inner[c];
                        if (d.isOthersSlice) {
                            let e = typeCast(IEnumerable_$type, d.dataContext);
                            for (let f of fromEn(e)) {
                                this.a7.e(f);
                            }
                        }
                        else {
                            this.a7.e(d.dataContext);
                        }
                    }
                    this.selectedItem = this.bw.a._inner[this.selectedSlices._inner[a - 1]].dataContext;
                }
            }
            this.b5 = false;
        }
        g9() {
            if (this.actualItemsSource == null || this.bw.a.count == 0) {
                return;
            }
            this.b6 = true;
            this.selectedSlices.clear();
            for (let a of fromEnum(this.bw.a)) {
                if (this.a7.d(a)) {
                    this.selectedSlices.add(a.a5);
                }
            }
            this.b6 = false;
        }
        g5(a, b) {
            this.g6(a, b, false);
        }
        g6(a, b, c) {
            if (this.b8) {
                if (this.bj == 1) {
                    this.a7.k(a);
                }
                else if (this.bj == 2) {
                    this.a7.i(a);
                }
            }
            let d = new SliceClickEventArgs(a, this.a4.af(b));
            this.gj(this, d);
            if (!c) {
                this.a4.bo(a, b);
            }
        }
        g4(a) {
            this.a4.al(a);
        }
        cf(a, b) {
            let c = new LabelClickEventArgs(a, this.a4.af(b));
            this.gc(this, c);
            return c.allowSliceClick;
        }
        f0(a, b) {
            if (a != this.dm) {
                this.dm = a;
                if (a != null) {
                    this.gk(a, b);
                }
            }
            this.a4.bo(a, b);
        }
        bf(a, b) {
            return new SliceEventArgs(a, b);
        }
        gk(a, b) {
            if (this.sliceEnter != null) {
                this.sliceEnter(a, this.bf(a, b));
            }
        }
        gl(a, b) {
            if (this.sliceLeave != null) {
                this.sliceLeave(a, this.bf(a, b));
            }
        }
        gm(a, b) {
            if (this.sliceHover != null) {
                this.sliceHover(a, this.bf(a, b));
            }
        }
        f3(a, b, c) {
            if (a != this.dm) {
                let d = this.dm;
                if (d != null) {
                    this.gl(d, b);
                }
                this.dm = a;
                if (this.dm != null) {
                    this.gk(a, b);
                }
            }
            else {
                if (this.dm != null) {
                    this.gm(a, b);
                }
            }
            this.a4.bo(a, b);
        }
        f2(a, b) {
            this.f3(a, b, false);
        }
        f1(a, b) {
            this.a4.am();
            if (this.dm != null) {
                if (this.dm != null) {
                    this.gl(this.dm, b);
                }
                this.dm = null;
            }
        }
        gi() {
            this.gv();
        }
        provideContainer(a) {
            this.a4.az(a);
        }
        ga(a, b) {
            this.a4.a0(a, b);
        }
        notifyContainerResized() {
            this.a4.ax();
        }
        i6() {
            return this.a4.b2();
        }
        i5() {
            return this.a4.bz();
        }
        destroy() {
            this.gu();
            this.a4.az(null);
        }
        fz() {
            this.a4.ap();
        }
        get fp() {
            return this.dr;
        }
        set fp(a) {
            let b = this.dr;
            this.dr = a;
            this.gt("TextStyle", b, a);
        }
        get container() {
            return this;
        }
        get isStacked() {
            return false;
        }
        get isVertical() {
            return false;
        }
        get hasMarkers() {
            return false;
        }
        get isUsableInLegend() {
            return true;
        }
        get hasSubItems() {
            return false;
        }
        c8(a) {
            if (a == null || this.bu == null || this.cn == null) {
                return NaN;
            }
            if (a.isOthersSlice) {
                return this.dd / this.di * 100;
            }
            else {
                return this.bu.item(this.cn._inner[a.a5]) / this.di * 100;
            }
        }
        f8(source_, a, b, c) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            if (!this.ci(source_)) {
                return;
            }
            let d = this.bl;
            if (d == null) {
                return;
            }
            d.handleCollectionChanged(new NotifyCollectionChangedEventArgs(2, 2, c, b, a));
        }
        f4(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            if (!this.ci(source_)) {
                return;
            }
            let a = this.bl;
            a.handleCollectionChanged(new NotifyCollectionChangedEventArgs(0, 4));
        }
        ci(a) {
            return PieChartBase.cj(a, this.itemsSource);
        }
        static cj(a, b) {
            return a == b;
        }
        f6(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            if (!this.ci(source_)) {
                return;
            }
            let c = this.bl;
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 0, b, a));
        }
        f7(source_, a, b) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            if (!this.ci(source_)) {
                return;
            }
            let c = this.bl;
            if (c == null) {
                return;
            }
            c.handleCollectionChanged(new NotifyCollectionChangedEventArgs(1, 1, b, a));
        }
        g3(source_) {
            if (source_.dataView && source_.dataSource) {
                source_ = source_.dataView();
            }
            ;
            this.itemsSource = source_;
        }
        gu() {
            this.itemsSource = null;
        }
        g8() {
            this.a4.bi();
        }
        bm() {
            return FontUtil.toFontInfo(this.a4.c.n, this.fp);
        }
        resolveLegendIndex() {
            return -1;
        }
        forSubItems(a) {
        }
    }
    PieChartBase.$t = /*@__PURE__*/ markType(PieChartBase, 'PieChartBase', Control.$, [INotifyPropertyChanged_$type, ILegendOwner_$type, ILegendSeries_$type, ILegendTemplateProvider_$type]);
    PieChartBase.ho = /*@__PURE__*/ DependencyProperty.i("InnerExtent", Number_$type, PieChartBase.$, /*@__PURE__*/ new PropertyMetadata(2, 0, (a, b) => a.gt("InnerExtent", b.oldValue, b.newValue)));
    PieChartBase.hz = /*@__PURE__*/ DependencyProperty.i("LabelTemplate", DataTemplate.$, PieChartBase.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.gt("LabelTemplate", b.oldValue, b.newValue)));
    PieChartBase.im = /*@__PURE__*/ DependencyProperty.i("SelectedItem", Base.$, PieChartBase.$, /*@__PURE__*/ new PropertyMetadata(1, (a, b) => {
        let c = typeCast(PieChartBase.$, a);
        if (c.b4) {
            return;
        }
        let d = new SelectedItemChangingEventArgs(b.oldValue, b.newValue);
        c.ge(c, d);
        if (!d.cancel) {
            if (!c.b5) {
                c.g9();
            }
            c.gt("SelectedItem", b.oldValue, b.newValue);
            c.gd(a, new SelectedItemChangedEventArgs(b.oldValue, b.newValue));
        }
        else {
            c.b4 = true;
            c.selectedItem = b.oldValue;
            c.b4 = false;
        }
    }));
    PieChartBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, PieChartBase, 'gt', ['ActualBrushes:ak:hc', [BrushCollection.$, null], 'ActualItemsSource::hd', [IEnumerable_$type, null], 'ActualLabelInnerColor:ix:he', [Brush.$, null], 'ActualLabelOuterColor:iy:hf', [Brush.$, null], 'ActualOutlines:al:hg', [BrushCollection.$, null], 'AllowSliceExplosion:b7:hh', [0, true], 'AllowSliceSelection:b8:hi', [0, true], 'Brushes:am:hj', [BrushCollection.$, null], 'ExplodedRadius:c4:hk', [1, 0.2], 'FastItemsSource:bl:hl', [FastItemsSource.$], 'FormatLabel:a5:hm', [Delegate_$type], 'FormatLegendLabel:a6:hn', [Delegate_$type], 'IsDragInteractionEnabled:cd:hp', [0, false], 'IsSurfaceInteractionDisabled:ce:hq', [0, false], 'ItemsSource::hr', [IEnumerable_$type, null], 'LabelExtent:da:hs', [1, 10], 'LabelFormat:ee:ht', [2, null], 'LabelFormatSpecifiers:ag:hu', [Array_$type, null], 'LabelInnerColor:iz:hv', [Brush.$, null], 'LabelMemberPath:ei:hw', [2], 'LabelOuterColor:i0:hx', [Brush.$, null], 'LabelsPosition:az:hy', [LabelsPosition_$type, /*@__PURE__*/ enumGetBox(LabelsPosition_$type, 1)], 'LeaderLineMargin:db:h0', [1, 6], 'LeaderLineStyle:i9:h1', [Style.$, null], 'LeaderLineType:a0:h2', [LeaderLineType_$type, /*@__PURE__*/ enumGetBox(LeaderLineType_$type, 0)], 'LeaderLineVisibility:jd:h3', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'LegendEmptyValuesMode:a1:h4', [LegendEmptyValuesMode_$type, /*@__PURE__*/ enumGetBox(LegendEmptyValuesMode_$type, 0)], 'LegendItemBadgeTemplate::h5', [DataTemplate.$, null], 'LegendItemTemplate::h6', [DataTemplate.$, null], 'LegendLabelFormat:ev:h7', [2, null], 'LegendLabelFormatSpecifiers:ah:h8', [Array_$type, null], 'LegendLabelMemberPath:ey:h9', [2], 'LegendOthersLabelFormat:e0:ia', [2, null], 'LegendOthersLabelFormatSpecifiers:ai:ib', [Array_$type, null], 'Legend::ic', [IChartLegend_$type, null], 'OthersCategoryStyle:ja:id', [Style.$, null], 'OthersCategoryText:e5:ie', [2, null], 'OthersCategoryThreshold:dc:ig', [1, 3], 'OthersCategoryType:a2:ih', [OthersCategoryType_$type, /*@__PURE__*/ enumGetBox(OthersCategoryType_$type, 1)], 'OthersLabelFormat:e9:ii', [2, null], 'OthersLabelFormatSpecifiers:aj:ij', [Array_$type, null], 'Outlines:an:ik', [BrushCollection.$, null], 'RadiusFactor:df:il', [1, 0.9], 'SelectedStyle:jb:io', [Style.$, null], 'SelectionMode:bj:ip', [SliceSelectionMode_$type, /*@__PURE__*/ enumGetBox(SliceSelectionMode_$type, 1)], 'ShouldDisplayMockData:cg:iq', [0, false], 'ShouldUseSkeletonStyleForMockData:ch:ir', [0, false], 'StartAngle:dh:is', [1, 0], 'SweepDirection:i2:it', [SweepDirection_$type, /*@__PURE__*/ enumGetBox(SweepDirection_$type, 1)], 'ToolTip:dq:iu', [4, null], 'ToolTipStyle:jc:iv', [Style.$, null], 'ValueMemberPath:fu:iw', [2, null]]);
    return PieChartBase;
})();
/**
 * @hidden
 */
export let PieChartSliceSelector = /*@__PURE__*/ (() => {
    class PieChartSliceSelector extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        d(a) {
            let b = a.dataContext;
            if (this.a.bj == 1) {
                if (a.isOthersSlice) {
                    let c = typeCast(IList_$type, b);
                    if (c != null && c.contains(this.a.selectedItem)) {
                        return true;
                    }
                    if (typeCast(PieSliceOthersContext.$, this.a.selectedItem) !== null) {
                        return true;
                    }
                }
                if (b == this.a.selectedItem) {
                    return true;
                }
            }
            else if (this.a.bj == 2) {
                if (this.c(a)) {
                    return true;
                }
            }
            else if (this.a.bj == 0) {
                if (this.a.selectedSlices.contains(a.a5)) {
                    return true;
                }
            }
            return false;
        }
        c(a) {
            let b = a.dataContext;
            if (a.isOthersSlice) {
                for (let c of fromEn(b)) {
                    if (this.a.selectedItems.contains1(c)) {
                        return true;
                    }
                }
            }
            else {
                if (this.a.selectedItems.contains1(b)) {
                    return true;
                }
            }
            return false;
        }
        h(a) {
            let b = a.dataContext;
            if (!a.isOthersSlice) {
                if (this.a.selectedItem != b) {
                    return b;
                }
                else {
                    return null;
                }
            }
            else {
                if (typeCast(PieSliceOthersContext.$, this.a.selectedItem) !== null) {
                    return null;
                }
                else {
                    return ((() => {
                        let $ret = new PieSliceOthersContext();
                        $ret.data = typeCast(IList_$type, a.dataContext);
                        $ret.slice = a;
                        return $ret;
                    })());
                }
            }
        }
        f(a, b) {
            let c = false;
            if (b) {
                if (this.a.selectedItems.contains1(a)) {
                    c = this.g(a);
                }
            }
            else {
                if (!this.a.selectedItems.contains1(a)) {
                    c = this.b(a);
                }
                else {
                    c = this.g(a);
                }
            }
            return c;
        }
        e(a) {
            return this.f(a, false);
        }
        g(a) {
            let b = new SelectedItemsChangingEventArgs(this.a.selectedItems, new ObjectCollection(0), this.a.selectedItems);
            this.a.gh(this, b);
            if (!b.cancel) {
                this.a.selectedItems.remove1(a);
            }
            return b.cancel;
        }
        b(a) {
            let b = new SelectedItemsChangingEventArgs(this.a.selectedItems, ((() => {
                let $ret = new ObjectCollection(0);
                $ret.add1(a);
                return $ret;
            })()), this.a.selectedItems);
            this.a.gh(this, b);
            if (!b.cancel) {
                this.a.selectedItems.add1(a);
            }
            return b.cancel;
        }
        k(a) {
            this.a.selectedItem = this.h(a);
        }
        i(a) {
            let b = new List$1(Base.$, 1, this.a.selectedItems);
            if (a.isOthersSlice) {
                let c = typeCast(IList_$type, a.dataContext);
                let d = 0;
                for (let e of fromEn(c)) {
                    if (this.a.selectedItems.contains1(e)) {
                        d++;
                    }
                }
                let f = d > 0 && d < c.count;
                for (let g of fromEn(c)) {
                    this.f(g, f);
                }
                if (this.c(a)) {
                    this.a.selectedItem = ((() => {
                        let $ret = new PieSliceOthersContext();
                        $ret.data = typeCast(IList_$type, a.dataContext);
                        $ret.slice = a;
                        return $ret;
                    })());
                }
                else {
                    this.a.selectedItem = this.a.selectedItems.count > 0 ? this.a.selectedItems._inner[this.a.selectedItems.count - 1] : null;
                }
            }
            else {
                this.e(a.dataContext);
                this.a.selectedItem = this.a.selectedItems.count > 0 ? this.a.selectedItems._inner[this.a.selectedItems.count - 1] : null;
            }
        }
        j(a) {
            if (a != null) {
                a.av = true;
                a.isSelected = this.d(a);
                a.av = false;
            }
        }
    }
    PieChartSliceSelector.$t = /*@__PURE__*/ markType(PieChartSliceSelector, 'PieChartSliceSelector');
    return PieChartSliceSelector;
})();
/**
 * @hidden
 */
export let PieSliceOthersContext = /*@__PURE__*/ (() => {
    class PieSliceOthersContext extends Base {
        constructor() {
            super(...arguments);
            this._data = null;
            this._slice = null;
        }
        get data() {
            return this._data;
        }
        set data(a) {
            this._data = a;
        }
        get slice() {
            return this._slice;
        }
        set slice(a) {
            this._slice = a;
        }
    }
    PieSliceOthersContext.$t = /*@__PURE__*/ markType(PieSliceOthersContext, 'PieSliceOthersContext');
    return PieSliceOthersContext;
})();
/**
 * @hidden
 */
export let Slice = /*@__PURE__*/ (() => {
    class Slice extends ContentControl {
        ak() {
            return new SliceView(this);
        }
        bl(a) {
            this.al = a;
        }
        constructor() {
            super();
            this.al = null;
            this.b8 = null;
            this.ai = null;
            this.aj = null;
            this.bf = null;
            this.b9 = null;
            this.b3 = null;
            this.aq = false;
            this.au = false;
            this.av = false;
            this.an = false;
            this.cc = null;
            this.b0 = null;
            this.b1 = null;
            let a = this.ak();
            this.bl(a);
            a.b();
            this.av = false;
        }
        get isSelected() {
            return this.c(Slice.bv);
        }
        set isSelected(a) {
            this.h(Slice.bv, a);
        }
        get isExploded() {
            return this.c(Slice.bt);
        }
        set isExploded(a) {
            this.h(Slice.bt, a);
        }
        get isOthersSlice() {
            return this.c(Slice.bu);
        }
        set isOthersSlice(a) {
            this.h(Slice.bu, a);
        }
        get b2() {
            return this.c(Slice.bp);
        }
        set b2(a) {
            this.h(Slice.bp, a);
        }
        ac() {
            super.ac();
            this.al.c();
        }
        az() {
            let a = Math.abs(PieChartBase.dg(this.ax - this.a3)) == 360;
            if (a) {
                return this.a2;
            }
            return this.a2;
        }
        cb() {
            let a = (this.ai != null && this.ai.b7) ? true : false;
            let b = this.az();
            if (this.isExploded && a && this.ai.dl > 1) {
                let c = new Rect(0, this.b5.x - b, this.b5.y - b, b * 2, b * 2);
                return c;
            }
            return new Rect(0, this.b7.x - b, this.b7.y - b, b * 2, b * 2);
        }
        b6() {
            if (this.isExploded && this.ai != null && this.ai.b7 && this.ai.dl > 1) {
                if (this.aq) {
                    return this.b3;
                }
                return this.b5;
            }
            return this.b7;
        }
        get aw() {
            return this.an;
        }
        set aw(a) {
            let b = this.an;
            this.an = a;
            if (b && !this.an) {
                this.bk();
            }
        }
        bk() {
            if (this.aw) {
                return;
            }
            let a = this.al.f();
            let b = this.ai.i8;
            if (isNaN_(this.a3) || isNaN_(this.ax) || isNaN_(this.a2) || isNaN_(this.ay) || this.a5 < 0 || this.ai == null || b.width == 0 || b.height == 0 || (this.b7.x == 0 && this.b7.y == 0) || (this.b5.x == 0 && this.b5.y == 0) || this.a3 == this.ax) {
                return;
            }
            this.b8 = this.cb();
            let c = GeometryUtil.e(this.b8);
            let d = this.b8.height / 2;
            let e = this.az();
            let f = RectUtil.l(this.b8);
            let g = Slice.b4(MathUtil.o(this.a3), c, f, d, 100);
            let h = Slice.b4(MathUtil.o(this.ax), c, f, d, 100);
            let i = Slice.b4(MathUtil.o(this.ax), c, f, this.a2, this.a0);
            let j = Slice.b4(MathUtil.o(this.a3), c, f, this.a2, this.a1);
            let k = Math.abs(PieChartBase.dg(this.ax - this.a3)) == 360;
            if (k) {
                this.cc = this.b8;
                if (this.a0 == 0) {
                    let l = ((() => {
                        let $ret = new EllipseGeometry();
                        $ret.e = f;
                        $ret.c = this.a2;
                        $ret.d = this.a2;
                        return $ret;
                    })());
                    a.an = l;
                    return;
                }
                else if (this.a0 > 0) {
                    let m = new Size(1, this.a2, this.a2);
                    let n = new Size(1, this.a2 * this.a0 / 100, this.a2 * this.a0 / 100);
                    let o = ((() => {
                        let $ret = PointUtil.create();
                        $ret.x = f.x - this.a2;
                        $ret.y = f.y;
                        return $ret;
                    })());
                    let p = ((() => {
                        let $ret = PointUtil.create();
                        $ret.x = f.x + this.a2;
                        $ret.y = f.y;
                        return $ret;
                    })());
                    let q = ((() => {
                        let $ret = PointUtil.create();
                        $ret.x = f.x - this.a2 * this.a0 / 100;
                        $ret.y = f.y;
                        return $ret;
                    })());
                    let r = ((() => {
                        let $ret = PointUtil.create();
                        $ret.x = f.x + this.a2 * this.a0 / 100;
                        $ret.y = f.y;
                        return $ret;
                    })());
                    let s = ((() => {
                        let $ret = new PathFigure();
                        $ret.startPoint = o;
                        return $ret;
                    })());
                    let t = new PathSegmentCollection();
                    let u = ((() => {
                        let $ret = new ArcSegment();
                        $ret.f = m;
                        $ret.d = 1;
                        $ret.e = p;
                        return $ret;
                    })());
                    t.add(u);
                    s._segments = t;
                    let v = ((() => {
                        let $ret = new PathFigure();
                        $ret.startPoint = r;
                        return $ret;
                    })());
                    let w = new PathSegmentCollection();
                    let x = ((() => {
                        let $ret = new ArcSegment();
                        $ret.f = n;
                        $ret.d = 0;
                        $ret.e = q;
                        return $ret;
                    })());
                    w.add(x);
                    v._segments = w;
                    let y = ((() => {
                        let $ret = new PathFigure();
                        $ret.startPoint = o;
                        return $ret;
                    })());
                    let z = new PathSegmentCollection();
                    let aa = ((() => {
                        let $ret = new ArcSegment();
                        $ret.f = m;
                        $ret.d = 0;
                        $ret.e = p;
                        return $ret;
                    })());
                    z.add(aa);
                    y._segments = z;
                    let ab = ((() => {
                        let $ret = new PathFigure();
                        $ret.startPoint = r;
                        return $ret;
                    })());
                    let ac = new PathSegmentCollection();
                    let ad = ((() => {
                        let $ret = new ArcSegment();
                        $ret.f = n;
                        $ret.d = 1;
                        $ret.e = q;
                        return $ret;
                    })());
                    ac.add(ad);
                    ab._segments = ac;
                    let ae = ((() => {
                        let $ret = new PathFigureCollection();
                        $ret.add(s);
                        $ret.add(v);
                        $ret.add(y);
                        $ret.add(ab);
                        return $ret;
                    })());
                    let af = ((() => {
                        let $ret = new PathGeometry();
                        $ret.c = ae;
                        return $ret;
                    })());
                    let ag = new GeometryGroup();
                    ag.d.add(af);
                    a.an = ag;
                    return;
                }
                else {
                    let ah = ((() => {
                        let $ret = new GeometryGroup();
                        $ret.c = 0;
                        return $ret;
                    })());
                    ah.d.add(((() => {
                        let $ret = new EllipseGeometry();
                        $ret.e = f;
                        $ret.c = this.a2;
                        $ret.d = this.a2;
                        return $ret;
                    })()));
                    ah.d.add(((() => {
                        let $ret = new EllipseGeometry();
                        $ret.e = f;
                        $ret.c = this.a2 * this.a0 / 100;
                        $ret.d = this.a2 * this.a0 / 100;
                        return $ret;
                    })()));
                    a.an = ah;
                    return;
                }
            }
            let ai = new PathGeometry();
            a.an = ai;
            let aj = ((() => {
                let $ret = new PathFigure();
                $ret.isClosed = true;
                return $ret;
            })());
            ai.c = new PathFigureCollection();
            ai.c.add(aj);
            aj._startPoint = g;
            let ak = Math.abs(this.ax - this.a3) > 180;
            let al = new ArcSegment();
            al.e = h;
            al.f = new Size(1, this.b8.width / 2, this.b8.height / 2);
            al.b = ak;
            if (this.ax > this.a3) {
                al.d = 1;
            }
            else {
                al.d = 0;
            }
            aj._segments = new PathSegmentCollection();
            aj._segments.add(al);
            let am = new LineSegment(1);
            am.c = i;
            aj._segments.add(am);
            let an = Math.sqrt(Math.pow(i.x - h.x, 2) + Math.pow(i.y - h.y, 2));
            let ao = e - an;
            let ap = new ArcSegment();
            ap.e = j;
            if (ao < 0) {
                ao = 0.1;
            }
            ap.f = new Size(1, ao, ao);
            ap.b = al.b;
            ap.d = 0;
            aj._segments.add(ap);
            let aq = this.ca(a, g, h, this.a3, this.ax, f, e);
            this.cc = aq;
            let ar = true;
            if (ar && this.b8.height > 0 && this.b8.width > 0 && !b.containsRect(aq)) {
                let as = aq;
                let at = new Rect(0, 0, 0, b.width, b.height);
                at.intersect(as);
                let au = GeometryUtil.i((this.a3 + this.ax) / 2);
                let av = au / 180 * Math.PI;
                let aw = Math.abs((as.height - at.height) / Math.sin(av));
                let ax = Math.abs((as.width - at.width) / Math.cos(av));
                if (isNaN_(aw) || isInfinity(aw)) {
                    aw = 0;
                }
                if (isNaN_(ax) || isInfinity(ax)) {
                    ax = 0;
                }
                let ay = Math.max(aw, ax);
                let az = GeometryUtil.l(this.ai.i8.width, this.ai.i8.height, true, au, this.a2 * this.ai.cz - ay);
                this.al.d(az.x - this.b5.x, az.y - this.b5.y);
                this.aq = true;
                this.b3 = az;
                this.b9 = new Rect(0, as.x - (az.x - this.b5.x), as.y - (az.y - this.b5.y), as.width, as.height);
            }
            else {
                this.aq = false;
                this.al.e();
            }
        }
        ap(a) {
            let b = this.ai.i8;
            if (this._visibility == 1) {
                return false;
            }
            if (isNaN_(this.a3) || isNaN_(this.ax) || isNaN_(this.a2) || isNaN_(this.ay) || this.a5 < 0 || this.ai == null || b.width == 0 || b.height == 0 || (this.b7.x == 0 && this.b7.y == 0) || (this.b5.x == 0 && this.b5.y == 0)) {
                return false;
            }
            let c = this.az();
            let d = ((this.a0 / 100) * c);
            let e = c;
            let f = this.b7;
            if (this.isExploded && this.ai.b7 && this.ai.dl > 1) {
                f = this.b5;
                if (this.aq) {
                    f = this.b3;
                }
            }
            let g = d * d;
            let h = e * e;
            let i = Math.pow(a.x - f.x, 2) + Math.pow(a.y - f.y, 2);
            if (i < g || i > h) {
                return false;
            }
            let j = Math.atan2(a.y - f.y, a.x - f.x);
            j = j * 180 / Math.PI;
            return this.ao(j);
        }
        ao(a) {
            a = GeometryUtil.i(a);
            let b = Math.min(this.a3, this.ax);
            let c = Math.max(this.a3, this.ax);
            return (a > b && a < c) || (a - 360 > b && a - 360 < c) || (a + 360 > b && a + 360 < c);
        }
        ca(a, b, c, d, e, f, g) {
            let h = new List$1(Point_$type, 0);
            h.add(b);
            h.add(c);
            h.add(f);
            d = GeometryUtil.i(d);
            e = GeometryUtil.i(e);
            if ((0 > d && 0 < e) || (360 > d && 360 < e) || (e < d)) {
                h.add(GeometryUtil.m(f, 0, g));
            }
            if (90 > d && 90 < e) {
                h.add(GeometryUtil.m(f, 90, g));
            }
            if (180 > d && 180 < e) {
                h.add(GeometryUtil.m(f, 180, g));
            }
            if (270 > d && 270 < e) {
                h.add(GeometryUtil.m(f, 270, g));
            }
            let i = 1.7976931348623157E+308;
            let j = 1.7976931348623157E+308;
            let k = -1.7976931348623157E+308;
            let l = -1.7976931348623157E+308;
            for (let m of fromEnum(h)) {
                i = Math.min(i, m.x);
                j = Math.min(j, m.y);
                k = Math.max(k, m.x);
                l = Math.max(l, m.y);
            }
            return new Rect(0, i, j, k - i, l - j);
        }
        am() {
            let a = new PieSliceVisualData();
            a.appearance = new PrimitiveAppearanceData();
            a.labelAppearance = new LabelAppearanceData();
            a.leaderLineAppearance = new PrimitiveAppearanceData();
            a.startAngle = this.a3;
            a.endAngle = this.ax;
            a.explodedOrigin = PointData.b(this.b5);
            a.explodedRadius = this.ay;
            a.origin = PointData.b(this.b7);
            a.radius = this.az();
            a.index = this.a5;
            a.innerExtentEnd = this.a0;
            a.innerExtentStart = this.a1;
            a.isExploded = this.isExploded;
            a.isOthersSlice = this.isOthersSlice;
            a.isSelected = this.isSelected;
            if (this.aj != null) {
                a.labelAppearance.angle = this.aj.ai;
                a.labelBounds = RectData.b(this.aj.ao);
                a.labelAngle = this.aj.ai;
                if (typeCast(TextBlock.$, this.aj.aj) !== null) {
                    let b = typeCast(TextBlock.$, this.aj.aj);
                    a.label = b.al;
                    let c = null;
                    a.labelAppearance.labelBrush = AppearanceHelper.b(b.ao);
                    a.labelAppearance.text = b.al;
                    if (this.ai != null) {
                        c = this.ai.bm();
                        if (c == null) {
                            c = this.ai.a4.b.c;
                        }
                    }
                    a.labelAppearance = AppearanceHelper.c(b, c);
                    a.labelAppearance.visibility = this.aj._visibility == 0;
                }
                else {
                    a.label = this.aj.aj.toString();
                }
                if (this.aj.ap != null) {
                    a.leaderLineAppearance.fill = AppearanceHelper.b(this.aj.ap._fill);
                    a.leaderLineAppearance.opacity = this.aj.ap._opacity;
                    a.leaderLineAppearance.stroke = AppearanceHelper.b(this.aj.ap._stroke);
                    a.leaderLineAppearance.strokeThickness = this.aj.ap.ad;
                    a.leaderLineAppearance.isVisible = this.aj.ap._visibility == 0;
                    a.leaderLinePath = new PathVisualData(2, "leaderLine", this.aj.ap);
                }
                else if (this.aj.aq != null) {
                    a.leaderLineAppearance.fill = AppearanceHelper.b(this.aj.aq._fill);
                    a.leaderLineAppearance.opacity = this.aj.aq._opacity;
                    a.leaderLineAppearance.stroke = AppearanceHelper.b(this.aj.aq._stroke);
                    a.leaderLineAppearance.strokeThickness = this.aj.aq.ad;
                    a.leaderLineAppearance.isVisible = this.aj.aq._visibility == 0;
                    a.leaderLinePath = new PathVisualData(1, "leaderLine", this.aj.aq);
                }
            }
            if (this.al != null) {
                let d = this.al.f();
                a.slicePath = new PathVisualData(1, "slicePath", d);
                a.appearance.fill = AppearanceHelper.b(d._fill);
                a.appearance.opacity = d._opacity;
                a.appearance.stroke = AppearanceHelper.b(d._stroke);
                a.appearance.strokeThickness = d.ad;
                a.appearance.isVisible = d._visibility == 0;
            }
            return a;
        }
        static b4(a, b, c, d, e) {
            if (d == 0) {
                return c;
            }
            let f = Math.cos(a);
            let g = Math.sin(a);
            let h = Math.sqrt(d * d / (1 - (b * Math.pow(f, 2))));
            h *= (e / 100);
            return { $type: Point_$type, x: h * f + c.x, y: h * g + c.y };
        }
    }
    Slice.$t = /*@__PURE__*/ markType(Slice, 'Slice', ContentControl.$);
    Slice.bv = /*@__PURE__*/ DependencyProperty.i("IsSelected", Boolean_$type, Slice.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(Slice.$, a);
        if (!c.av) {
            let d = b.newValue;
            if (c.ai != null) {
                c.ai.g1(c, d);
            }
        }
    }));
    Slice.bt = /*@__PURE__*/ DependencyProperty.i("IsExploded", Boolean_$type, Slice.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => {
        let c = typeCast(Slice.$, a);
        let d = b.newValue;
        if (c.ai != null) {
            c.ai.fy(c, d);
        }
    }));
    Slice.bu = /*@__PURE__*/ DependencyProperty.i("IsOtherSlice", Boolean_$type, Slice.$, /*@__PURE__*/ new PropertyMetadata(2, false, (a, b) => a.bk()));
    Slice.bp = /*@__PURE__*/ DependencyProperty.i("Foreground", Brush.$, Slice.$, /*@__PURE__*/ new PropertyMetadata(1, null));
    Slice.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, Slice, 'bk', ['EndAngle:ax:bm', [1, 0], 'ExplodedOrigin:b5:bn', [Point_$type, /*@__PURE__*/ PointUtil.create()], 'ExplodedRadius:ay:bo', [1, 0], 'Index:a5:bq', [1, -1], 'InnerExtentEnd:a0:br', [1, 0], 'InnerExtentStart:a1:bs', [1, 0], 'Origin:b7:bw', [Point_$type, /*@__PURE__*/ PointUtil.create()], 'Radius:a2:bx', [1, 0], 'StartAngle:a3:by', [1, 0], 'StrokeThickness:a4:bz', [1, 1]]);
    return Slice;
})();
/**
 * @hidden
 */
export let PieChartBaseView = /*@__PURE__*/ (() => {
    class PieChartBaseView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.bt = null;
            this.b = null;
            this.h = null;
            this.j = null;
            this.i = null;
            this.k = null;
            this.c = null;
            this.b4 = null;
            this.l = false;
            this.b1 = Rect.empty;
            this.by = { $type: Point_$type, x: NaN, y: NaN };
            this.m = false;
            this.f = null;
            this.v = null;
            this.u = null;
            this.w = 0;
            this.b0 = null;
            this.ah = null;
            this.t = false;
            this.e = null;
            this.a = a;
            this.c = new PieChartViewManager(this);
        }
        a2() {
            this.e = new PieSliceDataContext();
            this.e.series = this.a;
            this.b4 = Rect.empty;
            this.v = new List$1(Slice.$, 0);
            this.u = new List$1(PieLabel.$, 0);
            this.a.legendItemTemplate = ((() => {
                let $ret = new DataTemplate();
                $ret.render = PieLegendTemplates.h;
                $ret.measure = PieLegendTemplates.c;
                return $ret;
            })());
            this.a.legendItemBadgeTemplate = ((() => {
                let $ret = new DataTemplate();
                $ret.render = PieLegendTemplates.g;
                $ret.measure = PieLegendTemplates.f;
                return $ret;
            })());
            this.c.z();
        }
        bc() {
            let a = this.c.b();
            if (this.a.am == null) {
                this.a.am = a.a;
            }
            if (this.a.an == null) {
                this.a.an = a.b;
            }
            if (this.a.jb == null) {
                this.a.jb = ((() => {
                    let $ret = new Style();
                    $ret.fill = a.h != null ? a.h.color.colorString : null;
                    $ret.stroke = a.i != null ? a.i.color.colorString : null;
                    $ret.strokeThickness = a.e;
                    $ret.opacity = a.d;
                    return $ret;
                })());
            }
            this.b = a;
            if (this.a.fp != null) {
                this.b.c = this.a.bm();
            }
        }
        ay() {
            this.c.ab();
        }
        a1() {
            this.c.ae();
        }
        az(a) {
            if (a == null) {
                this.l = false;
                this.c.ac(null);
                this.h = null;
                this.j = null;
                this.i = null;
                this.k = null;
                return;
            }
            this.c.ac(a);
            this.h = this.c.e;
            this.j = this.c.g;
            this.i = this.c.f;
            this.k = this.c.h;
        }
        b2() {
            return this.b4;
        }
        bz() {
            return this.c.an();
        }
        bb() {
            this.b4 = this.c.ao();
            this.a.gi();
        }
        aw() {
            if (!this.l) {
                this.l = true;
                this.c.ah(runOn(this, this.bj));
            }
        }
        bj() {
            if (this.l) {
                this.l = false;
                this.a6();
            }
        }
        a6() {
            this.an();
            this.c.w(this.b4.width, this.b4.height);
            let a = this.k == this.j;
            if (this.k != null && this.k.d && !a) {
                if (this.a.c1 != 1) {
                    this.k.aa();
                    this.k.ab(this.a.c1, this.a.c1);
                }
                if (!this.b1.isEmpty) {
                    if (!this.k.e) {
                        this.k.l(this.b1.left, this.b1.top, this.b1.width, this.b1.height);
                    }
                }
            }
            if (this.i != null && this.i.d && !a) {
                if (this.a.c1 != 1) {
                    this.i.aa();
                    this.i.ab(this.a.c1, this.a.c1);
                }
                if (!this.b1.isEmpty) {
                    if (!this.i.e) {
                        this.i.l(this.b1.left, this.b1.top, this.b1.width, this.b1.height);
                    }
                }
            }
            if (this.j != null && this.j.d) {
                if (this.a.c1 != 1) {
                    this.j.aa();
                    this.j.ab(this.a.c1, this.a.c1);
                }
                if (!this.b1.isEmpty) {
                    if (!this.j.e) {
                        this.j.l(this.b1.left, this.b1.top, this.b1.width, this.b1.height);
                    }
                }
            }
            if (this.h != null && this.h.d && !a) {
                if (this.a.c1 != 1) {
                    this.h.aa();
                    this.h.ab(this.a.c1, this.a.c1);
                }
                if (!this.b1.isEmpty) {
                    if (!this.h.e) {
                        this.h.l(this.b1.left, this.b1.top, this.b1.width, this.b1.height);
                    }
                }
            }
            this.a7();
            if (!this.b1.isEmpty && this.a.c1 != 1) {
                if (this.k != null && this.k.d && !a) {
                    this.k.z();
                }
                if (this.i != null && this.i.d && !a) {
                    this.i.z();
                }
                if (this.j != null && this.j.d) {
                    this.j.z();
                }
                if (this.h != null && this.h.d && !a) {
                    this.h.z();
                }
            }
        }
        a7() {
            this.b1 = this.b4;
            if (this.j != null && this.j.d) {
                this.ba();
                this.a8();
            }
            if (this.i != null && this.i.d) {
                let a = this.b.c;
                if (this.a.fp != null) {
                    a = this.a.bm();
                }
                this.i.ad(a);
                for (let b of fromEnum(this.u)) {
                    if (b._visibility == 0) {
                        let c = b.aj;
                        if (c != null) {
                            {
                                if (b.ah.b2 == null) {
                                    if (b.ah.au) {
                                        c.ao = this.b.f;
                                    }
                                    else {
                                        c.ao = this.b.g;
                                    }
                                }
                                else {
                                    c.ao = b.ah.b2;
                                }
                                this.i.x(c);
                            }
                        }
                        let d = b.ah.b0;
                        if (b.ah.y != null) {
                            let e = new Path();
                            this.j.j(e, b.ah.y);
                            if (e._fill != null) {
                                d = e._fill;
                            }
                        }
                        if (this.a.a0 != 0 && b.aq != null) {
                            b.aq._stroke = d;
                            b.aq.ad = 1;
                            if (this.a.i9 != null) {
                                this.i.j(b.aq, this.a.i9);
                            }
                            this.i.t(b.aq);
                        }
                        if (this.a.a0 == 0 && b.ap != null) {
                            b.ap._stroke = d;
                            b.ap.ad = 1;
                            if (this.a.i9 != null) {
                                this.i.j(b.ap, this.a.i9);
                            }
                            this.i.s(b.ap);
                        }
                    }
                }
            }
        }
        a9(a) {
            if (a._visibility != 0) {
                return;
            }
            let b = a.al.f();
            this.c.ai(b);
            b.ad = 1;
            b._opacity = a._opacity;
            if (a.b0 != null) {
                b._fill = a.b0;
            }
            if (a.b1 != null) {
                b._stroke = a.b1;
            }
            if (a.y != null) {
                this.j.j(b, a.y);
            }
            if (b.j != null) {
                this.j.aa();
                this.j.k(b.j);
            }
            let c = b._fill;
            let d = b._stroke;
            let e = this.n(a, b, this.j);
            this.j.t(b);
            if (e) {
                b._fill = c;
                b._stroke = d;
            }
            if (b.j != null) {
                this.j.z();
            }
        }
        ba() {
            for (let a of fromEnum(this.v)) {
                if (!a.isSelected) {
                    this.a9(a);
                }
            }
        }
        a8() {
            for (let a of fromEnum(this.v)) {
                if (a.isSelected) {
                    this.a9(a);
                }
            }
        }
        n(a, b, c) {
            return false;
        }
        ak(a, b, c) {
            if (!isNaN_(this.by.x) && !isNaN_(this.by.y)) {
                if (Math.abs(a.x - this.by.x) > 10 || Math.abs(a.y - this.by.y) > 10) {
                    this.m = true;
                }
            }
            let d = this.f;
            this.bk(a);
            if (this.f == null && d != null) {
                let e = ((() => {
                    let $ret = new MouseEventArgs();
                    $ret.position = a;
                    return $ret;
                })());
                this.a.f1(this.f, e);
            }
            else if (this.f != null) {
                let f = ((() => {
                    let $ret = new MouseEventArgs();
                    $ret.position = a;
                    return $ret;
                })());
                this.a.f2(this.f, f);
            }
        }
        aj(a) {
            let b = this.f;
            this.bk(a);
            let c = ((() => {
                let $ret = new MouseEventArgs();
                $ret.position = a;
                return $ret;
            })());
            this.a.f1(b, c);
        }
        ai(a) {
            this.m = false;
            this.by = { $type: Point_$type, x: a.x, y: a.y };
            this.bk(a);
        }
        al(a) {
            if (!this.a.cd || !this.m) {
                this.aq(a);
            }
            if (this.a.cd && this.m) {
                let b = this.f;
                this.f = null;
                let c = ((() => {
                    let $ret = new MouseEventArgs();
                    $ret.position = a;
                    return $ret;
                })());
                this.a.f1(b, c);
            }
            this.m = false;
            this.by = { $type: Point_$type, x: NaN, y: NaN };
        }
        aq(a) {
            let b = ((() => {
                let $ret = new MouseButtonEventArgs();
                $ret.position = a;
                return $ret;
            })());
            let c = true;
            let d = null;
            for (let e of fromEnum(this.u)) {
                let f = e.ao.containsPoint(a);
                if (f) {
                    d = e;
                    c = this.a.cf(e.ah, b);
                    break;
                }
            }
            this.bk(a);
            if (this.f == null && c && d != null) {
                this.a.g5(d.ah, b);
            }
            else if (this.f != null && c) {
                this.a.g5(this.f, b);
            }
        }
        bk(a) {
            this.f = null;
            for (let b = 0; b < this.v.count; b++) {
                if (this.v._inner[b]._visibility == 0 && this.v._inner[b].ap(a)) {
                    this.f = this.v._inner[b];
                    break;
                }
            }
        }
        o(a) {
            for (let b of fromEnum(this.u)) {
                let c = b.ao.containsPoint(a);
                if (c) {
                    return true;
                }
            }
            return false;
        }
        q(a) {
            for (let b = 0; b < this.v.count; b++) {
                if (this.v._inner[b]._visibility == 0 && this.v._inner[b].ap(a)) {
                    return true;
                }
            }
            return false;
        }
        p(a) {
            return this.o(a) || this.q(a);
        }
        be() {
            this.a.gi();
        }
        am() {
            this.ar();
        }
        bo(a, b) {
            let c = b;
            this.bp(c.position, a, b);
        }
        g() {
            let a = new Slice();
            a.ai = this.a;
            this.v.add(a);
            return a;
        }
        bf(a) {
            a._visibility = 0;
        }
        bh(a) {
            a._visibility = 1;
        }
        bg(a) {
            a.ai = null;
            this.v.remove(a);
        }
        d() {
            let a = new PieLabel();
            if (this.a.a0 == 0) {
                a.ap = new Line();
            }
            else {
                a.aq = new Path();
                let b = new PathGeometry();
                b.c.add(new PathFigure());
                b.c._inner[0]._segments.add(new BezierSegment(0));
                a.aq.an = b;
            }
            this.u.add(a);
            return a;
        }
        as(a) {
            a._visibility = 0;
        }
        au(a) {
            a._visibility = 1;
        }
        at(a) {
            this.u.remove(a);
        }
        bm(a) {
            if ((this.a.a0 != 0 && a.aq != null) || (this.a.a0 == 0 && a.ap != null)) {
                return;
            }
            if (this.a.a0 == 0) {
                a.aq = null;
                a.ap = new Line();
            }
            else {
                a.ap = null;
                a.aq = new Path();
                let b = new PathGeometry();
                let c = new PathFigure();
                c._startPoint = { $type: Point_$type, x: NaN, y: NaN };
                b.c.add(c);
                b.c._inner[0]._segments.add(new BezierSegment(0));
                a.aq.an = b;
            }
        }
        bd(a) {
            if (this.a.ja != null && a.isOthersSlice) {
                a.b0 = this.bw(a.a5);
                a.b1 = this.bx(a.a5);
                a.y = this.a.ja;
            }
            else if (a.isSelected && this.a.b8 && this.a.jb != null) {
                a.y = this.a.jb;
            }
            else {
                a.y = null;
                a.b0 = this.bw(a.a5);
                a.b1 = this.bx(a.a5);
            }
        }
        bw(a) {
            if (this.a.ak != null && a >= 0 && this.a.ak.count > 0) {
                return this.a.ak.item(a % this.a.ak.count);
            }
            return null;
        }
        bx(a) {
            if (this.a.al != null && a >= 0 && this.a.al.count > 0) {
                return this.a.al.item(a % this.a.al.count);
            }
            return null;
        }
        ae(a) {
            if (a == null || a.aj == null) {
                return this.a.ei;
            }
            let b = a.aj;
            let c = b.aj;
            if (typeCast(TextBlock.$, c) !== null) {
                return c.al;
            }
            return c;
        }
        z(a) {
            let b = typeCast(TextBlock.$, a);
            if (b != null && b.al != null && this.i != null) {
                return this.i.f(b) + 0;
            }
            return 0;
        }
        bl() {
            this.w = FontUtil.getCurrentFontHeight(this.c.n, this.c.d());
        }
        y(a) {
            return this.w + 0;
        }
        b3(a) {
            let b = a.aj;
            if (typeCast(TextBlock.$, b) !== null) {
                let c = this.z(b);
                let d = this.y(b);
                return new Rect(0, 0, 0, c, d);
            }
            return Rect.empty;
        }
        b5() {
            return new Size(1, this.b4.width, this.b4.height);
        }
        bn(a, b, c) {
            let d = typeCast(TextBlock.$, a.aj);
            if (d != null) {
                d.n = b;
                d.o = c;
            }
            this.aw();
        }
        bq(a) {
            this.br(a);
        }
        bs() {
            this.aw();
        }
        av() {
            this.an();
        }
        an() {
            let a = this.b.c;
            if (this.a.fp != null) {
                a = this.a.bm();
            }
            if (this.i != null) {
                this.i.ad(a);
            }
        }
        a0(a, b) {
            this.c.ad(a, b);
        }
        ax() {
            this.c.aa();
        }
        get ag() {
            return this.c != null && this.c.n != null ? this.c.n.getResourceString("invalidLabelBinding") : "There is no such value for the labels to bind.";
        }
        ar() {
            if (this.t == true) {
                this.t = false;
                this.c.y(this.e);
            }
        }
        br(a) {
            this.c.ak(a);
        }
        bp(a, b, c) {
            this.t = true;
            this.b0 = a;
            if (b == null) {
                this.ah = null;
                this.e.item = null;
            }
            else {
                this.ah = b.dataContext;
                this.e.item = b.dataContext;
                this.e.slice = b;
            }
            let d = this.a.i5();
            let pos_ = { $type: Point_$type, x: a.x + 15 + d.x, y: a.y + 15 + d.y };
            let context_ = this.e;
            this.c.aj(pos_, context_);
        }
        bi() {
            this.bc();
            this.bl();
            this.a.gv();
        }
        a3() {
            this.c.af(this.a.ce);
        }
        ad() {
            return this.c.t();
        }
        ap() {
            if (this.l) {
                this.bj();
            }
        }
        s() {
            return this.ad() != null;
        }
        ao(a) {
            this.c.x(a);
        }
        r() {
            return true;
        }
        a5() {
        }
        bu(a) {
            let b = this.c.al(a.y);
            if (b != null) {
                return b;
            }
            return a.b0;
        }
        bv(a) {
            let b = this.c.am(a.y);
            if (b != null) {
                return b;
            }
            return a.b1;
        }
        x(a) {
            return this.c.m(a.y);
        }
        aa(a) {
            return this.c.m(a);
        }
        ab() {
            for (let a of fromEnum(this.v)) {
                if (!a.isSelected) {
                    return a.a4;
                }
            }
            return NaN;
        }
        a4() {
            this.c.ag();
            this.aw();
        }
        af(a) {
            return this.c.c.as;
        }
    }
    PieChartBaseView.$t = /*@__PURE__*/ markType(PieChartBaseView, 'PieChartBaseView');
    return PieChartBaseView;
})();
/**
 * @hidden
 */
export let PieSliceDataContext = /*@__PURE__*/ (() => {
    class PieSliceDataContext extends DataContext {
        constructor() {
            super(...arguments);
            this._slice = null;
            this._percentValue = 0;
            this._isOthersSlice = false;
        }
        get slice() {
            return this._slice;
        }
        set slice(a) {
            this._slice = a;
        }
        get percentValue() {
            return this._percentValue;
        }
        set percentValue(a) {
            this._percentValue = a;
        }
        get isOthersSlice() {
            return this._isOthersSlice;
        }
        set isOthersSlice(a) {
            this._isOthersSlice = a;
        }
        flatten() {
            let ret_ = super.flatten();
            let percentValue_ = this.percentValue;
            let isOthersSlice_ = this.isOthersSlice;
            ret_.percentValue = percentValue_;
            ret_.isOthersSlice = isOthersSlice_;
            if (isOthersSlice_ && this.item != null) {
                let items_ = [];
                for (let currItem_ of fromEn(this.item)) {
                    items_.push(currItem_);
                }
                ret_.item = items_;
            }
            return ret_;
        }
    }
    PieSliceDataContext.$t = /*@__PURE__*/ markType(PieSliceDataContext, 'PieSliceDataContext', DataContext.$);
    return PieSliceDataContext;
})();
/**
 * @hidden
 */
export let SliceView = /*@__PURE__*/ (() => {
    class SliceView extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.g = null;
            this.a = a;
        }
        b() {
            this.g = new Path();
            this.a.content = this.g;
        }
        c() {
            this.a.bk();
        }
        f() {
            return this.g;
        }
        d(a, b) {
            this.g.j = ((() => {
                let $ret = new TranslateTransform();
                $ret.j = a;
                $ret.k = b;
                return $ret;
            })());
        }
        e() {
            this.g.j = null;
        }
    }
    SliceView.$t = /*@__PURE__*/ markType(SliceView, 'SliceView');
    return SliceView;
})();
