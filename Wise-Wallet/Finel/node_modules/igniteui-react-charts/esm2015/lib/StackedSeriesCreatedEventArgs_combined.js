/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { EventArgs, Base, markType, Point_$type, runOn, typeCast, IList$1_$type, Number_$type, markDep, IEnumerable_$type, Array_$type, delegateCombine, fromEnum, Boolean_$type, enumGetBox, fromEn, String_$type, getInstanceType, INotifyPropertyChanged_$type, PropertyChangedEventArgs, Delegate_$type, toNullable, TypeRegistrar } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { DataTemplate } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { List$1 } from "igniteui-react-core";
import { AnchoredCategorySeries } from "./AnchoredCategorySeries";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { CategorySeries } from "./CategorySeries";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { NumericAxisBase } from "./NumericAxisBase";
import { ISupportsMarkers_$type } from "./ISupportsMarkers";
import { CategoryFrame } from "./CategoryFrame";
import { Rect } from "igniteui-react-core";
import { CategorySeriesView } from "./CategorySeriesView";
import { Axis } from "./Axis";
import { ScalerParams } from "./ScalerParams";
import { ObservableCollection$1 } from "igniteui-react-core";
import { AxisRange } from "./AxisRange";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { isNaN_, isInfinity, truncate } from "igniteui-react-core";
import { CategoryTransitionInMode_$type } from "./CategoryTransitionInMode";
import { Path } from "igniteui-react-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { FrameworkElement } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { DependencyProperty } from "igniteui-react-core";
import { DependencyObject } from "igniteui-react-core";
import { NumericYAxis } from "./NumericYAxis";
import { Defaults } from "./Defaults";
import { Pool$1 } from "igniteui-react-core";
import { Rectangle } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { IScaler_$type } from "./IScaler";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { PropertyMetadata } from "igniteui-react-core";
import { dateMinValue, dateMaxValue } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { CategoryYAxis } from "./CategoryYAxis";
import { AnchoredCategoryBucketCalculator } from "./AnchoredCategoryBucketCalculator";
import { IStacked100Series_$type } from "./IStacked100Series";
import { NotImplementedException } from "igniteui-react-core";
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CollisionAvoider } from "./CollisionAvoider";
import { SafeSortedReadOnlyDoubleCollection } from "./SafeSortedReadOnlyDoubleCollection";
import { Numeric } from "igniteui-react-core";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { CategoryXAxis } from "./CategoryXAxis";
import { IBarSeries_$type } from "./IBarSeries";
import { Color } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { LegendItemBadgeMode_$type } from "igniteui-react-core";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { SeriesOutlineMode_$type } from "./SeriesOutlineMode";
import { TransitionInSpeedType_$type } from "./TransitionInSpeedType";
import { PropertyUpdatedEventArgs } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { SingleValuesHolder } from "./SingleValuesHolder";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Canvas } from "igniteui-react-core";
import { Panel } from "igniteui-react-core";
import { PlatformConstants } from "igniteui-react-core";
/**
 * @hidden
 */
export let StackedSeriesCreatedEventArgs = /*@__PURE__*/ (() => {
    class StackedSeriesCreatedEventArgs extends EventArgs {
        constructor(a) {
            super();
            this.c = null;
            this.c = a;
        }
        get brush() {
            return this.c.kc;
        }
        set brush(a) {
            this.c.kc = a;
        }
        get legendItemTemplate() {
            return this.c.ha;
        }
        set legendItemTemplate(a) {
            this.c.ha = a;
        }
        get legendItemBadgeTemplate() {
            return this.c.g9;
        }
        set legendItemBadgeTemplate(a) {
            this.c.g9 = a;
        }
        get legendItemVisibility() {
            return this.c.k7;
        }
        set legendItemVisibility(a) {
            this.c.k7 = a;
        }
        get outline() {
            return this.c.kg;
        }
        set outline(a) {
            this.c.kg = a;
        }
        get dashArray() {
            return this.c.kl;
        }
        set dashArray(a) {
            this.c.kl = a;
        }
        get dashCap() {
            return this.c.ko;
        }
        set dashCap(a) {
            this.c.ko = a;
        }
        get index() {
            return this.c.ca;
        }
        get thickness() {
            return this.c.b2;
        }
        set thickness(a) {
            this.c.b2 = a;
        }
        get title() {
            return this.c.ch;
        }
        set title(a) {
            this.c.ch = a;
        }
        get transitionDuration() {
            return this.c.cb;
        }
        set transitionDuration(a) {
            this.c.cb = a;
        }
        get transitionEasingFunction() {
            return this.c.ah;
        }
        set transitionEasingFunction(a) {
            this.c.ah = a;
        }
        get markerBrush() {
            return this.c.kd;
        }
        set markerBrush(a) {
            this.c.kd = a;
        }
        get markerOutline() {
            return this.c.ke;
        }
        set markerOutline(a) {
            this.c.ke = a;
        }
        get markerStyle() {
            return this.c.k4;
        }
        set markerStyle(a) {
            this.c.k4 = a;
        }
        get markerTemplate() {
            return this.c.hb;
        }
        set markerTemplate(a) {
            this.c.hb = a;
        }
        get markerType() {
            return this.c.x;
        }
        set markerType(a) {
            this.c.x = a;
        }
        get markerThickness() {
            return this.c.bv;
        }
        set markerThickness(a) {
            this.c.bv = a;
        }
        get lineCap() {
            return this.c.kn;
        }
        set lineCap(a) {
            this.c.kp = a;
        }
    }
    StackedSeriesCreatedEventArgs.$t = /*@__PURE__*/ markType(StackedSeriesCreatedEventArgs, 'StackedSeriesCreatedEventArgs', EventArgs.$);
    return StackedSeriesCreatedEventArgs;
})();
/**
 * @hidden
 */
export let FragmentBase = /*@__PURE__*/ (() => {
    class FragmentBase extends HorizontalAnchoredCategorySeries {
        constructor() {
            super();
            this.vk = null;
            this._logicalSeriesLink = null;
            this.vm = null;
            this.vk = new CategoryLineRasterizer();
        }
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        get parentSeries() {
            return this.vm;
        }
        set parentSeries(a) {
            this.vm = a;
        }
        get_dr() {
            return false;
        }
        get_dx() {
            return true;
        }
        ju() {
            if (this.logicalSeriesLink != null) {
                return this.logicalSeriesLink.en;
            }
            return null;
        }
        hh() {
            let a = this.parentSeries;
            if (a.index == -1 || a.tu == null || a.tu.f.indexOf(this) == -1) {
                return -1;
            }
            return a.tu.f.indexOf(this);
        }
        hl() {
            let a = this.parentSeries;
            if (a.index == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.ty) {
                return -1 + a.index + a.tq.count - a.tu.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        bg() {
            return this.parentSeries;
        }
        rw() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchXAxis();
        }
        vj() {
            if (this.parentSeries == null) {
                return this.r2;
            }
            return this.parentSeries.r2;
        }
        sh() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        vo(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = c[1];
            let k = new Rect(0, i - 5, j - 5, 11, 11);
            if (!isNaN_(i) && !isNaN_(j) && !isInfinity(i) && !isInfinity(j) && d.tryAdd(k)) {
                b.m.add({ $type: Point_$type, x: i, y: j });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        tc(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.a7.count == 0 || this.logicalSeriesLink.a6.count == 0) {
                return;
            }
            this.r3(b).d(a, b);
        }
        ps(a, b, c) {
            return this.pu(a, b, c, this.vj().r(this.rw(), this.b1.bv, this.b1.bu, this.getEffectiveViewport1(this.b1)), this.sh(), this.rw(), runOn(this, this.vp), (d, e) => this.hp(d, e, this.rw(), runOn(this, this.sv), this.valueColumn != null ? new FragmentBaseValueList(this) : null), (d, e) => this.hn(d, e, this.rw(), runOn(this, this.sv), this.valueColumn != null ? new FragmentBaseValueList(this) : null));
        }
        ag() {
            return [this.rw(), this.sh()];
        }
        vp(a, b, c) {
            if (this.ce == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.b1);
            let e = new ScalerParams(0, this.ce.ta, this.b1.bu, this.rw().cg, d);
            let f = this.r2.r(this.rw(), this.ce.ta, this.b1.bu, d);
            return this.gp(this.valueColumn != null ? new FragmentBaseValueList(this) : null, a, this.rw(), e, f, runOn(this, this.sv), b, c);
        }
        vr(a, b, c) {
            let d = this.t1(c);
            let e = d;
            let f = this.logicalSeriesLink.ay;
            let g = f ? this.parentSeries.tu.e : this.parentSeries.tu.d;
            let h = g.indexOf(this);
            if (a.count == 0) {
                return;
            }
            if (h == -1) {
                return;
            }
            let i = false;
            for (let j = h; j >= 0; j--) {
                if (i) {
                    break;
                }
                if (j == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let k = typeCast(FragmentBase.$, g._inner[j - 1]);
                if (k != null && k.vk != null && k.vk.o.count > 0 && this.b1 != null && k.fd(this.b1.bu, this.b1.bv, this.b1)) {
                    i = true;
                    for (let l = k.vk.o.count - 1; l >= 0; l--) {
                        a.add(k.vk.o._inner[l]);
                    }
                }
            }
        }
        fd(a, b, c) {
            let d = super.fd(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.cl == null || e.bh == null || f.bh == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        t1(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.sh().cg, e);
            f.b = this.gg();
            if (!c.isEmpty && !d.isEmpty && this.sh() != null) {
                b = this.sh().ei(0, f);
            }
            return b;
        }
        aq(a) {
            return null;
        }
        vq() {
            if (this.parentSeries == null) {
                return -1;
            }
            let a = this.parentSeries.index;
            let b = 0;
            let c = 1;
            if (this.parentSeries.ty) {
                b = this.parentSeries.tq.count - 1;
                c = -1;
            }
            for (let d = b; this.parentSeries.ty ? d >= 0 : d < this.parentSeries.tq.count; d += c) {
                let e = this.parentSeries.tq._inner[d];
                if (e.visualSeriesLink == this) {
                    return a;
                }
                if (this.parentSeries.a2 == null || e.k6 != 0 || e.k5 != 0) {
                    continue;
                }
                a++;
            }
            return -1;
        }
        vs(a) {
            if (a == null) {
            }
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            if (this.parentSeries == null) {
                return;
            }
            let e = typeCast(NumericAxisBase.$, this.parentSeries.fetchYAxis());
            if (e == null) {
                return;
            }
            switch (b) {
                case "ValueColumn":
                    if (this.tp.c3) {
                        this.tp.c2.g$i();
                    }
                    if (e != null && !e.c0()) {
                        this.parentSeries.tp().cr.g(this.fx);
                        this.mn(false);
                    }
                    break;
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.j7 = this.o5;
                    }
                    break;
            }
        }
        mp(a, b) {
            super.mp(a, b);
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    FragmentBase.$t = /*@__PURE__*/ markType(FragmentBase, 'FragmentBase', HorizontalAnchoredCategorySeries.$);
    return FragmentBase;
})();
/**
 * @hidden
 */
export let AreaFragment = /*@__PURE__*/ (() => {
    class AreaFragment extends FragmentBase {
        constructor() {
            super();
            this.ab = AreaFragment.$;
        }
        by() {
            return new AreaFragmentView(this);
        }
        l4(a) {
            super.l4(a);
            this.vt = a;
        }
        get_dg() {
            return true;
        }
        get_df() {
            return true;
        }
        r7() {
            return 1;
        }
        vv(a, b) {
            let c = this.vt.dg.an;
            if (this.e1(a, c)) {
                return true;
            }
            let d = this.vt.dh.an;
            if (this.e1(a, d)) {
                return true;
            }
            return false;
        }
        ez(a, b) {
            if (this.vu(a, b)) {
                return true;
            }
            if (this.vv(a, b)) {
                return true;
            }
            if (this.qo(a, b)) {
                return true;
            }
            return false;
        }
        vu(a, b) {
            let c = this.vt.di.an;
            if (this.e0(a, b, c)) {
                return true;
            }
            let d = this.vt.dj.an;
            if (this.e0(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        k2(a, b) {
            super.k2(a, b);
            let c = b;
            c.db();
        }
        tf(a, b) {
            super.tf(a, b);
            this.vk.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(AreaFragmentView.$, b);
            let d = a.f;
            let e = this.getEffectiveViewport1(c);
            this.r5.a2(this, this.sp(), runOn(this, this.rq), this.sx(b), this.sy(b));
            let f = false;
            let g = this.r5.b;
            if (g != null) {
                f = true;
            }
            if (f) {
                let h = new ScalerParams(0, b.bv, b.bu, this.u0.cg, e);
                this.tb(d, -1, this.valueColumn.count, this.u0, h, b.q);
            }
            this.r5.ad(c.di, true, false, true, true);
            this.r5.ad(c.dj, true, false, true, true);
            this.r5.ad(c.dg, false, true, false, false);
            this.r5.ad(c.dh, false, true, false, false);
            let i = c.cr.d;
            this.vk.i(c.dg, c.di, c.dh, c.dj, a.f.count, a.f, true, i, this.fx, (j, k, l, m, n) => this.vr(j, a.f, b), 0);
            c.dg._opacity = this.r5.j * this.fu;
            c.dh._opacity = 0.5 * this.r5.j * this.fu;
        }
        my() {
            let a = (typeCast(XamDataChart.$, this.ce));
            if (a != null) {
                this.fu = isNaN_(this.f3) ? this.parentSeries.fu : this.f3;
            }
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    AreaFragment.$t = /*@__PURE__*/ markType(AreaFragment, 'AreaFragment', FragmentBase.$);
    return AreaFragment;
})();
/**
 * @hidden
 */
export let ColumnFragment = /*@__PURE__*/ (() => {
    class ColumnFragment extends FragmentBase {
        get_dk() {
            return true;
        }
        get_d5() {
            return true;
        }
        gz() {
            if (!isNaN_(this.gy)) {
                return super.gz();
            }
            return Defaults.h;
        }
        r7() {
            return 1;
        }
        constructor() {
            super();
            this.ab = ColumnFragment.$;
        }
        by() {
            return new ColumnFragmentView(this);
        }
        l4(a) {
            super.l4(a);
            this.vu = a;
        }
        get fragmentXAxis() {
            return this.parentSeries != null ? typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis()) : null;
        }
        get fragmentYAxis() {
            return this.parentSeries != null ? typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis()) : null;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        rw() {
            return this.fragmentXAxis;
        }
        sh() {
            return this.fragmentYAxis;
        }
        get_c3() {
            return true;
        }
        fetchXAxis() {
            return null;
        }
        fetchYAxis() {
            return null;
        }
        k2(a, b) {
            super.k2(a, b);
            let c = b;
            if (a && c.db != null) {
                this.rx.m.clear();
                c.db.count = 0;
            }
        }
        aq(a) {
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
        }
        fd(a, b, c) {
            if (this.parentSeries == null) {
                return false;
            }
            return this.parentSeries.tz(this, a, b, this.vw(c));
        }
        fa() {
            return true;
        }
        sx(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.sx(this.parentSeries.b1);
            }
            return super.sx(a);
        }
        sy(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.sy(this.parentSeries.b1);
            }
            return super.sx(a);
        }
        sz(a) {
            if (this.parentSeries != null) {
                return this.parentSeries.sz(this.parentSeries.b1);
            }
            return super.sz(a);
        }
        p3(a) {
            if (this.rw() == null || this.fragmentYAxis == null) {
                return Rect.empty;
            }
            let b = this.pn(a);
            let c = this.b1.bv;
            let d = this.b1.bu;
            let e = this.getEffectiveViewport1(this.b1);
            let f = new ScalerParams(0, c, d, this.fragmentYAxis.cg, e);
            let g = this.aj(this.rw(), this.rx.f, this.sx(this.b1), this.sy(this.b1), a, true);
            if (g == null) {
                return Rect.empty;
            }
            let h = g[0];
            let i = g[1];
            let j = Math.abs(b.x - h[0]);
            let k = Math.abs(b.x - i[0]);
            let l = this.rw().k3(c, d, e);
            if (j < k) {
                let m = h[0] - 0.5 * l;
                let n = h[1];
                let o = h[2];
                return new Rect(0, m, Math.min(n, o), l, Math.max(n, o) - Math.min(n, o));
            }
            else {
                let p = i[0] - 0.5 * l;
                let q = i[1];
                let r = i[2];
                return new Rect(0, p, Math.min(q, r), l, Math.max(q, r) - Math.min(q, r));
            }
        }
        ez(a, b) {
            if (this.e2(a, b)) {
                return true;
            }
            if (this.qo(a, b)) {
                return true;
            }
            return false;
        }
        e2(a, b) {
            let c = this.p4(a);
            if (c.isEmpty) {
                return false;
            }
            let d = this.v3(c, this.gc(b));
            return d.containsPoint(a);
        }
        v3(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - ((a.width / 2) + b);
            let f = d - (a.height / 2);
            let g = a.height;
            let h = a.width + b * 2;
            return new Rect(0, e, f, h, g);
        }
        h4(a, b) {
            let c = typeCast(FrameworkElement.$, a);
            let d = c != null ? typeCast(DataContext.$, c.dataContext) : null;
            let e = d != null ? d.item : null;
            if (e == null) {
                let f = this.b1.bu;
                let g = this.ce != null ? this.ce.ta : Rect.empty;
                let h = { $type: Point_$type, x: g.left + g.width * (b.x - f.left) / f.width, y: g.top + g.height * (b.y - f.top) / f.height };
                e = this.hy(h);
            }
            return e;
        }
        hy(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.rw()) !== null) {
                b = this.hk(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.hi(a);
            }
            return b >= 0 && this.cl != null && b < this.cl.count ? this.cl.item(b) : null;
        }
        hk(a) {
            let b = this.b1.bv;
            let c = this.b1.bu;
            let d = this.getEffectiveViewport1(this.b1);
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let e = this.rw();
            let f = new ScalerParams(0, b, c, e.cg, d);
            let g = typeCast(ISortingAxis_$type, this.fragmentXAxis);
            let h = this.pz(this.b1);
            let i = e.el(h.left, f);
            let j = e.el(h.right, f);
            let k = (a.x - b.left) / b.width;
            let l = i + ((j - i) * k);
            if (truncate(l) <= dateMinValue().getTime() || truncate(l) >= dateMaxValue().getTime()) {
                return -1;
            }
            let m = g.i$f(l);
            return m;
        }
        hi(a) {
            if (this.parentSeries == null) {
                return -1;
            }
            return this.parentSeries.t5(a);
        }
        vo(a, b, c, d, e, f, g, h) {
            let i = 0;
            let j = c[0];
            let k = e < i ? c[2] : c[1];
            let l = new Rect(0, j - 5, k - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(k) && !isInfinity(j) && !isInfinity(k) && d.tryAdd(l)) {
                b.m.add({ $type: Point_$type, x: j, y: k });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        vw(a) {
            if (a.p) {
                return this.parentSeries.a7.a$h.item(a.ad);
            }
            else if (a == this.b0) {
                return this.parentSeries.b0;
            }
            else {
                return this.parentSeries.r6;
            }
        }
        mm(a, b, c, d, e) {
            this.a7.a$t(this, a, b, d, e);
            let f = this.a7.a$h.item(d);
            let g = f;
            f.a1(c);
            let h = this.vw(f);
            h.cr.g(this.fx);
            if (this.cy(g)) {
                return;
            }
            if (this.tq == null) {
                this.tq = new CategoryFrame(3);
            }
            this.tq.u();
            this.tc(this.tq, g);
            this.tf(this.tq, g);
        }
        tc(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null || this.logicalSeriesLink.a6.count == 0 || this.logicalSeriesLink.a7.count == 0) {
                return;
            }
            let c;
            if (b.p) {
                c = this.parentSeries.to;
            }
            else if (b == this.b0) {
                c = this.parentSeries.r0;
            }
            else {
                c = this.parentSeries.rx;
            }
            let d = typeCast(CategorySeriesView.$, this.vw(b));
            a.f.clear();
            a.m.clear();
            let e = d.cr.e;
            let f = d.cr.f;
            let g = this.parentSeries.r2.h.yScaler;
            let h = typeCast(ISortingAxis_$type, this.parentSeries.r2.h.scaler);
            let i = typeCast(NumericAxisBase.$, g) !== null && g.li;
            let j = typeCast(StackedBucketCalculator.$, d.cr);
            let k = d.cr.d;
            let l = 0;
            if (e <= f) {
                for (let m = e; m <= f; m++) {
                    let n = m * k;
                    if (this._visibility != 0) {
                        break;
                    }
                    if (m >= this.valueColumn.count || m >= c.f.count + e) {
                        continue;
                    }
                    let o = this.valueColumn.item(m);
                    let p = !i || (i && o > 0);
                    let q;
                    if (h == null) {
                        q = j.getBucket1(this, m, m, b.bv, b.bu, c);
                    }
                    else {
                        q = j.getBucket1(this, m, h.i$b._inner[m], b.bv, b.bu, c);
                    }
                    a.f.add(q);
                    if (p) {
                        if (this.vo(b, a, q, this.r2.h.provideCollisionDetector(), o, n, l, a.f.count - 1)) {
                            l++;
                        }
                    }
                }
            }
            b.cu.count = l;
        }
        tf(a, b) {
            super.tf(a, b);
            if (this.parentSeries == null) {
                return;
            }
            this.parentSeries.ue(this, a, b, runOn(this, this.rq));
            CategoryMarkerManager.e(this, a.m, b.cu, this.qp);
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    ColumnFragment.$t = /*@__PURE__*/ markType(ColumnFragment, 'ColumnFragment', FragmentBase.$);
    ColumnFragment.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ColumnFragment, 'raisePropertyChanged', ['RadiusX:vx:v1', [1, 0], 'RadiusY:vy:v2', [1, 0]]);
    return ColumnFragment;
})();
/**
 * @hidden
 */
export let BarFragment = /*@__PURE__*/ (() => {
    class BarFragment extends ColumnFragment {
        constructor() {
            super();
            this.ab = BarFragment.$;
        }
        get_di() {
            return true;
        }
        get_d5() {
            return true;
        }
        get_dk() {
            return false;
        }
        r7() {
            return 1;
        }
        get barFragmentXAxis() {
            return this.parentSeries != null ? this.parentSeries.xAxis : null;
        }
        get barFragmentYAxis() {
            return this.parentSeries != null ? this.parentSeries.yAxis : null;
        }
        rw() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.fetchYAxis();
        }
        get_isVertical() {
            return true;
        }
        f9(a) {
            let b = this.ce != null ? this.ce.ta : Rect.empty;
            let c = this.b1.bu;
            let d = this.pz(this.b1);
            let e = this.getEffectiveViewport1(this.b1);
            let f = this.rw();
            let g = -1;
            if (f != null && !b.isEmpty && !c.isEmpty) {
                let h = new ScalerParams(0, b, c, f.cg, e);
                let i = f.el(d.top, h);
                let j = f.el(d.bottom, h);
                let k = (a.y - b.top) / b.height;
                let l = i + (k * (j - i));
                if (f.categoryMode != 0) {
                    l -= 0.5;
                }
                g = l;
            }
            return g;
        }
        sh() {
            if (this.parentSeries == null) {
                return null;
            }
            return this.parentSeries.sh();
        }
        v3(a, b) {
            let c = a.left + a.width / 2;
            let d = a.top + a.height / 2;
            let e = c - (a.width / 2);
            let f = d - ((a.height / 2) + b);
            let g = a.height + b * 2;
            let h = a.width;
            return new Rect(0, e, f, h, g);
        }
        p3(a) {
            if (this.rw() == null) {
                return Rect.empty;
            }
            let b = this.pn(a);
            let c = this.b1.bv;
            let d = this.b1.bu;
            let e = this.getEffectiveViewport1(this.b1);
            let f = this.rw();
            let g = new ScalerParams(0, c, d, f.cg, e);
            let h = this.aj(this.rw(), this.rx.f, this.sx(this.b1), this.sy(this.b1), a, true);
            if (h == null) {
                return Rect.empty;
            }
            let i = h[0];
            let j = h[1];
            let k = Math.abs(b.y - i[0]);
            let l = Math.abs(b.y - j[0]);
            let m = f.k3(c, d, e);
            if (k < l) {
                let n = i[0] - 0.5 * m;
                let o = i[2];
                let p = i[1];
                return new Rect(0, o, n, Math.max(p, o) - Math.min(p, o), m);
            }
            else {
                let q = j[0] - 0.5 * m;
                let r = j[2];
                let s = j[1];
                return new Rect(0, r, q, Math.max(s, r) - Math.min(s, r), m);
            }
        }
        ez(a, b) {
            if (this.e2(a, b)) {
                return true;
            }
            if (this.qo(a, b)) {
                return true;
            }
            return false;
        }
        vo(a, b, c, d, e, f, g, h) {
            let i = c[0];
            let j = e < 0 ? c[2] : c[1];
            let k = new Rect(0, j - 5, i - 5, 11, 11);
            if (!isNaN_(j) && !isNaN_(i) && !isInfinity(j) && !isInfinity(i) && d.tryAdd(k)) {
                b.m.add({ $type: Point_$type, x: j, y: i });
                a.updateMarkerTemplate(g, f, h);
                return true;
            }
            return false;
        }
        hy(a) {
            let b = 0;
            if (typeCast(ISortingAxis_$type, this.barFragmentYAxis) !== null) {
                b = this.hk(a);
                if (b == -1) {
                    return null;
                }
            }
            else {
                b = this.hi(a);
            }
            return b >= 0 && this.cl != null && b < this.cl.count ? this.cl.item(b) : null;
        }
        hk(a) {
            let b = this.b1.bv;
            let c = this.b1.bu;
            if (b.isEmpty || c.isEmpty) {
                return -1;
            }
            let d = this.getEffectiveViewport1(this.b1);
            let e = new ScalerParams(0, b, c, this.barFragmentYAxis.cg, d);
            let f = typeCast(ISortingAxis_$type, this.barFragmentYAxis);
            let g = this.pz(this.b1);
            let h = this.barFragmentYAxis.el(g.top, e);
            let i = this.barFragmentYAxis.el(g.bottom, e);
            let j = (a.y - b.top) / b.height;
            let k = h + ((i - h) * j);
            if (truncate(k) <= dateMinValue().getTime() || truncate(k) >= dateMaxValue().getTime()) {
                return -1;
            }
            let l = f.i$f(k);
            return l;
        }
        t1(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.barFragmentXAxis.cg, e);
            if (!c.isEmpty && !d.isEmpty && this.barFragmentXAxis != null) {
                b = this.barFragmentXAxis.ei(0, f);
            }
            return b;
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            if (this.parentSeries == null || this.barFragmentXAxis == null) {
                return;
            }
            let e = this.barFragmentXAxis;
            switch (b) {
                case "ValueColumn":
                    if (this.tp.c3) {
                        this.tp.c2.g$i();
                    }
                    if (e != null && !e.c0()) {
                        this.parentSeries.tp().cr.g(this.fx);
                        this.mn(false);
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    BarFragment.$t = /*@__PURE__*/ markType(BarFragment, 'BarFragment', ColumnFragment.$);
    return BarFragment;
})();
/**
 * @hidden
 */
export let AreaFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class AreaFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c0.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c0.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = this.i.c0;
            let g = f.parentSeries;
            let h = typeCast(IStacked100Series_$type, g) !== null;
            let i = this.i.c0.valueColumn;
            let j = g.tm;
            let k = g.tn;
            let l = f.logicalSeriesLink.a7;
            let m = f.logicalSeriesLink.a6;
            for (let n = b; n <= c; ++n) {
                let o = i.item(n);
                if (isNaN_(o) || isInfinity(o)) {
                    o = 0;
                }
                let p = Math.abs(k[n]) + j[n];
                if (h) {
                    if (p == 0) {
                        o = 0;
                    }
                    else if (o < 0) {
                        o = (l._inner[n] + o) / p * 100;
                    }
                    else {
                        o = (m._inner[n] + o) / p * 100;
                    }
                }
                else {
                    o = o < 0 ? l._inner[n] + o : m._inner[n] + o;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(o)) {
                        d = Math.min(d, o);
                        e = Math.max(e, o);
                    }
                }
                else {
                    d = o;
                    e = o;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    AreaFragmentBucketCalculator.$t = /*@__PURE__*/ markType(AreaFragmentBucketCalculator, 'AreaFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return AreaFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let LineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class LineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucketWithoutUnknowns(a) {
            return this.getBucket(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c0.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c0.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(FragmentBase.$, this.i.c0);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.c0.valueColumn.item(h);
                let j = Math.abs(g.tn[h]) + g.tm[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.a7._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.a6._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.a7._inner[h] + i : f.logicalSeriesLink.a6._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    LineFragmentBucketCalculator.$t = /*@__PURE__*/ markType(LineFragmentBucketCalculator, 'LineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return LineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let SplineFragmentBucketCalculator = /*@__PURE__*/ (() => {
    class SplineFragmentBucketCalculator extends AnchoredCategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = Math.min(a * this.d, this.i.c0.valueColumn.count - 1);
            let c = Math.min(b + this.d - 1, this.i.c0.valueColumn.count - 1);
            let d = NaN;
            let e = NaN;
            let f = typeCast(SplineFragmentBase.$, this.i.c0);
            let g = f.parentSeries;
            for (let h = b; h <= c; ++h) {
                let i = this.i.c0.valueColumn.item(h);
                let j = Math.abs(g.tn[h]) + g.tm[h];
                if (isNaN_(i) || isInfinity(i)) {
                    i = 0;
                }
                if (typeCast(IStacked100Series_$type, g) !== null) {
                    if (j == 0) {
                        i = 0;
                    }
                    else if (i < 0) {
                        i = (f.logicalSeriesLink.a7._inner[h] + i) / j * 100;
                    }
                    else {
                        i = (f.logicalSeriesLink.a6._inner[h] + i) / j * 100;
                    }
                }
                else {
                    i = i < 0 ? f.logicalSeriesLink.a7._inner[h] + i : f.logicalSeriesLink.a6._inner[h] + i;
                }
                if (!isNaN_(d)) {
                    if (!isNaN_(i)) {
                        d = Math.min(d, i);
                        e = Math.max(e, i);
                    }
                }
                else {
                    d = i;
                    e = i;
                }
            }
            if (!isNaN_(d)) {
                return [0.5 * (b + c), d, e];
            }
            return [0.5 * (b + c), NaN, NaN];
        }
    }
    SplineFragmentBucketCalculator.$t = /*@__PURE__*/ markType(SplineFragmentBucketCalculator, 'SplineFragmentBucketCalculator', AnchoredCategoryBucketCalculator.$);
    return SplineFragmentBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            let b = typeCast(StackedSeriesBase.$, this.c.ct);
            let c = Math.min(b.tn != null ? b.tn.length : 0, b.tm != null ? b.tm.length : 0);
            let d = Math.min(a * this.d, c - 1);
            let e = Math.min(d + this.d - 1, c - 1);
            let f = NaN;
            let g = NaN;
            for (let h = d; h <= e; ++h) {
                let i = Math.min(b.tn[h], b.tm[h]);
                let j = Math.max(b.tn[h], b.tm[h]);
                if (!isNaN_(f)) {
                    if (!isNaN_(i)) {
                        f = Math.min(f, i);
                        g = Math.max(g, i);
                    }
                    if (!isNaN_(j)) {
                        f = Math.min(f, j);
                        g = Math.max(g, j);
                    }
                }
                else {
                    f = i;
                    g = j;
                }
            }
            if (!isNaN_(f) && !isNaN_(g)) {
                return [0.5 * (d + e), f, g];
            }
            return [NaN, NaN, NaN];
        }
        getBucket1(a, b, c, d, e, f) {
            return null;
        }
    }
    StackedBucketCalculator.$t = /*@__PURE__*/ markType(StackedBucketCalculator, 'StackedBucketCalculator', CategoryBucketCalculator.$);
    return StackedBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedBarBucketCalculator = /*@__PURE__*/ (() => {
    class StackedBarBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        g(a) {
            let b = this.c.bv;
            let c = this.c.bu;
            let d = typeCast(StackedBarSeries.$, this.c.ct);
            let e = this.c.ct.cl;
            if (b.isEmpty || c.isEmpty || d.yAxis == null || e == null || e.count == 0) {
                this.d = 0;
                return;
            }
            let f = d.getEffectiveViewport1(this.c);
            let g = new ScalerParams(0, b, c, d.yAxis.cg, f);
            let h = d.pz(this.c);
            let i = Math.floor(d.yAxis.em(h.top, g, 0));
            let j = Math.ceil(d.yAxis.em(h.bottom, g, 0));
            if (!d.yAxis.cg) {
                j = Math.ceil(d.yAxis.em(h.top, g, 0));
                i = Math.floor(d.yAxis.em(h.bottom, g, 0));
            }
            let k = Math.floor((j - i + 1) * a / h.height);
            this.d = truncate(Math.max(1, k));
            this.e = truncate(Math.max(0, Math.floor(i / this.d) - 1));
            this.f = truncate(Math.ceil(j / this.d));
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(BarFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedBarSeries.$, this.c.ct);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.tn != null ? i.tn.length : 0, i.tm != null ? i.tm.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            if (r <= s) {
                for (let t = r; t <= s; ++t) {
                    j = a.valueColumn.item(t);
                    if (j < k) {
                        o = Math.min(o, h.logicalSeriesLink.a7._inner[t] + j);
                        n = Math.max(n, h.logicalSeriesLink.a7._inner[t]);
                    }
                    else {
                        o = Math.min(o, h.logicalSeriesLink.a6._inner[t]);
                        n = Math.max(n, h.logicalSeriesLink.a6._inner[t] + j);
                    }
                    if (!isNaN_(l)) {
                        if (!isNaN_(o)) {
                            l = Math.min(l, o);
                            m = Math.max(m, o);
                        }
                        if (!isNaN_(n)) {
                            l = Math.min(l, n);
                            m = Math.max(m, n);
                        }
                    }
                    else {
                        l = o;
                        m = n;
                    }
                }
            }
            let u = new ScalerParams(0, d, e, i.xAxis.cg, p);
            g = [f.f._inner[b - this.e][0], i.xAxis.ei(m, u), i.xAxis.ei(l, u)];
            return g;
        }
    }
    StackedBarBucketCalculator.$t = /*@__PURE__*/ markType(StackedBarBucketCalculator, 'StackedBarBucketCalculator', StackedBucketCalculator.$);
    return StackedBarBucketCalculator;
})();
/**
 * @hidden
 */
export let StackedColumnBucketCalculator = /*@__PURE__*/ (() => {
    class StackedColumnBucketCalculator extends StackedBucketCalculator {
        constructor(a) {
            super(a);
        }
        getBucket(a) {
            return super.getBucket(a);
        }
        getBucket1(a, b, c, d, e, f) {
            let g = [NaN, NaN, NaN];
            let h = typeCast(ColumnFragment.$, a);
            if (h == null || h.logicalSeriesLink == null) {
                return g;
            }
            let i = typeCast(StackedColumnSeries.$, this.c.ct);
            let j = a.valueColumn.item(c);
            let k = 0;
            let l = NaN;
            let m = NaN;
            let n = Number.NEGATIVE_INFINITY;
            let o = Number.POSITIVE_INFINITY;
            let p = i.getEffectiveViewport1(this.c);
            let q = Math.min(i.tn != null ? i.tn.length : 0, i.tm != null ? i.tm.length : 0);
            let r = c * this.d;
            let s = Math.min(r + this.d - 1, q - 1);
            if (r <= s) {
                for (let t = r; t <= s; ++t) {
                    j = a.valueColumn.item(t);
                    if (j < k) {
                        o = Math.min(o, h.logicalSeriesLink.a7._inner[t] + j);
                        n = Math.max(n, h.logicalSeriesLink.a7._inner[t]);
                    }
                    else {
                        o = Math.min(o, h.logicalSeriesLink.a6._inner[t]);
                        n = Math.max(n, h.logicalSeriesLink.a6._inner[t] + j);
                    }
                    if (!isNaN_(l)) {
                        if (!isNaN_(o)) {
                            l = Math.min(l, o);
                            m = Math.max(m, o);
                        }
                        if (!isNaN_(n)) {
                            l = Math.min(l, n);
                            m = Math.max(m, n);
                        }
                    }
                    else {
                        l = o;
                        m = n;
                    }
                }
            }
            let u = new ScalerParams(0, d, e, i.yAxis.cg, p);
            g = [f.f._inner[b - this.e][0], i.yAxis.ei(m, u), i.yAxis.ei(l, u)];
            return g;
        }
    }
    StackedColumnBucketCalculator.$t = /*@__PURE__*/ markType(StackedColumnBucketCalculator, 'StackedColumnBucketCalculator', StackedBucketCalculator.$);
    return StackedColumnBucketCalculator;
})();
/**
 * @hidden
 */
export let FragmentBaseValueList = /*@__PURE__*/ (() => {
    class FragmentBaseValueList extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        indexOf(a) {
            throw new NotImplementedException(0);
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                throw new NotImplementedException(0);
                return b;
            }
            else {
                let b = false;
                if (this.a.parentSeries != null) {
                    b = this.a.parentSeries.tx;
                }
                let c = this.a.parentSeries;
                if (c == null) {
                    return NaN;
                }
                if (c.tn == null || c.tm == null || c.tn.length == 0 || c.tm.length == 0) {
                    return NaN;
                }
                let d = this.a.valueColumn.item(a);
                let e = Math.abs(c.tn[a]) + c.tm[a];
                let f = this.a.logicalSeriesLink.a6;
                let g = this.a.logicalSeriesLink.a7;
                if (isNaN_(d) || isInfinity(d)) {
                    d = 0;
                }
                if (b) {
                    if (e == 0) {
                        d = 0;
                    }
                    else if (d < 0) {
                        d = (g._inner[a] + d) / e * 100;
                    }
                    else {
                        d = (f._inner[a] + d) / e * 100;
                    }
                }
                else {
                    d = d < 0 ? g._inner[a] + d : f._inner[a] + d;
                }
                return d;
            }
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            throw new NotImplementedException(0);
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
        get count() {
            return this.a.valueColumn.count;
        }
        get isReadOnly() {
            throw new NotImplementedException(0);
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        getEnumerator() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            return this.getEnumerator();
        }
    }
    FragmentBaseValueList.$t = /*@__PURE__*/ markType(FragmentBaseValueList, 'FragmentBaseValueList', Base.$, [/*@__PURE__*/ IList$1_$type.specialize(Number_$type)]);
    return FragmentBaseValueList;
})();
/**
 * @hidden
 */
export let LineFragment = /*@__PURE__*/ (() => {
    class LineFragment extends FragmentBase {
        get_d4() {
            return true;
        }
        constructor() {
            super();
            this.ab = LineFragment.$;
        }
        by() {
            return new LineFragmentView(this);
        }
        l4(a) {
            super.l4(a);
            this.vt = a;
        }
        vv(a, b) {
            let c = this.vt.df.an;
            if (this.e1(a, c)) {
                return true;
            }
            return false;
        }
        get_dg() {
            return true;
        }
        ez(a, b) {
            if (this.vu(a, b)) {
                return true;
            }
            if (this.vv(a, b)) {
                return true;
            }
            if (this.qo(a, b)) {
                return true;
            }
            return false;
        }
        vu(a, b) {
            let c = this.vt.dg.an;
            if (this.e0(a, b, c)) {
                return true;
            }
            let d = this.vt.dh.an;
            if (this.e0(a, b, d)) {
                return true;
            }
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        k2(a, b) {
            super.k2(a, b);
            let c = b;
            c.db();
        }
        tf(a, b) {
            super.tf(a, b);
            let c = (d) => a.f._inner[d][0];
            let d = (e) => a.f._inner[e][1];
            let e = (f) => a.f._inner[f][0];
            let f = (g) => a.f._inner[g][2];
            this.vk.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let g = b.cr.d;
            let h = typeCast(LineFragmentView.$, b);
            let i = this.getEffectiveViewport1(b);
            let j = a.f;
            this.r5.a2(this, this.sp(), runOn(this, this.rq), this.sx(b), this.sy(b));
            let k = false;
            let l = this.r5.b;
            if (l != null) {
                k = true;
            }
            if (k) {
                let m = new ScalerParams(0, b.bv, b.bu, this.u0.cg, i);
                this.tb(j, -1, this.valueColumn.count, this.u0, m, b.q);
            }
            this.r5.ad(h.dg, true, false, true, false);
            this.r5.ad(h.dh, true, false, true, false);
            this.r5.ad(h.df, false, true, false, false);
            h.df._opacity = 0.75 * this.r5.j;
            this.vk.m(h.dg, h.df, h.dh, a.f.count, a.f, true, 0, this.tn(a.f, a.f.count - 1, b.bu, b.bv), g, this.fx);
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    LineFragment.$t = /*@__PURE__*/ markType(LineFragment, 'LineFragment', FragmentBase.$);
    return LineFragment;
})();
/**
 * @hidden
 */
export let SplineFragmentBase = /*@__PURE__*/ (() => {
    class SplineFragmentBase extends SplineSeriesBase {
        get logicalSeriesLink() {
            return this._logicalSeriesLink;
        }
        set logicalSeriesLink(a) {
            this._logicalSeriesLink = a;
        }
        constructor() {
            super();
            this._logicalSeriesLink = null;
            this.v3 = null;
            this.v5 = null;
            this.v3 = new CategoryLineRasterizer();
        }
        get parentSeries() {
            return this.v5;
        }
        set parentSeries(a) {
            this.v5 = a;
        }
        get_dr() {
            return false;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get_dx() {
            return true;
        }
        ju() {
            if (this.logicalSeriesLink != null) {
                return this.logicalSeriesLink.en;
            }
            return null;
        }
        ps(a, b, c) {
            return this.pu(a, b, c, this.r2.r(this.rw(), this.b1.bv, this.b1.bu, this.getEffectiveViewport1(this.b1)), this.sh(), this.rw(), runOn(this, this.v7), (d, e) => this.hp(d, e, this.rw(), runOn(this, this.sv), new SplineFragmentBaseValueList(this)), (d, e) => this.hn(d, e, this.rw(), runOn(this, this.sv), new SplineFragmentBaseValueList(this)));
        }
        ag() {
            return [this.rw(), this.sh()];
        }
        v7(a, b, c) {
            if (this.ce == null) {
                return NaN;
            }
            let d = this.getEffectiveViewport1(this.b1);
            let e = new ScalerParams(0, this.ce.ta, this.b1.bu, this.rw().cg, d);
            let f = this.r2.r(this.rw(), this.ce.ta, this.b1.bu, d);
            return this.gp(new SplineFragmentBaseValueList(this), a, this.rw(), e, f, runOn(this, this.sv), b, c);
        }
        hh() {
            let a = this.parentSeries;
            if (a.index == -1 || a.tu == null || a.tu.f.indexOf(this) == -1) {
                return -1;
            }
            return a.tu.f.indexOf(this);
        }
        resolveLegendIndex() {
            let a = this.parentSeries;
            if (a.ty) {
                return -1 + a.index + a.tq.count - a.tu.f.indexOf(this);
            }
            return super.resolveLegendIndex();
        }
        hl() {
            let a = this.parentSeries;
            if (a.index == -1 || a.series.count == 0 || a.series.indexOf(this.logicalSeriesLink) == -1) {
                return -1;
            }
            return a.series.indexOf(this.logicalSeriesLink);
        }
        bg() {
            return this.parentSeries;
        }
        vp(a, b, c, d, e, f, g) {
            let h = b[0];
            let i = b[1];
            let j = new Rect(0, h - 5, i - 5, 11, 11);
            if (!isNaN_(h) && !isNaN_(i) && !isInfinity(h) && !isInfinity(i) && c.tryAdd(j)) {
                a.m.add({ $type: Point_$type, x: h, y: i });
                let k = f.cu.item(e);
                k.content.item = this.cl.item(d);
                k.al = g;
                return true;
            }
            return false;
        }
        fd(a, b, c) {
            let d = super.fd(a, b, c);
            let e = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let f = this.parentSeries.fetchYAxis();
            if (this.parentSeries == null || e == null || e.itemsSource == null || f == null || this.parentSeries.cl == null || e.bh == null || f.bh == null) {
                d = false;
            }
            if (this.valueColumn == null) {
                return false;
            }
            if (isInfinity(this.valueColumn.minimum) && isInfinity(this.valueColumn.maximum)) {
                d = false;
            }
            if (isNaN_(this.valueColumn.minimum) && isNaN_(this.valueColumn.maximum)) {
                d = false;
            }
            return d;
        }
        aq(a) {
            return null;
        }
        v8(a, b, c, d, e, f) {
            let g = typeCast(ISortingAxis_$type, d);
            if (g == null) {
                return;
            }
            let h = this.getEffectiveViewport1(f);
            let i = new ScalerParams(0, b, c, d.cg, h);
            let j = new ScalerParams(0, b, c, e.cg, h);
            let k = d.el(2, i) - d.el(1, i);
            let l = this.qn();
            let m = 0;
            let n = this.vt(d, b, c, h);
            let o = (p) => Math.abs(this.parentSeries.tn[p]) + this.parentSeries.tm[p];
            let p = (q) => q;
            let q = (r) => {
                let s = g.i$b._inner[r];
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    return this.valueColumn.item(s) < 0 ? (this.logicalSeriesLink.a7._inner[s] + this.valueColumn.item(s)) / o(s) * 100 : (this.logicalSeriesLink.a6._inner[s] + this.valueColumn.item(s)) / o(s) * 100;
                }
                else {
                    return this.valueColumn.item(s) < 0 ? this.logicalSeriesLink.a7._inner[s] + this.valueColumn.item(s) : this.logicalSeriesLink.a6._inner[s] + this.valueColumn.item(s);
                }
            };
            let r = this.r6.cr.f;
            let s = this.r6.cr.e;
            let t = truncate(Math.ceil(c.width / (r - s)));
            let u = new CollisionAvoider();
            let v = this.r6.cr.d;
            if (v <= 0 || (s <= 0 && r <= 0)) {
                this.r6.cu.count = m;
                return;
            }
            let w = 0;
            for (let x = s; x < r + 1; ++x) {
                let y = null;
                let z = x * v;
                if (g != null && g.i$b != null && z >= 0 && z < g.i$b.count) {
                    z = g.i$b._inner[z];
                }
                if (x >= (this.valueColumn.count - 1)) {
                    if (l && this.vp(a, a.f._inner[a.f.count - 1], u, Math.min(z, this.cl.count - 1), m, f, w - 1)) {
                        ++m;
                    }
                    break;
                }
                let aa = p(x);
                let ab = q(x);
                let ac = p(x + 1);
                let ad = q(x + 1);
                let ae = ac - aa;
                let af = this.vl[x];
                let ag = this.vl[x + 1];
                let ah = g.i$d(g.i$b._inner[x]);
                let ai = d.ei(ah, i) + n;
                let aj = e.ei(ab, j);
                a.f.add([ai, aj, aj]);
                w++;
                for (let ak = 1; ak < t; ++ak) {
                    let al = ak / t;
                    let am = aa + ae * al;
                    let an = (ac - am) / ae;
                    let ao = (am - aa) / ae;
                    let ap = an * ab + ao * ad + ((an * an * an - an) * af + (ao * ao * ao - ao) * ag) * (ae * ae) / 6;
                    let aq = g.i$d(g.i$b._inner[x]);
                    let ar = g.i$d(g.i$b._inner[x + 1]);
                    if (aq == ar && ab == ad) {
                        break;
                    }
                    let as = aq + (ar - aq) * al;
                    am = d.ei(as, i) + n;
                    ap = e.ei(ap, j);
                    a.f.add([am, ap, ap]);
                    w++;
                }
                if (l) {
                    y = [ai, aj, aj];
                }
                if (l && this.vp(a, y, u, Math.min(z, this.cl.count - 1), m, f, w - 1)) {
                    ++m;
                }
            }
            this.r6.cu.count = m;
        }
        tc(a, b) {
            a.u();
            if (this.valueColumn == null || this.parentSeries == null || this.logicalSeriesLink == null) {
                return;
            }
            if (this.logicalSeriesLink.a7.count == 0 || this.logicalSeriesLink.a6.count == 0) {
                return;
            }
            if (this.r6.cr.d == 0) {
                return;
            }
            super.tc(a, b);
            if (a.f.count <= 1) {
                return;
            }
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = typeCast(CategoryAxisBase.$, this.parentSeries.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.parentSeries.fetchYAxis());
            let h = new ScalerParams(0, c, d, f.cg, e);
            let i = new ScalerParams(0, c, d, g.cg, e);
            a.f.clear();
            a.m.clear();
            let j = this.qn();
            let k = 0;
            let l;
            let m;
            if (b.p) {
                l = this.parentSeries.to;
                m = this.parentSeries.a7.a$h.item(b.ad);
            }
            else if (b == this.b0) {
                l = this.parentSeries.r0;
                m = typeCast(CategorySeriesView.$, this.parentSeries.b0);
            }
            else {
                l = this.parentSeries.rx;
                m = this.parentSeries.r6;
            }
            let n = m.cr.d;
            let o = typeCast(ISortingAxis_$type, f);
            if (o != null && o.i$b.count != this.cl.count) {
                return;
            }
            let p = this.preferredCategoryMode(f);
            if (p == 0 && f.categoryMode != 0) {
                p = 1;
            }
            let q = 0;
            switch (p) {
                case 0:
                    q = 0;
                    break;
                case 1:
                    q = 0.5 * f.getCategorySize(c, d, e);
                    break;
                case 2:
                    let r = this.index;
                    q = f.getGroupCenter(this.index, c, d, e);
                    break;
            }
            if (f.cg) {
                q = -q;
            }
            let s = (t) => Math.abs(this.parentSeries.tn[t]) + this.parentSeries.tm[t];
            let t = (u) => u;
            let u = (v) => {
                let w = this.valueColumn.item(v);
                if (isNaN_(w) || isInfinity(w)) {
                    w = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (s(v) == 0) {
                        return 0;
                    }
                    return w < 0 ? (this.logicalSeriesLink.a7._inner[v] + w) / s(v) * 100 : (this.logicalSeriesLink.a6._inner[v] + w) / s(v) * 100;
                }
                return w < 0 ? this.logicalSeriesLink.a7._inner[v] + w : this.logicalSeriesLink.a6._inner[v] + w;
            };
            let v = b.cr.d;
            this.vy(b);
            let w = m.cr.e;
            let x = m.cr.f;
            let y = truncate(Math.ceil(d.width / (x - w)));
            let z = new CollisionAvoider();
            if (o != null) {
                this.v8(a, c, d, f, g, b);
                return;
            }
            let aa = 0;
            let ab = 0;
            for (let ac = w; ac < x + 1; ++ac) {
                if (ac >= this.valueColumn.count) {
                    break;
                }
                let ad = null;
                if (v == 1) {
                    if (ac >= (this.valueColumn.count - 1)) {
                        if (j && a.f.count > 0 && this.vp(a, a.f._inner[a.f.count - 1], z, Math.min(ac * v, this.cl.count - 1), k, b, aa - 1)) {
                            ++k;
                        }
                        break;
                    }
                    let ae = t(ac);
                    let af = t(ac + 1);
                    let ag = u(ac);
                    let ah = u(ac + 1);
                    let ai = af - ae;
                    let aj = this.vl[ac];
                    let ak = this.vl[ac + 1];
                    let al = f.ei(ae, h) + q;
                    let am = g.ei(ag, i);
                    a.f.add([al, am, am]);
                    aa++;
                    ab = aa;
                    for (let an = 1; an < y; ++an) {
                        let ao = ae + ai * an / y;
                        let ap = (af - ao) / ai;
                        let aq = (ao - ae) / ai;
                        let ar = ap * ag + aq * ah + ((ap * ap * ap - ap) * aj + (aq * aq * aq - aq) * ak) * (ai * ai) / 6;
                        ao = f.ei(ao, h) + q;
                        ar = g.ei(ar, i);
                        a.f.add([ao, ar, ar]);
                        aa++;
                    }
                    if (j) {
                        ad = [al, am, am];
                    }
                }
                else {
                    ad = b.cr.getBucket(ac);
                    if (!isNaN_(ad[0])) {
                        ad[0] = f.ei(ad[0], h) + q;
                        ad[1] = g.ei(ad[1], i);
                        ad[2] = g.ei(ad[2], i);
                        a.f.add(ad);
                        aa++;
                        ab = aa;
                    }
                }
                if (j && this.vp(a, ad, z, Math.min(ac * v, this.cl.count - 1), k, b, ab - 1)) {
                    ++k;
                }
            }
            b.cu.count = k;
        }
        vj(a) {
            let b = (c) => Math.abs(this.parentSeries.tn[c]) + this.parentSeries.tm[c];
            let c = (d) => d;
            let d = (e) => {
                let f = this.valueColumn.item(e);
                if (isNaN_(f) || isInfinity(f)) {
                    f = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (b(e) == 0) {
                        return 0;
                    }
                    return f < 0 ? (this.logicalSeriesLink.a7._inner[e] + f) / b(e) * 100 : (this.logicalSeriesLink.a6._inner[e] + f) / b(e) * 100;
                }
                return f < 0 ? this.logicalSeriesLink.a7._inner[e] + f : this.logicalSeriesLink.a6._inner[e] + f;
            };
            let e = new List$1(Array_$type, 0);
            let f = a.bv;
            let g = a.bu;
            let h = typeCast(ISortingAxis_$type, this.u0);
            let i = 0;
            let j = 0;
            let k = 0;
            let l = this.fx;
            let m = this.pz(this.b1);
            let n = this.u0;
            let o = this.getEffectiveViewport1(a);
            if (h == null || h.i$b == null) {
                let p = new ScalerParams(0, f, g, n.cg, o);
                let q = 0;
                let r = n.lf - 1;
                let s = Math.floor((r - q + 1) * l / m.width);
                i = truncate(Math.max(1, s));
                j = truncate(Math.max(0, Math.floor(q / i) - 1));
                k = truncate(Math.ceil(r / i));
            }
            else {
                j = 0;
                k = n.lf - 1;
                i = 1;
            }
            let t = truncate(Math.ceil(g.width / (k - j)));
            let u = new CollisionAvoider();
            if (h != null) {
                return this.vk(a);
            }
            let v = 0;
            let w = 0;
            for (let x = j; x < k + 1; ++x) {
                if (x >= this.valueColumn.count) {
                    break;
                }
                let y = null;
                if (i == 1) {
                    if (x >= (this.valueColumn.count - 1)) {
                        break;
                    }
                    let z = c(x);
                    let aa = c(x + 1);
                    let ab = d(x);
                    let ac = d(x + 1);
                    let ad = aa - z;
                    let ae = this.vl[x];
                    let af = this.vl[x + 1];
                    e.add([ab, ab]);
                    for (let ag = 1; ag < t; ++ag) {
                        let ah = z + ad * ag / t;
                        let ai = (aa - ah) / ad;
                        let aj = (ah - z) / ad;
                        let ak = ai * ab + aj * ac + ((ai * ai * ai - ai) * ae + (aj * aj * aj - aj) * af) * (ad * ad) / 6;
                        e.add([ak, ak]);
                    }
                }
                else {
                    y = a.cr.getBucket(x);
                    if (!isNaN_(y[0])) {
                        e.add([y[0], y[1]]);
                    }
                }
            }
            return e.toArray();
        }
        vk(a) {
            let b = new List$1(Array_$type, 0);
            let c = a.bv;
            let d = a.bu;
            let e = this.u0;
            let f = typeCast(ISortingAxis_$type, e);
            if (f == null) {
                return null;
            }
            let g = this.getEffectiveViewport1(a);
            let h = this.qn();
            let i = 0;
            let j = (k) => Math.abs(this.parentSeries.tn[k]) + this.parentSeries.tm[k];
            let k = (l) => l;
            let l = (m) => {
                let n = f.i$b._inner[m];
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    return this.valueColumn.item(n) < 0 ? (this.logicalSeriesLink.a7._inner[n] + this.valueColumn.item(n)) / j(n) * 100 : (this.logicalSeriesLink.a6._inner[n] + this.valueColumn.item(n)) / j(n) * 100;
                }
                else {
                    return this.valueColumn.item(n) < 0 ? this.logicalSeriesLink.a7._inner[n] + this.valueColumn.item(n) : this.logicalSeriesLink.a6._inner[n] + this.valueColumn.item(n);
                }
            };
            let m = 0;
            let n = 0;
            let o = 0;
            let p = this.fx;
            let q = this.pz(this.b1);
            if (f == null || f.i$b == null) {
                let r = 0;
                let s = e.lf - 1;
                let t = Math.floor((s - r + 1) * p / q.width);
                m = truncate(Math.max(1, t));
                n = truncate(Math.max(0, Math.floor(r / m) - 1));
                o = truncate(Math.ceil(s / m));
            }
            else {
                n = 0;
                o = e.lf - 1;
                m = 1;
            }
            if (m <= 0 || (n <= 0 && o <= 0)) {
                this.r6.cu.count = i;
                return null;
            }
            let u = truncate(Math.ceil(d.width / (o - n)));
            let v = new CollisionAvoider();
            let w = 0;
            for (let x = n; x < o + 1; ++x) {
                let y = null;
                if (x >= (this.valueColumn.count - 1)) {
                    break;
                }
                let z = k(x);
                let aa = l(x);
                let ab = k(x + 1);
                let ac = l(x + 1);
                let ad = ab - z;
                let ae = this.vl[x];
                let af = this.vl[x + 1];
                b.add([aa, aa]);
                for (let ag = 1; ag < u; ++ag) {
                    let ah = ag / u;
                    let ai = z + ad * ah;
                    let aj = (ab - ai) / ad;
                    let ak = (ai - z) / ad;
                    let al = aj * aa + ak * ac + ((aj * aj * aj - aj) * ae + (ak * ak * ak - ak) * af) * (ad * ad) / 6;
                    b.add([al, al]);
                }
            }
            return b.toArray();
        }
        vy(a) {
            super.vy(a);
            let b = (c) => Math.abs(this.parentSeries.tn[c]) + this.parentSeries.tm[c];
            let c = (d) => d;
            let d = (e) => {
                let f = this.valueColumn.item(e);
                if (isNaN_(f) || isInfinity(f)) {
                    f = 0;
                }
                if (typeCast(IStacked100Series_$type, this.parentSeries) !== null) {
                    if (b(e) == 0) {
                        return 0;
                    }
                    return f < 0 ? (this.logicalSeriesLink.a7._inner[e] + f) / b(e) * 100 : (this.logicalSeriesLink.a6._inner[e] + f) / b(e) * 100;
                }
                return f < 0 ? this.logicalSeriesLink.a7._inner[e] + f : this.logicalSeriesLink.a6._inner[e] + f;
            };
            let e = this.u0;
            let f = this.vn == 0 ? NaN : 0;
            if (e != null && typeCast(ISortingAxis_$type, e) !== null && e.i$b != null) {
                let g = new SafeSortedReadOnlyDoubleCollection(0, this.valueColumn, e.i$b);
                d = (h) => g.item(h);
            }
            this.vl = Numeric.c(this.valueColumn.count, c, d, f, f);
            if (this.vo) {
                let h = -1.7976931348623157E+308;
                let i = 1.7976931348623157E+308;
                let j = this.vj(a);
                if (j == null) {
                    return;
                }
                for (let k = 0; k < j.length; k++) {
                    if (isNaN_(j[k][0]) || isNaN_(j[k][1])) {
                        continue;
                    }
                    if (j[k][1] > h) {
                        h = j[k][1];
                    }
                    if (j[k][0] < i) {
                        i = j[k][0];
                    }
                }
                this.vv = i;
                this.vu = h;
            }
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            switch (b) {
                case "ActualBrush":
                    if (this.logicalSeriesLink != null) {
                        this.logicalSeriesLink.j7 = this.o5;
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    SplineFragmentBase.$t = /*@__PURE__*/ markType(SplineFragmentBase, 'SplineFragmentBase', SplineSeriesBase.$);
    return SplineFragmentBase;
})();
/**
 * @hidden
 */
export let SplineAreaFragment = /*@__PURE__*/ (() => {
    class SplineAreaFragment extends SplineFragmentBase {
        constructor() {
            super();
            this.wd = null;
            this.ab = SplineAreaFragment.$;
        }
        by() {
            return new SplineAreaFragmentView(this);
        }
        l4(a) {
            super.l4(a);
            this.v9 = typeCast(SplineAreaFragmentView.$, a);
        }
        ac() {
            super.ac();
            this.mn(false);
        }
        get_dg() {
            return true;
        }
        get_df() {
            return true;
        }
        get_ej() {
            return true;
        }
        r7() {
            return 1;
        }
        wb(a, b) {
            let c = this.v9.di.an;
            if (this.e1(a, c)) {
                return true;
            }
            let d = this.v9.dj.an;
            if (this.e1(a, d)) {
                return true;
            }
            return false;
        }
        ez(a, b) {
            if (this.wa(a, b)) {
                return true;
            }
            if (this.wb(a, b)) {
                return true;
            }
            if (this.qo(a, b)) {
                return true;
            }
            return false;
        }
        wa(a, b) {
            let c = this.v9.dk.an;
            if (this.e0(a, b, c)) {
                return true;
            }
            let d = this.v9.dl.an;
            if (this.e0(a, b, d)) {
                return true;
            }
            return false;
        }
        k2(a, b) {
            super.k2(a, b);
            let c = b;
            c.dd();
        }
        tf(a, b) {
            super.tf(a, b);
            this.v3.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = a.f;
            let d = this.getEffectiveViewport1(b);
            this.r5.a2(this, this.sp(), runOn(this, this.rq), this.sx(b), this.sy(b));
            let e = false;
            let f = this.r5.b;
            if (f != null) {
                e = true;
            }
            if (e) {
                let g = new ScalerParams(0, b.bv, b.bu, this.u0.cg, d);
                this.tb(c, -1, this.valueColumn.count, this.u0, g, b.q);
            }
            let h = typeCast(SplineAreaFragmentView.$, b);
            let i = b.cr.d;
            this.r5.ad(h.dk, true, false, true, true);
            this.r5.ad(h.dl, true, false, true, true);
            this.r5.ad(h.di, false, true, false, false);
            this.r5.ad(h.dj, false, true, false, false);
            h.di._opacity = this.r5.j * this.fu;
            h.dj._opacity = 0.5 * this.r5.j * this.fu;
            this.v3.i(h.di, h.dk, h.dj, h.dl, a.f.count, a.f, true, i, this.fx, (j, k, l, m, n) => this.wc(j, a.f, b), 1);
        }
        mp(a, b) {
            super.mp(a, b);
        }
        wc(a, b, c) {
            let d = this.t1(c);
            let e = d;
            let f = this.logicalSeriesLink.ay;
            let g = f ? this.parentSeries.tu.e : this.parentSeries.tu.d;
            let h = g.indexOf(this);
            if (a.count == 0) {
                return;
            }
            if (h == -1) {
                return;
            }
            let i = false;
            for (let j = h; j >= 0; j--) {
                if (i) {
                    break;
                }
                if (j == 0) {
                    a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                    a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
                    break;
                }
                let k = typeCast(SplineFragmentBase.$, g._inner[j - 1]);
                if (k != null && k.v3 != null && k.v3.o.count > 0 && this.b1 != null && k.fd(this.b1.bu, this.b1.bv, this.b1)) {
                    i = true;
                    for (let l = k.v3.o.count - 1; l >= 0; l--) {
                        a.add(k.v3.o._inner[l]);
                    }
                }
            }
        }
        t1(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = new ScalerParams(0, c, d, this.yAxis.cg, e);
            if (!c.isEmpty && !d.isEmpty && this.yAxis != null) {
                b = this.yAxis.ei(0, f);
            }
            return b;
        }
        my() {
            let a = (typeCast(XamDataChart.$, this.ce));
            if (a != null) {
                this.fu = isNaN_(this.f3) ? this.parentSeries.fu : this.f3;
            }
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    SplineAreaFragment.$t = /*@__PURE__*/ markType(SplineAreaFragment, 'SplineAreaFragment', SplineFragmentBase.$);
    return SplineAreaFragment;
})();
/**
 * @hidden
 */
export let SplineFragment = /*@__PURE__*/ (() => {
    class SplineFragment extends SplineFragmentBase {
        get_ej() {
            return true;
        }
        constructor() {
            super();
            this.ab = SplineFragment.$;
        }
        by() {
            return new SplineFragmentView(this);
        }
        l4(a) {
            super.l4(a);
            this.v9 = a;
        }
        wb(a, b) {
            let c = this.v9.dh.an;
            if (this.e1(a, c)) {
                return true;
            }
            return false;
        }
        get_dg() {
            return true;
        }
        ez(a, b) {
            if (this.wa(a, b)) {
                return true;
            }
            if (this.wb(a, b)) {
                return true;
            }
            if (this.qo(a, b)) {
                return true;
            }
            return false;
        }
        wa(a, b) {
            let c = this.v9.di.an;
            if (this.e0(a, b, c)) {
                return true;
            }
            let d = this.v9.dj.an;
            if (this.e0(a, b, d)) {
                return true;
            }
            return false;
        }
        k2(a, b) {
            super.k2(a, b);
            let c = b;
            c.dd();
        }
        tf(a, b) {
            super.tf(a, b);
            this.v3.a = typeCast(ISortingAxis_$type, this.xAxis) !== null ? true : false;
            let c = typeCast(SplineFragmentView.$, b);
            let d = a.f;
            let e = this.getEffectiveViewport1(b);
            this.r5.a2(this, this.sp(), runOn(this, this.rq), this.sx(b), this.sy(b));
            let f = false;
            let g = this.r5.b;
            if (g != null) {
                f = true;
            }
            if (f) {
                let h = new ScalerParams(0, b.bv, b.bu, this.u0.cg, e);
                this.tb(d, -1, this.valueColumn.count, this.u0, h, b.q);
            }
            this.r5.ad(c.di, true, false, true, false);
            this.r5.ad(c.dj, true, false, true, false);
            this.r5.ad(c.dh, false, true, false, false);
            c.dh._opacity = 0.75 * this.r5.j;
            let i = c.cr.d;
            this.v3.m(c.di, c.dh, c.dj, a.f.count, a.f, true, 1, this.tn(a.f, a.f.count - 1, b.bu, b.bv), i, this.fx);
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    SplineFragment.$t = /*@__PURE__*/ markType(SplineFragment, 'SplineFragment', SplineFragmentBase.$);
    return SplineFragment;
})();
/**
 * @hidden
 */
export let SplineFragmentBaseValueList = /*@__PURE__*/ (() => {
    class SplineFragmentBaseValueList extends Base {
        constructor(a) {
            super();
            this.a = null;
            this.a = a;
        }
        indexOf(a) {
            throw new NotImplementedException(0);
        }
        insert(a, b) {
            throw new NotImplementedException(0);
        }
        removeAt(a) {
            throw new NotImplementedException(0);
        }
        item(a, b) {
            if (arguments.length === 2) {
                throw new NotImplementedException(0);
                return b;
            }
            else {
                let b = false;
                if (this.a.parentSeries != null) {
                    b = this.a.parentSeries.tx;
                }
                let c = this.a.parentSeries;
                if (c == null) {
                    return NaN;
                }
                let d = this.a.valueColumn.item(a);
                let e = Math.abs(c.tn[a]) + c.tm[a];
                let f = this.a.logicalSeriesLink.a6;
                let g = this.a.logicalSeriesLink.a7;
                if (isNaN_(d) || isInfinity(d)) {
                    d = 0;
                }
                if (b) {
                    if (e == 0) {
                        d = 0;
                    }
                    else if (d < 0) {
                        d = (g._inner[a] + d) / e * 100;
                    }
                    else {
                        d = (f._inner[a] + d) / e * 100;
                    }
                }
                else {
                    d = d < 0 ? g._inner[a] + d : f._inner[a] + d;
                }
                return d;
            }
        }
        add(a) {
            throw new NotImplementedException(0);
        }
        clear() {
            throw new NotImplementedException(0);
        }
        contains(a) {
            throw new NotImplementedException(0);
        }
        copyTo(a, b) {
            throw new NotImplementedException(0);
        }
        get count() {
            return this.a.valueColumn.count;
        }
        get isReadOnly() {
            throw new NotImplementedException(0);
        }
        remove(a) {
            throw new NotImplementedException(0);
        }
        getEnumerator() {
            throw new NotImplementedException(0);
        }
        getEnumeratorObject() {
            return this.getEnumerator();
        }
    }
    SplineFragmentBaseValueList.$t = /*@__PURE__*/ markType(SplineFragmentBaseValueList, 'SplineFragmentBaseValueList', Base.$, [/*@__PURE__*/ IList$1_$type.specialize(Number_$type)]);
    return SplineFragmentBaseValueList;
})();
/**
 * @hidden
 */
export let StackedSeriesBase = /*@__PURE__*/ (() => {
    class StackedSeriesBase extends CategorySeries {
        constructor() {
            super();
            this._series = null;
            this.seriesCreated = null;
            this.t4 = 0;
            this.t3 = 0;
            this.tm = null;
            this.tn = null;
            this.tu = null;
            this.tr = null;
            this.t0 = new Dictionary$2(String_$type, Boolean_$type, 0);
            this.to = null;
            this.series = new StackedSeriesCollection();
            let a = this.series;
            a.collectionResetting = delegateCombine(a.collectionResetting, runOn(this, this.ug));
            let b = this.series;
            b.collectionChanged = delegateCombine(b.collectionChanged, runOn(this, this.uf));
            this.r2 = new StackedSeriesFramePreparer(1, this, this.tv, this, this, this.tv.cr);
            this.tu = new StackedSeriesManager(this);
            this.tr = new StackedSeriesCollection();
            let c = this.tr;
            c.collectionChanged = delegateCombine(c.collectionChanged, runOn(this, this.uf));
            let d = this.tr;
            d.collectionResetting = delegateCombine(d.collectionResetting, runOn(this, this.ua));
        }
        lp() {
            for (let a of fromEnum(this.tq)) {
                a.gf();
            }
            super.lp();
        }
        get_d0() {
            return false;
        }
        getHostReferenceValue() {
            return this.gg();
        }
        by() {
            return new StackedSeriesView(this);
        }
        l4(a) {
            super.l4(a);
            this.tv = a;
        }
        l5(a, b) {
            super.l5(a, b);
            for (let c of fromEnum(this.series)) {
                c.visualSeriesLink.b1.bu = b;
            }
        }
        get series() {
            return this._series;
        }
        set series(a) {
            this._series = a;
        }
        hq() {
            if (this.series == null) {
                return -1;
            }
            return this.series.count;
        }
        lf(a) {
            for (let b = 0; b < this.tu.f.count; b++) {
                let c = this.tu.f._inner[b];
                if (!a(c)) {
                    break;
                }
            }
        }
        get_isStacked() {
            return true;
        }
        get tq() {
            return this.tw ? this.tr : this.series;
        }
        ua(a, b) {
            for (let c of fromEnum(this.tr)) {
                if (this.tu != null && this.tu.c.contains(c)) {
                    c.parentSeries = null;
                    this.tu.c.remove(c);
                }
            }
        }
        ug(a, b) {
            for (let c of fromEnum(this.series)) {
                if (this.tu != null && this.tu.c.contains(c)) {
                    c.parentSeries = null;
                    this.tu.c.remove(c);
                }
            }
        }
        uf(a, b) {
            if (b.oldItems != null) {
                for (let c of fromEn(b.oldItems)) {
                    if (this.tu != null && this.tu.c.contains(c)) {
                        c.parentSeries = null;
                        this.tu.c.remove(c);
                    }
                }
            }
            if (b.newItems != null) {
                let d = b.newStartingIndex;
                for (let e of fromEn(b.newItems)) {
                    if (this.tu != null && !this.tu.c.contains(e)) {
                        e.parentSeries = this;
                        e.fv();
                        e.gm();
                        e.gn();
                        e.g1();
                        e.go();
                        e.gp();
                        e.fr();
                        e.fs();
                        e.fu();
                        e.ft();
                        e.fw();
                        e.f2();
                        e.f3();
                        e.f4();
                        e.gd();
                        e.gf();
                        e.f7();
                        e.ga();
                        e.gc();
                        e.gd();
                        e.ge();
                        e.gb();
                        e.f8();
                        e.gz();
                        e.g3();
                        e.g2();
                        e.gg();
                        e.gh();
                        e.gi();
                        e.fq();
                        e.gk();
                        e.gl();
                        e.f5();
                        e.gq();
                        e.f6();
                        e.gs();
                        e.f9();
                        e.gj();
                        e.gt();
                        e.gu();
                        e.fy();
                        e.gy();
                        e.gv();
                        e.gx();
                        e.g0();
                        e.g5();
                        if (!this.tw) {
                            this.tu.c.insert(d, e);
                            d++;
                        }
                    }
                }
            }
            if (!this.tw) {
                this.uh();
            }
        }
        mv(a) {
            this.cc.cu.c8(a, true, false);
        }
        r3(a) {
            if (a != null && a.q) {
                if (a.p) {
                    return new StackedSeriesFramePreparer(1, typeCast(IIsCategoryBased_$type, this), typeCast(ISupportsMarkers_$type, a), a, this, a.cr);
                }
                else {
                    let b = typeCast(CategorySeriesView.$, this.b0);
                    return new StackedSeriesFramePreparer(1, this, typeCast(ISupportsMarkers_$type, b), this.ce.cu.o, this, b.cr);
                }
            }
            else {
                return this.r2;
            }
        }
        tc(a, b) {
            a.u();
            this.ud();
            this.r3(b).d(a, b);
        }
        mo(a) {
            super.mo(a);
            this.tu.h(a);
        }
        k2(a, b) {
            super.k2(a, b);
            for (let c of fromEnum(this.tq)) {
                if (c.visualSeriesLink != null) {
                    c.visualSeriesLink.k2(a, c.visualSeriesLink.b1);
                }
            }
        }
        ub() {
            this.ud();
        }
        uh() {
            let a = this.fetchXAxis();
            if (a != null) {
                a.c1(true);
            }
            let b = this.fetchYAxis();
            if (b != null) {
                b.c1(true);
            }
        }
        get_tx() {
            return false;
        }
        get tx() {
            return this.get_tx();
        }
        eq(a) {
            let b = this.cl != null ? this.cl.indexOf(a) : -1;
            let c = this.ce != null ? this.ce.ta : Rect.empty;
            c = c.copy();
            let d = this.b1.bu;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.p1(this.b1);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                let g = this.fetchXAxis();
                if (g != null) {
                    let h = new ScalerParams(0, e, e, g.cg, f);
                    let i = g.ei(b, h);
                    if (i < c.left + 0.1 * c.width) {
                        i = i + 0.4 * c.width;
                    }
                    if (i > c.right - 0.1 * c.width) {
                        i = i - 0.4 * c.width;
                    }
                    c.x = i - 0.5 * c.width;
                }
                let j = this.fetchYAxis();
                if (j != null && this.tm != null && b < this.tm.length) {
                    let k = new ScalerParams(0, e, e, j.cg, f);
                    let l = j.ei(this.tm[b], k);
                    let m = j.ei(this.tn[b], k);
                    if (!isNaN_(l) && !isNaN_(m)) {
                        let n = Math.abs(m - l);
                        if (c.height < n) {
                            c.height = n;
                            c.y = Math.min(m, l);
                        }
                        else {
                            if (m < c.top + 0.1 * c.height) {
                                m = m + 0.4 * c.height;
                            }
                            if (m > c.bottom - 0.1 * c.height) {
                                m = m - 0.4 * c.height;
                            }
                            c.y = m - 0.5 * c.height;
                        }
                    }
                }
                this.b9.au(this.ce, c, true);
            }
            return b >= 0;
        }
        aq(a) {
            if (this.tn == null || this.tn.length == 0 || this.tm == null || this.tm.length == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                let b = Math.min(this.tn.length, this.tm.length);
                return new AxisRange(0, b - 1);
            }
            if (a == this.fetchYAxis()) {
                return new AxisRange(this.t4, this.t3);
            }
            return null;
        }
        qn() {
            return false;
        }
        k5(a, b, c, d) {
            this.ud();
            this.sr();
            this.mn(true);
        }
        tp() {
            return this.tv;
        }
        t1() {
            let a = 0;
            let b = this.b1.bv;
            let c = this.b1.bu;
            let d = this.getEffectiveViewport1(this.b1);
            let e = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!b.isEmpty && !c.isEmpty && e != null) {
                let f = new ScalerParams(0, b, c, e.cg, d);
                a = e.ei(e.l6, f);
            }
            return a;
        }
        t2() {
            let a = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (a != null) {
                return a.l6;
            }
            return 0;
        }
        t6(a) {
            return this.index < 0 || this.tq == null || this.tq.count == 0 ? -1 : this.index + this.tq.indexOf(a);
        }
        t5(a) {
            let b = this.ce != null ? this.ce.ta : Rect.empty;
            let c = this.b1.bu;
            let d = this.getEffectiveViewport1(this.b1);
            let e = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let f = -1;
            if (e != null && !b.isEmpty && !c.isEmpty) {
                let g = new ScalerParams(0, b, c, e.cg, d);
                let h = this.pz(this.b1);
                let i = e.el(h.left, g);
                let j = e.el(h.right, g);
                let k = (a.x - b.left) / b.width;
                let l = i + (k * (j - i));
                if (e.categoryMode != 0) {
                    l -= 0.5;
                }
                let m = truncate(Math.round(l));
                f = m;
            }
            return f;
        }
        tz(a, b, c, d) {
            let e = true;
            let f = typeCast(CategoryAxisBase.$, this.fetchXAxis());
            let g = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!d.o() || c.isEmpty || b.isEmpty || f == null || f.itemsSource == null || g == null || this.cl == null || f.bh == null || g.bh == null || g.lw == g.lv) {
                e = false;
            }
            let h = d;
            let i = h.cr.d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || i < 1 || a._visibility != 0) {
                e = false;
            }
            return e;
        }
        uc() {
            if (this.ce == null || this.tu == null) {
                return;
            }
            if (!this.tw) {
                this.tr.clear();
                for (let a of fromEnum(this.series)) {
                    if (!this.tu.c.contains(a)) {
                        this.tu.c.add(a);
                    }
                }
                this.uh();
                return;
            }
        }
        tf(a, b) {
            super.tf(a, b);
        }
        ue(a, b, c, d) {
        }
        ar(a) {
            if (a.isEmpty && this.ce != null) {
                a = this.ce.ta;
            }
            let b = this.rw();
            if (this.tm == null || this.tn == null) {
                return null;
            }
            let c = this.pz(this.b1);
            let d = new ScalerParams(0, a, this.ce.tp, b.cg, this.getEffectiveViewport());
            let e = (b.el(c.left, d));
            let f = (b.el(c.right, d));
            if (b.cg) {
                let g = e;
                e = f;
                f = g;
            }
            let h = null;
            if (b.cm) {
                h = b;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            e = Math.max(0, Math.min(this.tn.length - 1, e));
            f = Math.max(0, Math.min(this.tn.length - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            for (let k = truncate(e); k <= truncate(f); k++) {
                let l = k;
                if (h != null) {
                    l = h.i$b._inner[k];
                }
                let m = this.tn[l];
                {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                let n = this.tm[l];
                {
                    if (isInfinity(n) || isNaN_(n)) {
                        continue;
                    }
                }
                i = Math.min(i, m);
                j = Math.max(j, n);
            }
            let o = new AxisRange(i, j);
            let p = this.sh();
            o = this.ap(o, p, a);
            return o;
        }
        mq() {
            super.mq();
            for (let a of fromEnum(this.tq)) {
                a.fo();
            }
        }
        ud() {
            if (this.cl == null) {
                return;
            }
            let a = this.cl.count;
            this.tm = new Array(a);
            this.tn = new Array(a);
            for (let b = 0; b < a; b++) {
                this.tm[b] = 0;
                this.tn[b] = 0;
            }
            this.t4 = Number.POSITIVE_INFINITY;
            this.t3 = Number.NEGATIVE_INFINITY;
            let c = 0;
            for (let d of fromEnum(this.tq)) {
                if (d.itemsSource != null && d.visualSeriesLink == null) {
                    continue;
                }
                if (d.itemsSource != null) {
                    d.aj = d.visualSeriesLink.valueColumn;
                }
                if (d.itemsSource == null) {
                    this.cl.deregisterColumn(d.aj);
                    d.aj = this.ci(d.fg);
                }
                if (d.visualSeriesLink != null && d.itemsSource == null) {
                    d.visualSeriesLink.ty = true;
                    d.visualSeriesLink.valueColumn = d.aj;
                    d.visualSeriesLink.ty = false;
                }
                d.ay = true;
                if (d.aj != null) {
                    d.a6.clear();
                    d.a7.clear();
                    for (let e = 0; e < d.aj.count; e++) {
                        let f = d.aj.item(e);
                        if (f < c) {
                            d.a6.add(c);
                            d.a7.add(this.tn[e]);
                            this.tn[e] = this.tn[e] + f;
                            if (d.ay) {
                                d.ay = false;
                            }
                        }
                        else if (f >= c) {
                            d.a6.add(this.tm[e]);
                            d.a7.add(c);
                            this.tm[e] = this.tm[e] + f;
                        }
                        else if (isNaN_(f) || isInfinity(f)) {
                            d.a6.add(this.tm[e]);
                            d.a7.add(this.tn[e]);
                        }
                    }
                }
            }
            for (let g = 0; g < a; g++) {
                this.t4 = Math.min(this.t4, this.tn[g]);
                this.t3 = Math.max(this.t3, this.tm[g]);
            }
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            switch (b) {
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.k6(this.fetchXAxis());
                        this.k6(this.fetchYAxis());
                    }
                    if (c == null && d != null) {
                        this.me(this.fetchXAxis());
                        this.me(this.fetchYAxis());
                    }
                    if (this.tq != null) {
                        for (let e of fromEnum(this.tq)) {
                            e.ae = this.ce;
                        }
                        this.mn(false);
                    }
                    break;
                case "ItemsSource":
                    if (this.tq != null) {
                        for (let f of fromEnum(this.tq)) {
                            if (f.itemsSource == null) {
                                if (f.visualSeriesLink != null) {
                                    f.visualSeriesLink.itemsSource = d;
                                }
                            }
                        }
                    }
                    break;
                case "FastItemsSource":
                    if (this.tw) {
                        this.uc();
                    }
                    if (!this.sr()) {
                        this.tv.cr.g(this.fx);
                    }
                    this.mn(false);
                    break;
                case StackedSeriesBase.$$p[0]:
                    this.uc();
                    break;
                case StackedSeriesBase.$$p[1]:
                    if (this.ce != null) {
                        this.ce.m9(this.tu.f);
                    }
                    break;
                case StackedSeriesBase.$$p[2]:
                    for (let g of fromEnum(this.tq)) {
                        g.g5();
                    }
                    break;
                case "Brush":
                    for (let h of fromEnum(this.tq)) {
                        h.fr();
                    }
                    break;
                case "DashArray":
                    for (let i of fromEnum(this.tq)) {
                        i.fs();
                    }
                    break;
                case "HighlightingFadeOpacity":
                    for (let j of fromEnum(this.tq)) {
                        j.fu();
                    }
                    break;
                case "DashCap":
                    for (let k of fromEnum(this.tq)) {
                        k.ft();
                    }
                    break;
                case "IsDropShadowEnabled":
                    for (let l of fromEnum(this.tq)) {
                        l.fv();
                    }
                    break;
                case "ShadowBlur":
                    for (let m of fromEnum(this.tq)) {
                        m.gm();
                    }
                    break;
                case "ShadowColor":
                    for (let n of fromEnum(this.tq)) {
                        n.gn();
                    }
                    break;
                case "UseSingleShadow":
                    for (let o of fromEnum(this.tq)) {
                        o.g1();
                    }
                    break;
                case "ShadowOffsetX":
                    for (let p of fromEnum(this.tq)) {
                        p.go();
                    }
                    break;
                case "ShadowOffsetY":
                    for (let q of fromEnum(this.tq)) {
                        q.gp();
                    }
                    break;
                case "IsHitTestVisible":
                    for (let r of fromEnum(this.tq)) {
                        r.fw();
                    }
                    break;
                case "LegendItemBadgeTemplate":
                    for (let s of fromEnum(this.tq)) {
                        s.f2();
                    }
                    break;
                case "LegendItemTemplate":
                    for (let t of fromEnum(this.tq)) {
                        t.f3();
                    }
                    break;
                case "LegendItemVisibility":
                    for (let u of fromEnum(this.tq)) {
                        u.f4();
                    }
                    break;
                case "LegendItemBadgeShape":
                    for (let v of fromEnum(this.tq)) {
                        v.f1();
                    }
                    break;
                case "LegendItemBadgeMode":
                    for (let w of fromEnum(this.tq)) {
                        w.f0();
                    }
                    break;
                case "MarkerTemplate":
                    for (let x of fromEnum(this.tq)) {
                        x.gd();
                    }
                    break;
                case "MarkerType":
                    for (let y of fromEnum(this.tq)) {
                        y.gf();
                    }
                    break;
                case "MarkerThickness":
                    for (let z of fromEnum(this.tq)) {
                        z.ge();
                    }
                    break;
                case "MarkerBrush":
                    for (let aa of fromEnum(this.tq)) {
                        aa.f7();
                    }
                    break;
                case "MarkerOutline":
                    for (let ab of fromEnum(this.tq)) {
                        ab.ga();
                    }
                    break;
                case "MarkerOutlineMode":
                    for (let ac of fromEnum(this.tq)) {
                        ac.gb();
                    }
                    break;
                case "MarkerFillMode":
                    for (let ad of fromEnum(this.tq)) {
                        ad.f8();
                    }
                    break;
                case "MarkerStyle":
                    for (let ae of fromEnum(this.tq)) {
                        ae.gc();
                    }
                    break;
                case "Opacity":
                    for (let af of fromEnum(this.tq)) {
                        af.gg();
                    }
                    break;
                case "OpacityMask":
                    for (let ag of fromEnum(this.tq)) {
                        ag.gh();
                    }
                    break;
                case "AreaFillOpacity":
                    for (let ah of fromEnum(this.tq)) {
                        ah.fq();
                    }
                    break;
                case "Outline":
                    for (let ai of fromEnum(this.tq)) {
                        ai.gi();
                    }
                    break;
                case "LineCap":
                    for (let aj of fromEnum(this.tq)) {
                        aj.f5();
                    }
                    break;
                case "OutlineMode":
                    for (let ak of fromEnum(this.tq)) {
                        ak.gj();
                    }
                    break;
                case "MarkerFillOpacity":
                    for (let al of fromEnum(this.tq)) {
                        al.f9();
                    }
                    break;
                case "Thickness":
                    for (let am of fromEnum(this.tq)) {
                        am.gq();
                    }
                    break;
                case "LineJoin":
                    for (let an of fromEnum(this.tq)) {
                        an.f6();
                    }
                    break;
                case "ToolTip":
                    for (let ao of fromEnum(this.tq)) {
                        ao.gs();
                    }
                    break;
                case "TransitionEasingFunction":
                    for (let ap of fromEnum(this.tq)) {
                        ap.gu();
                    }
                    break;
                case "TransitionDuration":
                    for (let aq of fromEnum(this.tq)) {
                        aq.gt();
                    }
                    break;
                case "IsTransitionInEnabled":
                    for (let ar of fromEnum(this.tq)) {
                        ar.fy();
                    }
                    break;
                case "TransitionInMode":
                    for (let as of fromEnum(this.tq)) {
                        as.gx();
                    }
                    break;
                case "TransitionInDuration":
                    for (let at of fromEnum(this.tq)) {
                        at.fy();
                    }
                    break;
                case "TransitionInSpeedType":
                    for (let au of fromEnum(this.tq)) {
                        au.fy();
                    }
                    break;
                case "TransitionInEasingFunction":
                    for (let av of fromEnum(this.tq)) {
                        av.gw();
                    }
                    break;
                case "UseLightweightMarkers":
                    for (let aw of fromEnum(this.tq)) {
                        aw.g0();
                    }
                    break;
                case "UseHighMarkerFidelity":
                    for (let ax of fromEnum(this.tq)) {
                        ax.gz();
                    }
                    break;
            }
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.rw()));
        }
        get scaler() {
            return typeCast(ICategoryScaler_$type, this.rw());
        }
        get yScaler() {
            return typeCast(IScaler_$type, this.sh());
        }
        get bucketizer() {
            return this.r6.cr;
        }
        get currentMode2Index() {
            return this.s0();
        }
        provideCollisionDetector() {
            return new CollisionAvoider();
        }
        eu() {
            return false;
        }
        get_dr() {
            return false;
        }
        mp(a, b) {
            let c = this.e3;
            super.mp(a, b);
            if (!c) {
                this.b1.a2(b);
                return;
            }
            this.b1.a2(b);
            if (this.cy(this.b0)) {
                return;
            }
            for (let d of fromEnum(this.series)) {
                d.visualSeriesLink.mp(a, b);
            }
            this.e3 = false;
        }
        mm(a, b, c, d, e) {
            super.mm(a, b, c, d, e);
            let f = this.a7.a$h.item(d);
            f.cr.g(this.fx);
            f.a1(c);
            if (this.cy(f)) {
                return;
            }
            if (this.to == null) {
                this.to = new CategoryFrame(3);
            }
            this.to.u();
            this.ud();
            this.r3(f).d(this.to, f);
            this.tf(this.to, f);
            for (let g of fromEnum(this.series)) {
                g.visualSeriesLink.mm(a, b, c, d, e);
            }
        }
        hx() {
            let a = this.a9.exportStackedVisualData(this, this.p7);
            for (let b of fromEnum(this.series)) {
                let c = this.a9.createFragmentVisualData(this, this.p7, getInstanceType(b).typeName, b.en);
                b.visualSeriesLink.b1.al(c);
                this.a9.addSubSeriesVisualData(a, c);
            }
            this.lc(a);
            this.b1.al(a);
            return a;
        }
        get mayContainUnknowns() {
            return true;
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    StackedSeriesBase.$t = /*@__PURE__*/ markType(StackedSeriesBase, 'StackedSeriesBase', CategorySeries.$, [IIsCategoryBased_$type]);
    StackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSeriesBase, 'raisePropertyChanged', ['AutoGenerateSeries:tw:ui', [0, false], 'ReverseLegendOrder:ty:uj', [0, false], 'SeriesVisibility:ul:uk', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)]]);
    return StackedSeriesBase;
})();
/**
 * @hidden
 */
export let HorizontalStackedSeriesBase = /*@__PURE__*/ (() => {
    class HorizontalStackedSeriesBase extends StackedSeriesBase {
        get_c7() {
            return true;
        }
        get_em() {
            return this.sh() != null && this.sh().cg;
        }
        bw() {
            return 1;
        }
        bx() {
            if (this.yAxis != null && this.yAxis.cg) {
                return 4;
            }
            return 3;
        }
        getOffsetValue() {
            return this.r2.r(this.xAxis, this.b1.bv, this.b1.bu, this.getEffectiveViewport1(this.b1));
        }
        getCategoryWidth() {
            return this.xAxis.getCategorySize(this.b1.bv, this.b1.bu, this.getEffectiveViewport1(this.b1));
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        ag() {
            return [this.fetchXAxis(), this.fetchYAxis()];
        }
        sr() {
            return this.yAxis != null && this.yAxis.c0();
        }
        my() {
            let a = (typeCast(XamDataChart.$, this.ce));
            if (a != null) {
                this.fu = isNaN_(this.f3) ? a.ua.fp : this.f3;
                for (let b of fromEnum(this.tq)) {
                    b.fq();
                }
            }
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            switch (b) {
                case "Resolution":
                    this.tu.j();
                    break;
                case HorizontalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.k6(typeCast(Axis.$, c));
                        this.me(typeCast(Axis.$, d));
                        this.r6.cr.g(this.fx);
                        this.mn(false);
                        this.lu();
                    }
                    break;
                case HorizontalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.k6(typeCast(Axis.$, c));
                        this.me(typeCast(Axis.$, d));
                        this.r6.cr.g(this.fx);
                        if (this.ce != null) {
                            this.ce.l6();
                        }
                        this.sr();
                        this.mn(false);
                        this.lu();
                    }
                    break;
            }
        }
        up(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        uo(a) {
            if (typeCast(CategoryXAxis.$, a) !== null || a.cd) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    HorizontalStackedSeriesBase.$t = /*@__PURE__*/ markType(HorizontalStackedSeriesBase, 'HorizontalStackedSeriesBase', StackedSeriesBase.$);
    HorizontalStackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, HorizontalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::us', [CategoryAxisBase.$, null], 'YAxis::ut', [NumericYAxis.$, null]]);
    return HorizontalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedAreaSeries = /*@__PURE__*/ (() => {
    class StackedAreaSeries extends HorizontalStackedSeriesBase {
        get_df() {
            return true;
        }
        constructor() {
            super();
            this.ab = StackedAreaSeries.$;
        }
        ac() {
            super.ac();
            this.mn(false);
        }
        by() {
            return new StackedAreaSeriesView(this);
        }
        l4(a) {
            super.l4(a);
            this.uu = a;
        }
        aq(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.cl.count - 1);
            }
            if (a == this.yAxis) {
                this.ud();
                return new AxisRange(this.t4, this.t3);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    StackedAreaSeries.$t = /*@__PURE__*/ markType(StackedAreaSeries, 'StackedAreaSeries', HorizontalStackedSeriesBase.$);
    return StackedAreaSeries;
})();
/**
 * @hidden
 */
export let VerticalStackedSeriesBase = /*@__PURE__*/ (() => {
    class VerticalStackedSeriesBase extends StackedSeriesBase {
        rw() {
            return this.yAxis;
        }
        sh() {
            return this.xAxis;
        }
        bw() {
            if (this.xAxis != null && this.xAxis.cg) {
                return 4;
            }
            return 3;
        }
        bx() {
            return 1;
        }
        ar(a) {
            if (a.isEmpty && this.ce != null) {
                a = this.ce.ta;
            }
            let b = this.rw();
            if (this.tm == null || this.tn == null) {
                return null;
            }
            let c = this.pz(this.b1);
            let d = new ScalerParams(0, a, this.ce.tp, b.cg, this.getEffectiveViewport());
            let e = (b.el(c.top, d));
            let f = (b.el(c.bottom, d));
            if (!b.cg) {
                let g = e;
                e = f;
                f = g;
            }
            let h = null;
            if (b.cm) {
                h = b;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            e = Math.max(0, Math.min(this.tn.length - 1, e));
            f = Math.max(0, Math.min(this.tn.length - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            for (let k = truncate(e); k <= truncate(f); k++) {
                let l = k;
                if (h != null) {
                    l = h.i$b._inner[k];
                }
                let m = this.tn[l];
                {
                    if (isInfinity(m) || isNaN_(m)) {
                        continue;
                    }
                }
                let n = this.tm[l];
                {
                    if (isInfinity(n) || isNaN_(n)) {
                        continue;
                    }
                }
                i = Math.min(i, m);
                j = Math.max(j, n);
            }
            let o = new AxisRange(i, j);
            let p = this.sh();
            o = this.ap(o, p, a);
            return o;
        }
        getOffsetValue() {
            return this.r2.r(this.yAxis, this.b1.bv, this.b1.bu, this.getEffectiveViewport1(this.b1));
        }
        getCategoryWidth() {
            return this.yAxis.getCategorySize(this.b1.bv, this.b1.bu, this.getEffectiveViewport1(this.b1));
        }
        get_isVertical() {
            return true;
        }
        fetchXAxis() {
            return this.xAxis;
        }
        fetchYAxis() {
            return this.yAxis;
        }
        sr() {
            return this.xAxis != null && this.xAxis.c0();
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            switch (b) {
                case VerticalStackedSeriesBase.$$p[0]:
                    if (c != d) {
                        this.k6(typeCast(Axis.$, c));
                        this.me(typeCast(Axis.$, d));
                        this.r6.cr.g(this.fx);
                        if (this.ce != null) {
                            this.ce.l6();
                        }
                        this.mn(false);
                        this.lu();
                    }
                    break;
                case VerticalStackedSeriesBase.$$p[1]:
                    if (c != d) {
                        this.k6(typeCast(Axis.$, c));
                        this.me(typeCast(Axis.$, d));
                        this.r6.cr.g(this.fx);
                        this.sr();
                        this.mn(false);
                        this.lu();
                    }
                    break;
            }
        }
        up(a) {
            if (typeCast(CategoryYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        uo(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    VerticalStackedSeriesBase.$t = /*@__PURE__*/ markType(VerticalStackedSeriesBase, 'VerticalStackedSeriesBase', StackedSeriesBase.$);
    VerticalStackedSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, VerticalStackedSeriesBase, 'raisePropertyChanged', ['XAxis::us', [NumericXAxis.$, null], 'YAxis::ut', [CategoryYAxis.$, null]]);
    return VerticalStackedSeriesBase;
})();
/**
 * @hidden
 */
export let StackedBarSeries = /*@__PURE__*/ (() => {
    class StackedBarSeries extends VerticalStackedSeriesBase {
        get_di() {
            return true;
        }
        get_d5() {
            return true;
        }
        gz() {
            if (!isNaN_(this.gy)) {
                return super.gz();
            }
            return Defaults.h;
        }
        constructor() {
            super();
            this.ab = StackedBarSeries.$;
        }
        ac() {
            super.ac();
            this.mn(false);
        }
        by() {
            return new StackedBarSeriesView(this);
        }
        l4(a) {
            super.l4(a);
            this.uu = a;
        }
        tp() {
            return this.uu;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        s0() {
            let a = 0;
            for (let b of fromEnum(this.ce.series)) {
                if (b == this) {
                    return a;
                }
                let c = typeCast(IBarSeries_$type, b);
                if (c != null && c.yAxis == this.yAxis && c.getPreferredCategoryMode() == 2) {
                    a++;
                }
            }
            return -1;
        }
        t1() {
            let a = 0;
            let b = this.ce != null ? this.ce.ta : Rect.empty;
            let c = this.b1.bu;
            if (!b.isEmpty && !c.isEmpty && this.xAxis != null) {
                let d = this.getEffectiveViewport1(this.b1);
                let e = new ScalerParams(0, b, c, this.xAxis.cg, d);
                a = this.xAxis.ei(this.xAxis.l6, e);
            }
            return a;
        }
        t2() {
            if (this.xAxis != null) {
                return this.xAxis.l6;
            }
            return 0;
        }
        aq(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.yAxis) {
                return new AxisRange(0, this.cl.count - 1);
            }
            if (a == this.xAxis) {
                this.ud();
                return new AxisRange(this.t4, this.t3);
            }
            return null;
        }
        eq(a) {
            let b = this.cl != null ? this.cl.indexOf(a) : -1;
            let c = this.ce != null ? this.ce.ta : Rect.empty;
            c = c.copy();
            let d = this.b1.bu;
            let e = new Rect(0, 0, 0, 1, 1);
            let f = this.p1(this.b1);
            let g = new ScalerParams(0, e, e, this.xAxis.cg, f);
            let h = new ScalerParams(0, e, e, this.yAxis.cg, f);
            if (b >= 0 && Rect.l_op_Inequality(c, null) && Rect.l_op_Inequality(d, null)) {
                if (this.yAxis != null) {
                    let i = this.yAxis.ei(b, h);
                    if (i < c.top + 0.1 * c.height) {
                        i = i + 0.4 * c.height;
                    }
                    if (i > c.bottom - 0.1 * c.height) {
                        i = i - 0.4 * c.height;
                    }
                    c.y = i - 0.5 * c.height;
                }
                if (this.xAxis != null && this.tm != null && b < this.tm.length) {
                    let j = this.xAxis.ei(this.tm[b], g);
                    let k = this.xAxis.ei(this.tn[b], g);
                    if (!isNaN_(j) && !isNaN_(k)) {
                        let l = Math.abs(k - j);
                        if (c.width < l) {
                            c.width = l;
                            c.x = Math.min(k, j);
                        }
                        else {
                            if (k < c.left + 0.1 * c.width) {
                                k = k + 0.4 * c.width;
                            }
                            if (k > c.right - 0.1 * c.width) {
                                k = k - 0.4 * c.width;
                            }
                            c.x = k - 0.5 * c.width;
                        }
                    }
                }
                this.b9.au(this.ce, c, true);
            }
            return b >= 0;
        }
        fd(a, b, c) {
            let d = true;
            let e = c;
            if (!c.o() || b.isEmpty || a.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.cl == null || this.xAxis.bh == null || this.yAxis.bh == null || this.xAxis.lw == this.xAxis.lv) {
                e.cr.d = 0;
                d = false;
            }
            return d;
        }
        k5(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.r6.cr.g(this.fx);
                    break;
            }
            switch (a) {
                case 4:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.mn(true);
                    }
                    break;
                case 1:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.mn(true);
                    }
                    break;
                case 0:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.mn(true);
                    }
                    break;
                case 2:
                    if (this.r6.cr.d > 0) {
                        this.mn(true);
                    }
                    break;
                case 3:
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.mn(true);
                    }
                    break;
            }
        }
        hi(a) {
            let b = this.ce != null ? this.ce.ta : Rect.empty;
            let c = this.b1.bu;
            let d = this.getEffectiveViewport1(this.b1);
            let e = -1;
            if (this.yAxis != null && !b.isEmpty && !c.isEmpty) {
                let f = new ScalerParams(0, b, c, this.yAxis.cg, d);
                let g = this.pz(this.b1);
                let h = this.yAxis.el(g.top, f);
                let i = this.yAxis.el(g.bottom, f);
                let j = (a.y - b.top) / b.height;
                let k = h + (j * (i - h));
                if (this.yAxis.categoryMode != 0) {
                    k -= 0.5;
                }
                let l = truncate(Math.round(k));
                e = l;
            }
            return e;
        }
        hy(a) {
            let b = this.hi(a);
            return b >= 0 && this.cl != null && b < this.cl.count ? this.cl.item(b) : null;
        }
        uh() {
            if (this.xAxis != null) {
                this.xAxis.c1(true);
            }
            if (this.yAxis != null) {
                this.yAxis.c1(true);
            }
        }
        t5(a) {
            return this.hi(a);
        }
        tz(a, b, c, d) {
            let e = true;
            if (!d.o() || c.isEmpty || b.isEmpty || this.yAxis == null || this.yAxis.itemsSource == null || this.xAxis == null || this.cl == null || this.xAxis.bh == null || this.yAxis.bh == null) {
                e = false;
            }
            let f = d;
            if (a.valueColumn == null || a.valueColumn.count == 0 || f.cr.d < 1) {
                e = false;
            }
            return e;
        }
        ge() {
            return this.yAxis.k3(this.b1.bv, this.b1.bu, this.getEffectiveViewport1(this.b1));
        }
        ue(a, b, c, d) {
            let e = typeCast(BarFragment.$, a);
            let f = typeCast(ColumnFragmentView.$, c);
            if (!this.fd(c.bu, c.bv, c) || e == null || f == null) {
                return;
            }
            let g = this.yAxis.k3(c.bv, c.bu, this.getEffectiveViewport1(c));
            if (isNaN_(g) || isInfinity(g)) {
                e.vu.db.count = 0;
                return;
            }
            let h = 0;
            e.r5.a2(e, e.sp(), d, e.sx(c), e.sy(c));
            e.r5.r = e.vx;
            e.r5.s = e.vy;
            e.r5.k = e.vx;
            e.r5.l = e.vy;
            let i = e.valueColumn.count;
            let j = c.bv;
            let k = c.bu;
            let l = this.getEffectiveViewport1(c);
            let m = false;
            let n = e.r5.b;
            if (n != null) {
                m = true;
            }
            let o = b.f;
            let p = e.rw();
            let q = new ScalerParams(0, j, k, p.cg, l);
            let r = 0;
            for (let s of fromEnum(b.f)) {
                if (isInfinity(s[0]) || isNaN_(s[0]) || isInfinity(s[1]) || isInfinity(s[2]) || isNaN_(s[1]) || isNaN_(s[2])) {
                    r++;
                    continue;
                }
                let t = s[0] - 0.5 * g;
                let u = s[1];
                let v = s[2];
                v = Math.max(v, -100);
                u = Math.min(u, c.bu.right + 100);
                let w = f.db.item(h);
                w.height = g;
                w.width = Math.abs(u - v);
                if (m) {
                    e.tb(o, r, i, p, q, c.q);
                }
                e.r5.ad(w, false, false, false, false);
                w.ap = e.r5.k;
                w.aq = e.r5.l;
                f.di(w, Math.min(u, v), t);
                h++;
                r++;
            }
            f.db.count = h;
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            switch (b) {
                case StackedBarSeries.$$p[0]:
                case StackedBarSeries.$$p[1]:
                    for (let e of fromEnum(this.tq)) {
                        e.gk();
                        e.gl();
                    }
                    this.mn(false);
                    break;
                case "SyncLink":
                    if (this.xAxis != null) {
                        this.xAxis.c0();
                    }
                    break;
                case "FastItemsSource":
                    if (this.xAxis != null && !this.xAxis.c0()) {
                        this.uu.cr.g(this.fx);
                    }
                    this.mn(false);
                    break;
                case "SeriesViewer":
                    if (c != null && d == null) {
                        this.k6(this.xAxis);
                        this.k6(this.yAxis);
                    }
                    if (c == null && d != null) {
                        this.me(this.xAxis);
                        this.me(this.yAxis);
                    }
                    this.uu.cr.g(this.fx);
                    this.mn(false);
                    if (this.xAxis != null) {
                        this.xAxis.c0();
                    }
                    break;
            }
        }
        getPreferredCategoryMode() {
            return this.preferredCategoryMode(this.yAxis);
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    StackedBarSeries.$t = /*@__PURE__*/ markType(StackedBarSeries, 'StackedBarSeries', VerticalStackedSeriesBase.$, [IBarSeries_$type]);
    StackedBarSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedBarSeries, 'raisePropertyChanged', ['RadiusX:uv:uz', [1, 0], 'RadiusY:uw:u0', [1, 0]]);
    return StackedBarSeries;
})();
/**
 * @hidden
 */
export let StackedColumnSeries = /*@__PURE__*/ (() => {
    class StackedColumnSeries extends HorizontalStackedSeriesBase {
        get_dk() {
            return true;
        }
        get_d5() {
            return true;
        }
        gz() {
            if (!isNaN_(this.gy)) {
                return super.gz();
            }
            return Defaults.h;
        }
        constructor() {
            super();
            this.ab = StackedColumnSeries.$;
        }
        by() {
            return new StackedColumnSeriesView(this);
        }
        l4(a) {
            super.l4(a);
            this.uu = a;
        }
        tp() {
            return this.uu;
        }
        preferredCategoryMode(a) {
            return 2;
        }
        aq(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.cl.count - 1);
            }
            if (a == this.yAxis) {
                this.ud();
                return new AxisRange(this.t4, this.t3);
            }
            return null;
        }
        ge() {
            let a = this.getEffectiveViewport1(this.b1);
            return this.xAxis.k3(this.b1.bv, this.b1.bu, a);
        }
        ue(a, b, c, d) {
            let e = typeCast(ColumnFragment.$, a);
            let f = typeCast(ColumnFragmentView.$, c);
            if (!this.fd(c.bu, c.bv, c) || e == null || f == null) {
                return;
            }
            if (e == null) {
                return;
            }
            let g = this.getEffectiveViewport1(c);
            let h = this.xAxis.k3(c.bv, c.bu, g);
            if (isNaN_(h) || isInfinity(h)) {
                e.vu.db.count = 0;
                return;
            }
            let i = 0;
            e.r5.a2(e, e.sp(), d, e.sx(c), e.sy(c));
            e.r5.r = e.vx;
            e.r5.s = e.vy;
            e.r5.k = e.vx;
            e.r5.l = e.vy;
            let j = c.bv;
            let k = c.bu;
            let l = this.getEffectiveViewport1(c);
            let m = false;
            let n = e.r5.b;
            if (n != null) {
                m = true;
            }
            let o = b.f;
            let p = e.rw();
            let q = new ScalerParams(0, j, k, p.cg, l);
            let r = e.valueColumn.count;
            let s = 0;
            for (let t of fromEnum(b.f)) {
                if (isInfinity(t[0]) || isNaN_(t[0]) || isInfinity(t[1]) || isInfinity(t[2]) || isNaN_(t[1]) || isNaN_(t[2])) {
                    s++;
                    continue;
                }
                let u = t[0] - 0.5 * h;
                let v = t[1];
                let w = t[2];
                v = Math.max(v, -100);
                w = Math.min(w, c.bu.bottom + 100);
                let x = f.db.item(i);
                x.width = h;
                x.height = Math.abs(w - v);
                if (m) {
                    e.tb(o, s, r, p, q, c.q);
                }
                e.r5.ad(x, false, false, false, false);
                x.ap = e.r5.k;
                x.aq = e.r5.l;
                f.di(x, u, Math.min(w, v));
                i++;
                s++;
            }
            f.db.count = i;
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            switch (b) {
                case StackedColumnSeries.$$p[0]:
                case StackedColumnSeries.$$p[1]:
                    for (let e of fromEnum(this.tq)) {
                        e.gk();
                        e.gl();
                    }
                    this.mn(false);
                    break;
                case "SyncLink":
                    if (this.yAxis != null) {
                        this.yAxis.c0();
                    }
                    break;
                case "SeriesViewer":
                    if (this.yAxis != null) {
                        this.yAxis.c0();
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    StackedColumnSeries.$t = /*@__PURE__*/ markType(StackedColumnSeries, 'StackedColumnSeries', HorizontalStackedSeriesBase.$);
    StackedColumnSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedColumnSeries, 'raisePropertyChanged', ['RadiusX:uv:uz', [1, 0], 'RadiusY:uw:u0', [1, 0]]);
    return StackedColumnSeries;
})();
/**
 * @hidden
 */
export let StackedSplineAreaSeries = /*@__PURE__*/ (() => {
    class StackedSplineAreaSeries extends HorizontalStackedSeriesBase {
        gz() {
            if (!isNaN_(this.gy)) {
                return super.gz();
            }
            return this.uu.c5();
        }
        get_df() {
            return true;
        }
        get_ej() {
            return true;
        }
        constructor() {
            super();
            this.ab = StackedSplineAreaSeries.$;
        }
        ac() {
            super.ac();
            this.mn(false);
        }
        by() {
            return new StackedSplineAreaSeriesView(this);
        }
        l4(a) {
            super.l4(a);
            this.uu = a;
        }
        aq(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.cl.count - 1);
            }
            if (a == this.yAxis) {
                this.ud();
                return new AxisRange(this.t4, this.t3);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            switch (b) {
                case StackedSplineAreaSeries.$$p[0]:
                    for (let e of fromEnum(this.tq)) {
                        e.fx();
                    }
                    break;
            }
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    StackedSplineAreaSeries.$t = /*@__PURE__*/ markType(StackedSplineAreaSeries, 'StackedSplineAreaSeries', HorizontalStackedSeriesBase.$);
    StackedSplineAreaSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSplineAreaSeries, 'raisePropertyChanged', ['IsSplineShapePartOfRange:uv:ux', [0, false]]);
    return StackedSplineAreaSeries;
})();
/**
 * @hidden
 */
export let StackedSplineSeries = /*@__PURE__*/ (() => {
    class StackedSplineSeries extends HorizontalStackedSeriesBase {
        get_ej() {
            return true;
        }
        gz() {
            if (!isNaN_(this.gy)) {
                return super.gz();
            }
            return this.uu.c5();
        }
        constructor() {
            super();
            this.ab = StackedSplineSeries.$;
        }
        ac() {
            super.ac();
            this.mn(false);
        }
        by() {
            return new StackedSplineSeriesView(this);
        }
        l4(a) {
            super.l4(a);
            this.uu = a;
        }
        aq(a) {
            if (this.itemsSource == null) {
                return null;
            }
            if (a == this.xAxis) {
                return new AxisRange(0, this.cl.count - 1);
            }
            if (a == this.yAxis) {
                this.ud();
                return new AxisRange(this.t4, this.t3);
            }
            return null;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    StackedSplineSeries.$t = /*@__PURE__*/ markType(StackedSplineSeries, 'StackedSplineSeries', HorizontalStackedSeriesBase.$);
    StackedSplineSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedSplineSeries, 'raisePropertyChanged', ['IsSplineShapePartOfRange:uv:ux', [0, false]]);
    return StackedSplineSeries;
})();
/**
 * @hidden
 */
export let StackedFragmentSeries = /*@__PURE__*/ (() => {
    class StackedFragmentSeries extends DependencyObject {
        constructor() {
            super();
            this._parentSeries = null;
            this.ca = 0;
            this.ae = null;
            this.aj = null;
            this._visualSeriesLink = null;
            this.a6 = null;
            this.a7 = null;
            this.a5 = null;
            this.ay = false;
            this.b3 = null;
            this.propertyChanged = null;
            this.propertyUpdated = null;
            this.a4 = new List$1(String_$type, 0);
            this.a6 = new List$1(Number_$type, 0);
            this.a7 = new List$1(Number_$type, 0);
            this.a5 = new List$1(Array_$type, 0);
            this.propertyUpdated = delegateCombine(this.propertyUpdated, (a, b) => this.fl(a, b.propertyName, b.oldValue, b.newValue));
        }
        ce(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.l = this.br({ $type: Point_$type, x: a, y: b }, false, false);
            c.p = "Value";
            c.q = this.fg != null ? this.fg : "Value";
            c.r = this.fc != null ? this.fc : "";
            c.s = this.fe != null ? this.fe : "";
            let d = new DataLegendSeriesContext();
            d.f = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.b = 7;
            return d;
        }
        get parentSeries() {
            return this._parentSeries;
        }
        set parentSeries(a) {
            this._parentSeries = a;
        }
        get visualSeriesLink() {
            return this._visualSeriesLink;
        }
        set visualSeriesLink(a) {
            this._visualSeriesLink = a;
        }
        b6(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hi(a);
            }
            return -1;
        }
        cf(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hy(a);
            }
            return null;
        }
        b9(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ho(a, b);
            }
            return -1;
        }
        b8(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hm(a, b);
            }
            return -1;
        }
        br(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gn(a, b, c);
            }
            return NaN;
        }
        kv(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ps(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        kz(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.p3(a);
            }
            return Rect.empty;
        }
        j(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ak(a);
            }
            return null;
        }
        k0(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.p4(a);
            }
            return Rect.empty;
        }
        k(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.al(a);
            }
            return null;
        }
        k1(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.p5(a);
            }
            return Rect.empty;
        }
        k2(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.p6(a);
            }
            return Rect.empty;
        }
        bn(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gj(a, b, c);
            }
            return NaN;
        }
        kr(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.po(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bp(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gl(a, b, c);
            }
            return NaN;
        }
        kt(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pq(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        kw(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pt(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bs(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.go(a, b, c);
            }
            return NaN;
        }
        ks(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pp(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bo(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gk(a, b, c);
            }
            return NaN;
        }
        ku(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pr(a, b, c);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        bq(a, b, c) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.gm(a, b, c);
            }
            return NaN;
        }
        b7(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hj(a);
            }
            return -1;
        }
        bm() {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ge();
            }
            return 0;
        }
        bl(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ga(a);
            }
            return NaN;
        }
        cg(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.hz(a);
            }
            return null;
        }
        ar(a, b, c, d) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.c2(a, b, c, d);
            }
            return false;
        }
        kx(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.px(a);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        kq(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.pn(a);
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        az(a) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.eq(a);
            }
            return false;
        }
        ky() {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.getEffectiveViewport();
            }
            return Rect.empty;
        }
        fk() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.lw();
            }
        }
        fp(a) {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.mv(a);
            }
        }
        a0(a, b) {
            if (this.visualSeriesLink != null) {
                return this.visualSeriesLink.ez(a, b);
            }
            return false;
        }
        fj(a) {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.lm(a);
            }
        }
        provideRenderer(a) {
            this.b3 = a;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.provideRenderer(a);
            }
        }
        g5() {
            if (this.parentSeries == null) {
                return;
            }
            this.k6 = this.parentSeries._visibility != 0 ? 1 : this.k8;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._visibility = this.k6;
            }
        }
        gd() {
            if (this.parentSeries == null) {
                return;
            }
            this.g8 = this.hb != null ? this.hb : this.parentSeries.q7;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.q7 = this.g8;
            }
        }
        gf() {
            if (this.parentSeries == null) {
                return;
            }
            let a = this.x == 0 || this.x == 2;
            let b = a ? this.parentSeries.ql : this.x;
            if (b == 2 || b == 0) {
                b = 1;
            }
            this.w = b;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ql = this.w;
            }
        }
        fr() {
            if (this.parentSeries == null) {
                return;
            }
            this.kh = this.kc != null ? this.kc : this.parentSeries.o9;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.o9 = this.kh;
            }
        }
        fs() {
            if (this.parentSeries == null) {
                return;
            }
            this.kk = this.kl != null ? this.kl : this.parentSeries.pi;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pi = this.kk;
            }
        }
        fu() {
            if (this.parentSeries == null) {
                return;
            }
            this.ba = !isNaN_(this.bt) ? this.bt : this.parentSeries.gu;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.gu = this.ba;
            }
        }
        gj() {
            if (this.parentSeries == null) {
                return;
            }
            this.z = this.aa != 0 ? this.aa : this.parentSeries.bu;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.bu = this.z;
            }
        }
        f9() {
            if (this.parentSeries == null) {
                return;
            }
            this.bb = !isNaN_(this.bu) || this.ax("MarkerFillOpacity") ? this.bu : this.parentSeries.gv;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.gv = this.bb;
            }
        }
        ft() {
            if (this.parentSeries == null) {
                return;
            }
            this.km = this.as("DashCap") ? this.parentSeries.pj : this.ko;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pj = this.km;
            }
        }
        fv() {
            if (this.parentSeries == null) {
                return;
            }
            this.ak = this.as("IsDropShadowEnabled") ? this.parentSeries.dq : this.at;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.dq = this.ak;
            }
        }
        gm() {
            if (this.parentSeries == null) {
                return;
            }
            this.bg = !isNaN_(this.bz) || this.ax("ShadowBlur") ? this.bz : this.parentSeries.g1;
            if (this.visualSeriesLink != null && !isNaN_(this.bg)) {
                this.visualSeriesLink.g1 = this.bg;
            }
        }
        gn() {
            if (this.parentSeries == null) {
                return;
            }
            this.ki = Color.e(toNullable(Color.$, this.kj), toNullable(Color.$, null)) ? this.kj : this.parentSeries.ph;
            if (this.visualSeriesLink != null && Color.e(toNullable(Color.$, this.ki), toNullable(Color.$, null))) {
                this.visualSeriesLink.ph = this.ki;
            }
        }
        g1() {
            if (this.parentSeries == null) {
                return;
            }
            this.aq = this.as("UseSingleShadow") ? this.parentSeries.fb : this.a3;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.fb = this.aq;
            }
        }
        go() {
            if (this.parentSeries == null) {
                return;
            }
            this.bh = !isNaN_(this.b0) || this.ax("ShadowOffsetX") ? this.b0 : this.parentSeries.g2;
            if (this.visualSeriesLink != null && !isNaN_(this.bh)) {
                this.visualSeriesLink.g2 = this.bh;
            }
        }
        gp() {
            if (this.parentSeries == null) {
                return;
            }
            this.bi = !isNaN_(this.b1) || this.ax("ShadowOffsetY") ? this.b1 : this.parentSeries.g3;
            if (this.visualSeriesLink != null && !isNaN_(this.bi)) {
                this.visualSeriesLink.g3 = this.bi;
            }
        }
        fw() {
            if (this.parentSeries == null) {
                return;
            }
            this.al = this.au;
        }
        f2() {
            if (this.parentSeries == null) {
                return;
            }
            this.g6 = this.g9 != null ? this.g9 : this.parentSeries.legendItemBadgeTemplate;
            if (this.visualSeriesLink != null) {
                if (this.g6 != null) {
                    this.visualSeriesLink.legendItemBadgeTemplate = this.g6;
                }
                else {
                    this.visualSeriesLink.legendItemBadgeTemplate = null;
                }
            }
        }
        f3() {
            if (this.parentSeries == null) {
                return;
            }
            this.g7 = this.ha != null ? this.ha : this.parentSeries.legendItemTemplate;
            if (this.visualSeriesLink != null) {
                if (this.g7 != null) {
                    this.visualSeriesLink.legendItemTemplate = this.g7;
                }
                else {
                    this.visualSeriesLink.legendItemTemplate = null;
                }
            }
        }
        f4() {
            if (this.parentSeries == null) {
                return;
            }
            this.k5 = this.parentSeries.qb != 0 ? 1 : this.k7;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qb = this.k5;
            }
        }
        f1() {
            if (this.parentSeries == null) {
                return;
            }
            this.q = this.r != 0 ? this.r : this.parentSeries.legendItemBadgeShape;
            if (this.visualSeriesLink != null) {
                if (this.q != 0) {
                    this.visualSeriesLink.legendItemBadgeShape = this.q;
                }
                else {
                    this.visualSeriesLink.legendItemBadgeShape = 0;
                }
            }
        }
        f0() {
            if (this.parentSeries == null) {
                return;
            }
            this.o = this.p != 0 ? this.p : this.parentSeries.ba;
            if (this.visualSeriesLink != null) {
                if (this.o != 0) {
                    this.visualSeriesLink.ba = this.o;
                }
                else {
                    this.visualSeriesLink.ba = 0;
                }
            }
        }
        f7() {
            if (this.parentSeries == null) {
                return;
            }
            this.j8 = this.kd != null ? this.kd : this.parentSeries.rn;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.rn = this.j8;
            }
        }
        ga() {
            if (this.parentSeries == null) {
                return;
            }
            this.j9 = this.ke != null ? this.ke : this.parentSeries.ro;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ro = this.j9;
            }
        }
        gc() {
            if (this.parentSeries == null) {
                return;
            }
            this.k3 = this.k4 != null ? this.k4 : this.parentSeries.rp;
            if (this.visualSeriesLink != null) {
                if (this.k3 != null) {
                    this.visualSeriesLink.rp = this.k3;
                }
                else {
                    this.visualSeriesLink.rp = null;
                }
            }
        }
        gg() {
            if (this.parentSeries == null) {
                return;
            }
            this.bd = !isNaN_(this.bw) || this.ax("Opacity") ? this.bw : this.parentSeries._opacity;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink._opacity = this.bd;
            }
        }
        gh() {
        }
        gi() {
            if (this.parentSeries == null) {
                return;
            }
            this.kb = this.kg != null ? this.kg : this.parentSeries.pe;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pe = this.kb;
            }
        }
        fz() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.itemsSource = this.itemsSource;
            }
        }
        fq() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.df && !this.parentSeries.ej) {
                a = this.parentSeries.fu;
            }
            if (this.parentSeries.isStacked && this.parentSeries.df && this.parentSeries.ej) {
                a = this.parentSeries.fu;
            }
            this.a9 = !isNaN_(this.bk) || this.ax("AreaFillOpacity") ? this.bk : a;
            if (this.visualSeriesLink != null) {
                if (typeCast(AreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.f3 = this.a9;
                }
                if (typeCast(SplineAreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.f3 = this.a9;
                }
            }
        }
        fx() {
            if (this.parentSeries == null) {
                return;
            }
            let a = false;
            if (this.parentSeries.isStacked && this.parentSeries.ej && this.parentSeries.df) {
                a = this.parentSeries.uv;
            }
            if (this.parentSeries.isStacked && this.parentSeries.di) {
                a = this.parentSeries.uv;
            }
            this.am = a;
            if (this.visualSeriesLink != null) {
                if (typeCast(SplineFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vo = this.am;
                }
                if (typeCast(SplineAreaFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vo = this.am;
                }
            }
        }
        gk() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.dk) {
                a = this.parentSeries.uv;
            }
            if (this.parentSeries.isStacked && this.parentSeries.di) {
                a = this.parentSeries.uv;
            }
            this.be = !isNaN_(this.bx) && this.bx != a ? this.bx : a;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vx = this.be;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vx = this.be;
                }
            }
        }
        gl() {
            if (this.parentSeries == null) {
                return;
            }
            let a = NaN;
            if (this.parentSeries.isStacked && this.parentSeries.dk) {
                a = this.parentSeries.uw;
            }
            if (this.parentSeries.isStacked && this.parentSeries.di) {
                a = this.parentSeries.uw;
            }
            this.bf = !isNaN_(this.by) && this.by != a ? this.by : a;
            if (this.visualSeriesLink != null) {
                if (typeCast(ColumnFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vy = this.bf;
                }
                if (typeCast(BarFragment.$, this.visualSeriesLink) !== null) {
                    this.visualSeriesLink.vy = this.bf;
                }
            }
        }
        f5() {
            if (this.parentSeries == null) {
                return;
            }
            this.kn = this.as("StartCap") ? this.parentSeries.pk : this.kp;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pk = this.kn;
            }
        }
        gq() {
            if (this.parentSeries == null) {
                return;
            }
            this.bj = !isNaN_(this.b2) && this.b2 != this.parentSeries.g4 ? this.b2 : this.parentSeries.g4;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.g4 = this.bj;
            }
        }
        f6() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.pl = this.parentSeries.pl;
            }
        }
        ge() {
            if (this.parentSeries == null) {
                return;
            }
            this.bc = !isNaN_(this.bv) || this.ax("MarkerThickness") ? this.bv : this.parentSeries.qq;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qq = this.bc;
            }
        }
        gs() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.toolTip = this.ci;
            }
        }
        gu() {
            if (this.parentSeries == null) {
                return;
            }
            this.af = this.ah || this.parentSeries.cg;
        }
        gt() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.hr != 0) {
                this.b4 = this.parentSeries.hr;
                return;
            }
            this.b4 = this.as("IsDropShadowEnabled") ? this.parentSeries.hr : this.cb;
        }
        gw() {
            if (this.parentSeries == null) {
                return;
            }
            this.ag = this.as("IsDropShadowEnabled") ? this.parentSeries.ch : this.ai;
        }
        gx() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.r8 != 0) {
                this.m = this.parentSeries.r8;
                return;
            }
            this.m = this.n;
        }
        gy() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.cb != 0) {
                this.ac = this.parentSeries.cb;
                return;
            }
            this.ac = this.ad;
        }
        fy() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.so != false) {
                this.an = this.parentSeries.so;
                return;
            }
            this.an = this.aw;
        }
        gv() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.parentSeries.hs != 1000) {
                this.b5 = this.parentSeries.hs;
                return;
            }
            this.b5 = this.cc;
        }
        g0() {
            if (this.parentSeries == null) {
                return;
            }
            this.ap = this.as("UseLightweightMarkers") ? this.parentSeries.qp : this.a2;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qp = this.ap;
            }
        }
        gr() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.title = this.ch;
            }
        }
        f8() {
            if (this.parentSeries == null) {
                return;
            }
            this.s = this.t != 0 ? this.t : this.parentSeries.qe;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qe = this.s;
            }
        }
        gb() {
            if (this.parentSeries == null) {
                return;
            }
            this.u = this.v != 0 ? this.v : this.parentSeries.qi;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.qi = this.u;
            }
        }
        gz() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ss = this.ax("UseHighMarkerFidelity") ? this.a1 : this.parentSeries.ss;
            }
        }
        g3() {
            if (this.parentSeries == null) {
                return;
            }
            this.dv = this.ax("ValueMemberAsLegendUnit") ? this.fe : this.ch != null ? this.ch.toString() : null;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.ua = this.fe;
            }
        }
        g2() {
            if (this.parentSeries == null) {
                return;
            }
            this.dt = this.ax("ValueMemberAsLegendLabel") ? this.fc : this.ch != null ? this.ch.toString() : null;
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.t8 = this.dt;
            }
        }
        g4() {
            if (this.parentSeries == null) {
                return;
            }
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.uc = this.fg;
            }
        }
        fn(a, b, c) {
            if (this.propertyChanged != null) {
                this.propertyChanged(this, new PropertyChangedEventArgs(a));
            }
            if (this.propertyUpdated != null) {
                this.propertyUpdated(this, new PropertyUpdatedEventArgs(a, b, c));
            }
        }
        as(a) {
            return !this.a4.contains(a);
        }
        ax(a) {
            return this.a4.contains(a);
        }
        fl(a, b, c, d) {
            if (this.parentSeries == null) {
                return;
            }
            if (!this.a4.contains(b)) {
                this.a4.add(b);
            }
            switch (b) {
                case StackedFragmentSeries.$$p[86]:
                    this.gr();
                    break;
                case StackedFragmentSeries.$$p[99]:
                    this.g4();
                    break;
                case StackedFragmentSeries.$$p[98]:
                    this.g3();
                    break;
                case StackedFragmentSeries.$$p[97]:
                    this.g2();
                    break;
                case StackedFragmentSeries.$$p[100]:
                    this.g5();
                    break;
                case StackedFragmentSeries.$$p[49]:
                    this.fr();
                    break;
                case StackedFragmentSeries.$$p[50]:
                    this.fs();
                    break;
                case StackedFragmentSeries.$$p[51]:
                    this.ft();
                    break;
                case StackedFragmentSeries.$$p[53]:
                    this.fv();
                    break;
                case StackedFragmentSeries.$$p[81]:
                    this.gm();
                    break;
                case StackedFragmentSeries.$$p[82]:
                    this.gn();
                    break;
                case StackedFragmentSeries.$$p[96]:
                    this.g1();
                    break;
                case StackedFragmentSeries.$$p[83]:
                    this.go();
                    break;
                case StackedFragmentSeries.$$p[84]:
                    this.gp();
                    break;
                case StackedFragmentSeries.$$p[63]:
                    this.f5();
                    break;
                case StackedFragmentSeries.$$p[54]:
                    this.fw();
                    break;
                case StackedFragmentSeries.$$p[70]:
                    this.gd();
                    break;
                case StackedFragmentSeries.$$p[72]:
                    this.gf();
                    break;
                case StackedFragmentSeries.$$p[65]:
                    this.f8();
                    break;
                case StackedFragmentSeries.$$p[67]:
                    this.gb();
                    break;
                case StackedFragmentSeries.$$p[60]:
                    this.f2();
                    break;
                case StackedFragmentSeries.$$p[61]:
                    this.f3();
                    break;
                case StackedFragmentSeries.$$p[62]:
                    this.f4();
                    break;
                case StackedFragmentSeries.$$p[59]:
                    this.f1();
                    break;
                case StackedFragmentSeries.$$p[58]:
                    this.f0();
                    break;
                case StackedFragmentSeries.$$p[64]:
                    this.f7();
                    break;
                case StackedFragmentSeries.$$p[68]:
                    this.ga();
                    break;
                case StackedFragmentSeries.$$p[69]:
                    this.gc();
                    break;
                case StackedFragmentSeries.$$p[71]:
                    this.ge();
                    break;
                case StackedFragmentSeries.$$p[75]:
                    this.gg();
                    break;
                case StackedFragmentSeries.$$p[74]:
                    this.gh();
                    break;
                case StackedFragmentSeries.$$p[57]:
                    this.fz();
                    break;
                case StackedFragmentSeries.$$p[77]:
                    this.gi();
                    break;
                case StackedFragmentSeries.$$p[76]:
                    this.gj();
                    break;
                case StackedFragmentSeries.$$p[66]:
                    this.f9();
                    break;
                case StackedFragmentSeries.$$p[48]:
                    this.fq();
                    break;
                case StackedFragmentSeries.$$p[79]:
                    this.gk();
                    break;
                case StackedFragmentSeries.$$p[80]:
                    this.gl();
                    break;
                case StackedFragmentSeries.$$p[55]:
                    this.fx();
                    break;
                case StackedFragmentSeries.$$p[85]:
                    this.gq();
                    break;
                case StackedFragmentSeries.$$p[87]:
                    this.gs();
                    break;
                case StackedFragmentSeries.$$p[89]:
                    this.gu();
                    break;
                case StackedFragmentSeries.$$p[91]:
                    this.gw();
                    break;
                case StackedFragmentSeries.$$p[88]:
                    this.gt();
                    break;
                case StackedFragmentSeries.$$p[56]:
                    this.fy();
                    break;
                case StackedFragmentSeries.$$p[92]:
                    this.gx();
                    break;
                case StackedFragmentSeries.$$p[93]:
                    this.gy();
                    break;
                case StackedFragmentSeries.$$p[90]:
                    this.gv();
                    break;
                case StackedFragmentSeries.$$p[95]:
                    this.g0();
                    break;
                case StackedFragmentSeries.$$p[94]:
                    this.gz();
                    break;
            }
            this.parentSeries.mn(false);
        }
        fo() {
            if (this.visualSeriesLink != null) {
                this.visualSeriesLink.mq();
            }
        }
    }
    StackedFragmentSeries.$t = /*@__PURE__*/ markType(StackedFragmentSeries, 'StackedFragmentSeries', DependencyObject.$, [INotifyPropertyChanged_$type]);
    StackedFragmentSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, StackedFragmentSeries, 'fn', ['ActualAreaFillOpacity:a9:hc', [1, NaN], 'ActualBrush:j7:hd', [Brush.$], 'ActualDashArray:kk:he', [DoubleCollection.$], 'ActualDashCap:km:hf', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'ActualHighlightingFadeOpacity:ba:hg', [1, NaN], 'ActualIsDropShadowEnabled:ak:hh', [0, false], 'ActualIsHitTestVisible:al:hi', [0, true], 'ActualIsSplineShapePartOfRange:am:hj', [0, false], 'ActualIsTransitionInEnabled:an:hk', [0], 'ActualLegendItemBadgeMode:o:hl', [LegendItemBadgeMode_$type], 'ActualLegendItemBadgeShape:q:hm', [LegendItemBadgeShape_$type], 'ActualLegendItemBadgeTemplate:g6:hn', [DataTemplate.$], 'ActualLegendItemTemplate:g7:ho', [DataTemplate.$], 'ActualLegendItemVisibility:k5:hp', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'ActualLineCap:kn:hq', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'ActualMarkerBrush:j8:hr', [Brush.$], 'ActualMarkerFillMode:s:hs', [MarkerFillMode_$type, /*@__PURE__*/ enumGetBox(MarkerFillMode_$type, 0)], 'ActualMarkerFillOpacity:bb:ht', [1, NaN], 'ActualMarkerOutlineMode:u:hu', [MarkerOutlineMode_$type, /*@__PURE__*/ enumGetBox(MarkerOutlineMode_$type, 0)], 'ActualMarkerOutline:j9:hv', [Brush.$], 'ActualMarkerStyle:k3:hw', [Style.$], 'ActualMarkerTemplate:g8:hx', [DataTemplate.$], 'ActualMarkerThickness:bc:hy', [1, 1], 'ActualMarkerType:w:hz', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'ActualOpacityMask:ka:h0', [Brush.$], 'ActualOpacity:bd:h1', [1, NaN], 'ActualOutlineMode:z:h2', [SeriesOutlineMode_$type, /*@__PURE__*/ enumGetBox(SeriesOutlineMode_$type, 0)], 'ActualOutline:kb:h3', [Brush.$], 'ActualRadiusX:be:h4', [1, 0], 'ActualRadiusY:bf:h5', [1, 0], 'ActualShadowBlur:bg:h6', [1, NaN], 'ActualShadowColor:ki:h7', [Color.$], 'ActualShadowOffsetX:bh:h8', [1, NaN], 'ActualShadowOffsetY:bi:h9', [1, NaN], 'ActualThickness:bj:ia', [1, 1], 'ActualToolTip:cd:ib', [4], 'ActualTransitionDuration:b4:ic', [1], 'ActualTransitionEasingFunction:af:id', [Delegate_$type], 'ActualTransitionInDuration:b5:ie', [1], 'ActualTransitionInEasingFunction:ag:ig', [Delegate_$type], 'ActualTransitionInMode:m:ih', [CategoryTransitionInMode_$type], 'ActualTransitionInSpeedType:ac:ii', [TransitionInSpeedType_$type], 'ActualUseHighMarkerFidelity:ao:ij', [0, false], 'ActualUseLightweightMarkers:ap:ik', [0, false], 'ActualUseSingleShadow:aq:il', [0, true], 'ActualValueMemberAsLegendLabel:dt:im', [2, null], 'ActualValueMemberAsLegendUnit:dv:io', [2, null], 'ActualVisibility:k6:ip', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'AreaFillOpacity:bk:iq', [1, NaN], 'Brush:kc:ir', [Brush.$], 'DashArray:kl:is', [DoubleCollection.$], 'DashCap:ko:it', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'HighlightingFadeOpacity:bt:iu', [1, NaN], 'IsDropShadowEnabled:at:iv', [0], 'IsHitTestVisible:au:iw', [0, true], 'IsSplineShapePartOfRange:av:ix', [0, false], 'IsTransitionInEnabled:aw:iy', [0, false], 'ItemsSource::iz', [IEnumerable_$type, null], 'LegendItemBadgeMode:p:i0', [LegendItemBadgeMode_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeMode_$type, 0)], 'LegendItemBadgeShape:r:i1', [LegendItemBadgeShape_$type, /*@__PURE__*/ enumGetBox(LegendItemBadgeShape_$type, 0)], 'LegendItemBadgeTemplate:g9:i2', [DataTemplate.$, null], 'LegendItemTemplate:ha:i3', [DataTemplate.$, null], 'LegendItemVisibility:k7:i4', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)], 'LineCap:kp:i5', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)], 'MarkerBrush:kd:i6', [Brush.$], 'MarkerFillMode:t:i7', [MarkerFillMode_$type, /*@__PURE__*/ enumGetBox(MarkerFillMode_$type, 0)], 'MarkerFillOpacity:bu:i8', [1, NaN], 'MarkerOutlineMode:v:i9', [MarkerOutlineMode_$type, /*@__PURE__*/ enumGetBox(MarkerOutlineMode_$type, 0)], 'MarkerOutline:ke:ja', [Brush.$], 'MarkerStyle:k4:jb', [Style.$], 'MarkerTemplate:hb:jc', [DataTemplate.$, null], 'MarkerThickness:bv:jd', [1, NaN], 'MarkerType:x:je', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 2)], 'Name:en:jf', [2], 'OpacityMask:kf:jg', [Brush.$], 'Opacity:bw:jh', [1, 1], 'OutlineMode:aa:ji', [SeriesOutlineMode_$type, /*@__PURE__*/ enumGetBox(SeriesOutlineMode_$type, 0)], 'Outline:kg:jj', [Brush.$, null], 'ParentOrLocalBrush:kh:jk', [Brush.$], 'RadiusX:bx:jl', [1, NaN], 'RadiusY:by:jm', [1, NaN], 'ShadowBlur:bz:jn', [1, NaN], 'ShadowColor:kj:jo', [Color.$], 'ShadowOffsetX:b0:jp', [1, NaN], 'ShadowOffsetY:b1:jq', [1, NaN], 'Thickness:b2:jr', [1, NaN], 'Title:ch:js', [4, "Series Title"], 'ToolTip:ci:jt', [4, null], 'TransitionDuration:cb:ju', [1, 0], 'TransitionEasingFunction:ah:jv', [Delegate_$type, null], 'TransitionInDuration:cc:jw', [1, 1000], 'TransitionInEasingFunction:ai:jx', [Delegate_$type, null], 'TransitionInMode:n:jy', [CategoryTransitionInMode_$type, /*@__PURE__*/ enumGetBox(CategoryTransitionInMode_$type, 0)], 'TransitionInSpeedType:ad:jz', [TransitionInSpeedType_$type, /*@__PURE__*/ enumGetBox(TransitionInSpeedType_$type, 0)], 'UseHighMarkerFidelity:a1:j0', [0, false], 'UseLightweightMarkers:a2:j1', [0, false], 'UseSingleShadow:a3:j2', [0], 'ValueMemberAsLegendLabel:fc:j3', [2, null], 'ValueMemberAsLegendUnit:fe:j4', [2, null], 'ValueMemberPath:fg:j5', [2, null], 'Visibility:k8:j6', [Visibility_$type, /*@__PURE__*/ enumGetBox(Visibility_$type, 0)]]);
    return StackedFragmentSeries;
})();
/**
 * @hidden
 */
export let StackedSeriesCollection = /*@__PURE__*/ (() => {
    class StackedSeriesCollection extends ObservableCollection$1 {
        constructor() {
            super(StackedFragmentSeries.$, 0);
            this.collectionResetting = null;
        }
        p() {
            if (this.collectionResetting != null) {
                this.collectionResetting(this, null);
            }
            super.p();
        }
    }
    StackedSeriesCollection.$t = /*@__PURE__*/ markType(StackedSeriesCollection, 'StackedSeriesCollection', /*@__PURE__*/ ObservableCollection$1.$.specialize(StackedFragmentSeries.$));
    return StackedSeriesCollection;
})();
/**
 * @hidden
 */
export let StackedSeriesFramePreparer = /*@__PURE__*/ (() => {
    class StackedSeriesFramePreparer extends CategoryFramePreparer {
        constructor(a, ..._rest) {
            a = (a == void 0) ? 0 : a;
            switch (a) {
                case 0:
                    {
                        let c = _rest[0];
                        super(0, c);
                    }
                    break;
                case 1:
                    {
                        let c = _rest[0];
                        let d = _rest[1];
                        let e = _rest[2];
                        let f = _rest[3];
                        let g = _rest[4];
                        super(1, c, d, e, f, g);
                    }
                    break;
            }
        }
        j(a) {
            let b = new SingleValuesHolder();
            if (typeCast(StackedColumnSeries.$, this.h) !== null || typeCast(StackedBarSeries.$, this.h) !== null) {
                let c = typeCast(StackedSeriesBase.$, this.h);
                if (c.tq.count > 0) {
                    b.f = c.tq._inner[0].aj;
                }
                return b;
            }
            let d = this.ad.valueColumn;
            b.f = d;
            return b;
        }
        t(a, b, c, d, e) {
            let f = 0;
            let g = false;
            let h;
            let i = a.d != null;
            let j = this.h.provideCollisionDetector();
            let k = a.f;
            let l = a.k;
            let m = this.h.mayContainUnknowns;
            let n = new ScalerParams(0, a.m, a.l, a.b.j$a, l);
            let o = new ScalerParams(0, a.m, a.l, a.c.j$a, l);
            o.b = this.h.getHostReferenceValue();
            let p = (a.b.j$c(2, n) - a.b.j$c(1, n));
            let q = a.m;
            let r = a.l;
            let s = typeCast(NumericAxisBase.$, a.c) !== null && a.c.li;
            for (let t = a.i; t <= a.j; ++t) {
                let u;
                if (a.d == null) {
                    if (!m) {
                        u = this.g.getBucketWithoutUnknowns(t);
                    }
                    else {
                        u = this.g.getBucket(t);
                    }
                }
                else {
                    u = ((() => { let v = this.f(a, t, b, p, g, h, c); t = v.p1; g = v.p4; h = v.p5; return v.ret; })());
                }
                let v = !s || (s && u[1] > 0);
                let w = u[0];
                if (!isNaN_(u[0])) {
                    this.x(a, u, c, i, n, o);
                    a.a.f.add(u);
                    let x = t * a.h;
                    let y = x;
                    if (a.d != null && a.d.i$b != null && x >= 0 && x < a.d.i$b.count) {
                        x = a.d.i$b._inner[x];
                    }
                    let z = u;
                    if (k && x < b.e) {
                        z = new Array(u.length);
                        z[0] = w;
                        this.z(b, x, true, a.e);
                        z[1] = b.c;
                        z[2] = b.d;
                        this.x(a, z, c, i, n, o);
                    }
                    if (d && v && this.l(a.a, z, j, Math.min(x, b.e - 1), f, a.a.f.count - 1)) {
                        ++f;
                    }
                }
            }
            return f;
        }
        l(a, b, c, d, e, f) {
            let g = b[0];
            let h = b[1];
            if (typeCast(IBarSeries_$type, this.c) !== null) {
                h = b[0];
                g = b[1];
            }
            let i = new Rect(0, g - 5, h - 5, 11, 11);
            if (!isNaN_(g) && !isNaN_(h) && !isInfinity(g) && !isInfinity(h) && c.tryAdd(i)) {
                a.m.add({ $type: Point_$type, x: g, y: h });
                this.c.updateMarkerTemplate(e, d, f);
                return true;
            }
            return false;
        }
    }
    StackedSeriesFramePreparer.$t = /*@__PURE__*/ markType(StackedSeriesFramePreparer, 'StackedSeriesFramePreparer', CategoryFramePreparer.$);
    return StackedSeriesFramePreparer;
})();
/**
 * @hidden
 */
export let AreaFragmentView = /*@__PURE__*/ (() => {
    class AreaFragmentView extends AnchoredCategorySeriesView {
        as() {
            super.as();
            if (!this.q) {
            }
        }
        constructor(a) {
            super(a);
            this.da = null;
            this.dg = new Path();
            this.di = new Path();
            this.dh = new Path();
            this.dj = new Path();
            this.dc = new Path();
            this.de = new Path();
            this.dd = new Path();
            this.df = new Path();
            this.da = a;
        }
        db() {
            this.dg.an = null;
            this.dh.an = null;
            this.di.an = null;
            this.dj.an = null;
            this.dc.an = null;
            this.dd.an = null;
            this.de.an = null;
            this.df.an = null;
        }
        cs() {
            return new AreaFragmentBucketCalculator(this);
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.dc.an = this.dg.an;
            this.dd.an = this.dh.an;
            this.de.an = this.di.an;
            this.df.an = this.dj.an;
            this.dc._fill = a;
            this.dd._fill = a;
            this.dc._opacity = 1;
            this.dd._opacity = 1;
            this.de._stroke = a;
            this.de.ad = this.e.fy + 3;
            this.df._stroke = a;
            this.df.ad = this.e.fy + 3;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.dc);
                    a.t(this.dd);
                    a.t(this.de);
                    a.t(this.df);
                }
                else {
                    a.t(this.dg);
                    a.t(this.dh);
                    a.t(this.di);
                    a.t(this.dj);
                }
            }
        }
        get_index() {
            let a = this.da.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.da.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b1.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a9.exportPathData(a, this.di, "lowerShape", ["Lower"]);
            this.e.a9.exportPathData(a, this.dj, "upperShape", ["Upper", "Main"]);
            this.e.a9.exportPathData(a, this.dh, "translucentShape", ["Translucent"]);
            this.e.a9.exportPathData(a, this.dg, "fillShape", ["Fill"]);
        }
    }
    AreaFragmentView.$t = /*@__PURE__*/ markType(AreaFragmentView, 'AreaFragmentView', AnchoredCategorySeriesView.$);
    return AreaFragmentView;
})();
/**
 * @hidden
 */
export let ColumnFragmentView = /*@__PURE__*/ (() => {
    class ColumnFragmentView extends AnchoredCategorySeriesView {
        as() {
            super.as();
            if (!this.q) {
            }
        }
        constructor(a) {
            super(a);
            this.da = null;
            this.de = null;
            this.db = null;
            this.dc = null;
            this.dd = null;
            this.dj = new Rectangle();
            this.da = a;
            this.dc = new List$1(Number_$type, 0);
            this.dd = new List$1(Number_$type, 0);
            this.db = ((() => {
                let $ret = new Pool$1(Rectangle.$);
                $ret.create = runOn(this, this.dk);
                $ret.activate = runOn(this, this.df);
                $ret.disactivate = runOn(this, this.dh);
                $ret.destroy = runOn(this, this.dg);
                return $ret;
            })());
            this.de = new List$1(Rectangle.$, 0);
        }
        dk() {
            let a = ((() => {
                let $ret = new Rectangle();
                $ret.dataContext = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
                return $ret;
            })());
            this.de.add(a);
            a._visibility = 1;
            return a;
        }
        df(a) {
            a._visibility = 0;
        }
        dh(a) {
            a._visibility = 1;
        }
        dg(a) {
            this.de.remove(a);
        }
        be(a, b) {
            super.be(a, b);
            let c = a;
        }
        di(a, b, c) {
            let d = false;
            if (a.o != c) {
                d = true;
                a.o = c;
            }
            if (a.n != b) {
                d = true;
                a.n = b;
            }
            if (d) {
                this.aq();
            }
        }
        bf(a, b) {
            super.bf(a, b);
        }
        ac(a) {
            return this.de._inner[a];
        }
        ab(a) {
            let b = this.de._inner[a];
            this.dj._visibility = b._visibility;
            this.dj.n = b.n;
            this.dj.o = b.o;
            this.dj.width = b.width;
            this.dj.height = b.height;
            let c = this.bp(a);
            this.dj._fill = c;
            this.dj._stroke = c;
            this.dj.ad = this.e.fy + 3;
            return this.dj;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                for (let c = 0; c < this.de.count; c++) {
                    let d = this.aa(c, b);
                    this.bd(d, c, b);
                    a.w(d);
                }
            }
        }
        get_index() {
            let a = this.da.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.da.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b1.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            let b = 0;
            let c = new List$1(Rectangle.$, 0);
            for (let d of fromEnum(this.db.a)) {
                c.add(d);
            }
            c.aa((e, f) => {
                if (e.n < f.n) {
                    return -1;
                }
                else if (e.n > f.n) {
                    return 1;
                }
                else {
                    return 0;
                }
            });
            for (let e of fromEnum(c)) {
                this.e.a9.exportRectangleData(a, e, "column" + b, ["Main", "Fill"]);
            }
            b++;
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'>";
            let b = null;
            if (this.da.rw().ca) {
                b = this.da.fragmentXAxis;
            }
            else if (this.da.fragmentYAxis.ca) {
                b = this.da.fragmentYAxis;
            }
            if (b.cd) {
                let c = b;
                a += "<span>${item." + c.dateTimeMemberPath + "}</span><br/>";
            }
            if (b != null && b.fz != null) {
                a += "<span>${item." + b.fz + "}</span><br/>";
            }
            a += "<span";
            let d = this.e.a7.a$r(this.e);
            if (!stringIsNullOrEmpty(d)) {
                a += " style='color:" + d + "'";
            }
            a += ">" + this.da.title + ": </span><span class='ui-priority-primary'>" + "${item." + this.da.uc + "}</span></div>";
            return a;
        }
    }
    ColumnFragmentView.$t = /*@__PURE__*/ markType(ColumnFragmentView, 'ColumnFragmentView', AnchoredCategorySeriesView.$);
    return ColumnFragmentView;
})();
/**
 * @hidden
 */
export let LineFragmentView = /*@__PURE__*/ (() => {
    class LineFragmentView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.dg = new Path();
            this.df = new Path();
            this.dh = new Path();
            this.dd = new Path();
            this.dc = new Path();
            this.de = new Path();
            this.da = a;
        }
        db() {
            this.df.an = null;
            this.dg.an = null;
            this.dh.an = null;
            this.dc.an = null;
            this.dd.an = null;
            this.de.an = null;
        }
        cs() {
            return new LineFragmentBucketCalculator(this);
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.dc.an = this.df.an;
            this.dd.an = this.dg.an;
            this.de.an = this.dh.an;
            this.dd._stroke = a;
            this.dd.ad = this.e.fy + 3;
            this.de._stroke = a;
            this.de.ad = this.e.fy + 3;
            this.dc._fill = a;
            this.dc._opacity = 1;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.dc);
                    a.t(this.dd);
                    a.t(this.de);
                }
                else {
                    a.t(this.df);
                    a.t(this.dg);
                    a.t(this.dh);
                }
            }
        }
        get_index() {
            let a = this.da.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.da.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b1.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a9.exportPathData(a, this.dg, "lowerShape", ["Lower", "Main"]);
            this.e.a9.exportPathData(a, this.dh, "upperShape", ["Upper"]);
            this.e.a9.exportPathData(a, this.df, "translucentShape", ["Translucent"]);
        }
    }
    LineFragmentView.$t = /*@__PURE__*/ markType(LineFragmentView, 'LineFragmentView', AnchoredCategorySeriesView.$);
    return LineFragmentView;
})();
/**
 * @hidden
 */
export let SplineAreaFragmentView = /*@__PURE__*/ (() => {
    class SplineAreaFragmentView extends SplineSeriesBaseView {
        as() {
            super.as();
            if (!this.q) {
            }
        }
        constructor(a) {
            super(a);
            this.dc = null;
            this.di = new Path();
            this.dk = new Path();
            this.dj = new Path();
            this.dl = new Path();
            this.de = new Path();
            this.dg = new Path();
            this.df = new Path();
            this.dh = new Path();
            this.dc = a;
        }
        dd() {
            this.di.an = null;
            this.dj.an = null;
            this.dk.an = null;
            this.dl.an = null;
            this.de.an = null;
            this.df.an = null;
            this.dg.an = null;
            this.dh.an = null;
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.de.an = this.di.an;
            this.df.an = this.dj.an;
            this.dg.an = this.dk.an;
            this.dh.an = this.dl.an;
            this.de._fill = a;
            this.df._fill = a;
            this.df._opacity = 1;
            this.de._opacity = 1;
            this.dg._stroke = a;
            this.dg.ad = this.e.fy + 3;
            this.dh._stroke = a;
            this.dh.ad = this.e.fy + 3;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.de);
                    a.t(this.df);
                    a.t(this.dg);
                    a.t(this.dh);
                }
                else {
                    a.t(this.di);
                    a.t(this.dj);
                    a.t(this.dk);
                    a.t(this.dl);
                }
            }
        }
        get_index() {
            let a = this.dc.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.dc.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b1.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a9.exportPathData(a, this.dk, "lowerShape", ["Lower"]);
            this.e.a9.exportPathData(a, this.dl, "upperShape", ["Upper", "Main"]);
            this.e.a9.exportPathData(a, this.dj, "translucentShape", ["Translucent"]);
            this.e.a9.exportPathData(a, this.di, "fillShape", ["Fill"]);
        }
    }
    SplineAreaFragmentView.$t = /*@__PURE__*/ markType(SplineAreaFragmentView, 'SplineAreaFragmentView', SplineSeriesBaseView.$);
    return SplineAreaFragmentView;
})();
/**
 * @hidden
 */
export let SplineFragmentView = /*@__PURE__*/ (() => {
    class SplineFragmentView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.dc = null;
            this.di = new Path();
            this.dh = new Path();
            this.dj = new Path();
            this.df = new Path();
            this.de = new Path();
            this.dg = new Path();
            this.dc = a;
        }
        cs() {
            return new SplineFragmentBucketCalculator(this);
        }
        dd() {
            this.dh.an = null;
            this.di.an = null;
            this.dj.an = null;
            this.de.an = null;
            this.df.an = null;
            this.dg.an = null;
        }
        bb() {
            super.bb();
        }
        bc() {
            super.bc();
            let a = this.bo();
            this.de.an = this.dh.an;
            this.df.an = this.di.an;
            this.dg.an = this.dj.an;
            this.df._stroke = a;
            this.df.ad = this.e.fy + 3;
            this.dg._stroke = a;
            this.dg.ad = this.e.fy + 3;
            this.de._fill = a;
            this.de._opacity = 0.75;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.de);
                    a.t(this.df);
                    a.t(this.dg);
                }
                else {
                    a.t(this.dh);
                    a.t(this.di);
                    a.t(this.dj);
                }
            }
        }
        get_index() {
            let a = this.dc.parentSeries;
            let b = a.series.count;
            let c = a.series.indexOf(this.dc.logicalSeriesLink);
            let d = (b - 1) - c;
            let e = a.b1.index;
            return e + d;
        }
        al(a) {
            super.al(a);
            this.e.a9.exportPathData(a, this.di, "lowerShape", ["Lower", "Main"]);
            this.e.a9.exportPathData(a, this.dj, "upperShape", ["Upper"]);
            this.e.a9.exportPathData(a, this.dh, "translucentShape", ["Translucent"]);
        }
    }
    SplineFragmentView.$t = /*@__PURE__*/ markType(SplineFragmentView, 'SplineFragmentView', SplineSeriesBaseView.$);
    return SplineFragmentView;
})();
/**
 * @hidden
 */
export let StackedSeriesView = /*@__PURE__*/ (() => {
    class StackedSeriesView extends CategorySeriesView {
        get c2() {
            return this.c1;
        }
        get c4() {
            return this.c3;
        }
        constructor(a) {
            super(a);
            this.c0 = null;
            this.c1 = new Canvas();
            this.c3 = new Panel();
            this.c0 = a;
        }
        cs() {
            return new StackedBucketCalculator(this);
        }
        ap() {
            super.ap();
            for (let a = 0; a < this.c0.tu.f.count; a++) {
                this.c0.tu.f._inner[a].b1.ap();
            }
        }
        ar(a, b) {
            super.ar(a, b);
            for (let c of fromEnum(this.c0.series)) {
                c.visualSeriesLink.b1.ar(a, b);
            }
        }
        af() {
            let a = "rgba(95,95,95,0.5)";
            let b = true;
            let c = 5, d = 5, e = 5;
            let f = this.e;
            if ((f.isStacked && f.df) || (f.isStacked && f.ej && f.df)) {
                d = 1;
                e = -3;
            }
            else if ((f.isStacked && f.d4) || (f.isStacked && f.ej)) {
                c = 3;
                d = 1;
                e = 4;
                b = false;
            }
            else if ((f.isStacked && f.dk)) {
                d = 5;
                e = 0;
            }
            let g = new Color();
            g.colorString = a;
            f.ph = g;
            f.g1 = c;
            f.g2 = d;
            f.g3 = e;
            f.fb = b;
        }
    }
    StackedSeriesView.$t = /*@__PURE__*/ markType(StackedSeriesView, 'StackedSeriesView', CategorySeriesView.$);
    return StackedSeriesView;
})();
/**
 * @hidden
 */
export let StackedBarSeriesView = /*@__PURE__*/ (() => {
    class StackedBarSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
            this.c5 = null;
            this.c5 = a;
        }
        cs() {
            return new StackedBarBucketCalculator(this);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.ql = Defaults.c;
                this.c0.g4 = Defaults.i;
            }
        }
    }
    StackedBarSeriesView.$t = /*@__PURE__*/ markType(StackedBarSeriesView, 'StackedBarSeriesView', StackedSeriesView.$);
    return StackedBarSeriesView;
})();
/**
 * @hidden
 */
export let StackedColumnSeriesView = /*@__PURE__*/ (() => {
    class StackedColumnSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        cs() {
            return new StackedColumnBucketCalculator(this);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.ql = Defaults.c;
                this.c0.g4 = Defaults.i;
            }
        }
    }
    StackedColumnSeriesView.$t = /*@__PURE__*/ markType(StackedColumnSeriesView, 'StackedColumnSeriesView', StackedSeriesView.$);
    return StackedColumnSeriesView;
})();
/**
 * @hidden
 */
export let StackedAreaSeriesView = /*@__PURE__*/ (() => {
    class StackedAreaSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.ql = Defaults.e;
            }
        }
    }
    StackedAreaSeriesView.$t = /*@__PURE__*/ markType(StackedAreaSeriesView, 'StackedAreaSeriesView', StackedSeriesView.$);
    return StackedAreaSeriesView;
})();
/**
 * @hidden
 */
export let StackedSplineAreaSeriesView = /*@__PURE__*/ (() => {
    class StackedSplineAreaSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.ql = Defaults.e;
            }
        }
        c5() {
            let a = 1;
            if (this.c0.ce != null) {
                a = this.c0.ce.gd;
            }
            return Math.max(1 / (a * 3), 0.3);
        }
    }
    StackedSplineAreaSeriesView.$t = /*@__PURE__*/ markType(StackedSplineAreaSeriesView, 'StackedSplineAreaSeriesView', StackedSeriesView.$);
    return StackedSplineAreaSeriesView;
})();
/**
 * @hidden
 */
export let StackedSplineSeriesView = /*@__PURE__*/ (() => {
    class StackedSplineSeriesView extends StackedSeriesView {
        constructor(a) {
            super(a);
        }
        as() {
            super.as();
            if (!this.q) {
                this.c0.ql = Defaults.e;
            }
        }
        c5() {
            let a = 1;
            if (this.c0.ce != null) {
                a = this.c0.ce.gd;
            }
            return Math.max(1 / (a * 3), 0.3);
        }
    }
    StackedSplineSeriesView.$t = /*@__PURE__*/ markType(StackedSplineSeriesView, 'StackedSplineSeriesView', StackedSeriesView.$);
    return StackedSplineSeriesView;
})();
/**
 * @hidden
 */
export let StackedSeriesManager = /*@__PURE__*/ (() => {
    class StackedSeriesManager extends Base {
        constructor(a) {
            super();
            this.b = null;
            this.f = null;
            this.c = null;
            this.e = null;
            this.d = null;
            this.k = null;
            this.l = null;
            if (a == null) {
                return;
            }
            this.b = a;
            this.f = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.c = new StackedSeriesCollection();
            this.e = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.d = new ObservableCollection$1(AnchoredCategorySeries.$, 0);
            this.k = this.b.tv.c2;
            this.l = this.b.tv.c4;
            let b = this.c;
            b.collectionChanged = delegateCombine(b.collectionChanged, (b, c) => {
                if (c.oldItems != null) {
                    for (let d of fromEn(c.oldItems)) {
                        if (this.f.contains(d.visualSeriesLink)) {
                            this.f.remove(d.visualSeriesLink);
                        }
                    }
                }
                if (c.newItems != null) {
                    let e = c.newStartingIndex;
                    for (let f of fromEn(c.newItems)) {
                        let g = this.a(f);
                        this.f.insert(e, g);
                        e++;
                    }
                }
            });
            let c = this.f;
            c.collectionChanged = delegateCombine(c.collectionChanged, (c, d) => {
                if (d.oldItems != null) {
                    for (let e of fromEn(d.oldItems)) {
                        e.k2(true, e.b1);
                        e.ce = null;
                        e.b9 = null;
                        e.itemsSource = null;
                        e.legend = null;
                        if (this.l != null && this.l.ab.contains(e)) {
                            this.l.ab.remove(e);
                        }
                        if (this.b.ce != null) {
                            this.b.ce.oq(e);
                        }
                    }
                }
                if (d.newItems != null) {
                    for (let f of fromEn(d.newItems)) {
                        f.ce = this.b.ce;
                        f.b9 = this.b.b9;
                        if (!this.l.ab.contains(f)) {
                            this.l.ab.add(f);
                        }
                        if (this.b.ce != null) {
                            this.b.ce.ll(f);
                        }
                    }
                }
                this.b.mn(false);
            });
        }
        a(a) {
            if (this.b.isStacked && this.b.d4) {
                let b = new LineFragment();
                b.provideRenderer(a.b3);
                b.parentSeries = this.b;
                a.visualSeriesLink = b;
                b.logicalSeriesLink = a;
                b.b1.bu = this.b.b1.bu;
                this.i(b, a);
                this.g(b);
                return b;
            }
            if (this.b.isStacked && this.b.dk) {
                let c = new ColumnFragment();
                c.provideRenderer(a.b3);
                c.parentSeries = this.b;
                a.visualSeriesLink = c;
                c.logicalSeriesLink = a;
                c.b1.bu = this.b.b1.bu;
                this.i(c, a);
                this.g(c);
                return c;
            }
            if (this.b.isStacked && this.b.di) {
                let d = new BarFragment();
                d.provideRenderer(a.b3);
                d.parentSeries = typeCast(StackedBarSeries.$, this.b);
                a.visualSeriesLink = d;
                d.logicalSeriesLink = a;
                d.b1.bu = this.b.b1.bu;
                this.i(d, a);
                this.g(d);
                return d;
            }
            if (this.b.isStacked && this.b.df && !this.b.ej) {
                let e = new AreaFragment();
                e.provideRenderer(a.b3);
                e.parentSeries = this.b;
                a.visualSeriesLink = e;
                e.logicalSeriesLink = a;
                e.b1.bu = this.b.b1.bu;
                this.i(e, a);
                this.g(e);
                return e;
            }
            if (this.b.isStacked && this.b.ej && !this.b.df) {
                let f = new SplineFragment();
                f.provideRenderer(a.b3);
                f.parentSeries = this.b;
                a.visualSeriesLink = f;
                f.logicalSeriesLink = a;
                f.b1.bu = this.b.b1.bu;
                this.i(f, a);
                this.g(f);
                return f;
            }
            if (this.b.isStacked && this.b.ej && this.b.df) {
                let g = new SplineAreaFragment();
                g.provideRenderer(a.b3);
                g.parentSeries = this.b;
                a.visualSeriesLink = g;
                g.logicalSeriesLink = a;
                g.b1.bu = this.b.b1.bu;
                this.i(g, a);
                this.g(g);
                return g;
            }
            return null;
        }
        j() {
            if (this.b == null) {
                return;
            }
            for (let a of fromEnum(this.f)) {
                a.gy = this.b.fx;
            }
        }
        i(a, b) {
            if (b.itemsSource == null) {
                a.itemsSource = this.b.itemsSource;
            }
            else {
                a.itemsSource = b.itemsSource;
            }
            a.legend = this.b.a2;
            a.legendItemTemplate = b.g7;
            a.qb = b.k5;
            a.gw = this.b.gw;
            a.pk = b.kn;
            a.pi = b.kk;
            a.pj = b.km;
            a.o9 = b.kh;
            a._opacity = b.bw;
            a.pe = b.kb;
            a.bu = b.z;
            a.gy = this.b.gy;
            a.g4 = b.bj;
            a.title = b.ch;
            a.uc = b.fg;
            a.t8 = b.fc;
            a.ua = b.fe;
            a._visibility = b.k6;
            a.gu = b.ba;
            a.rn = b.j8;
            a.ro = b.j9;
            a.qi = b.u;
            a.rp = b.k3;
            a.q7 = b.g8;
            a.ql = b.w;
            a.qq = b.bc;
            a.gv = b.bb;
            a.qe = b.s;
            a.qp = b.ap;
            a.ss = b.ao;
            a.hr = b.b4;
            a.cg = b.af;
            a.hs = b.b5;
            a.r8 = b.m;
            a.cb = b.ac;
            a.hs = b.b5;
            a.ch = b.ag;
            a.so = b.an;
            let c = typeCast(AreaFragment.$, a);
            if (c != null) {
                c.fu = b.a9;
            }
            let d = typeCast(SplineAreaFragment.$, a);
            if (d != null) {
                d.fu = b.a9;
            }
            let e = typeCast(ColumnFragment.$, a);
            if (e != null) {
                e.vx = b.be;
                e.vy = b.bf;
            }
            let f = typeCast(BarFragment.$, a);
            if (f != null) {
                f.vx = b.be;
                f.vy = b.bf;
            }
            a.toolTip = b.ci;
            a.dq = b.ak;
            a.fb = b.aq;
            b.gm();
            b.gn();
            b.go();
            b.gp();
        }
        h(a) {
            this.e.clear();
            this.d.clear();
            let b = 0;
            for (let c of fromEnum(this.f)) {
                c.e3 = true;
                c.index = this.b.t6(this.c._inner[b]);
                c.b9 = this.b.b9;
                c.ce = this.b.ce;
                if (this.c._inner[b].ay) {
                    this.e.add(c);
                }
                else {
                    this.d.add(c);
                }
                if ((this.b.isStacked && this.b.d4) || (this.b.isStacked && this.b.df) || (this.b.isStacked && this.b.ej)) {
                    c.uf(this.b.fetchXAxis());
                    c.ug(this.b.fetchYAxis());
                }
                c.mn(a);
                b++;
            }
        }
        g(a) {
            let fragment_ = a;
            fragment_.externalObject = TypeRegistrar.createFromInternal(fragment_, PlatformConstants.Prefix, PlatformConstants.Postfix);
            fragment_.externalObject._implementation = fragment_;
        }
    }
    StackedSeriesManager.$t = /*@__PURE__*/ markType(StackedSeriesManager, 'StackedSeriesManager');
    return StackedSeriesManager;
})();
