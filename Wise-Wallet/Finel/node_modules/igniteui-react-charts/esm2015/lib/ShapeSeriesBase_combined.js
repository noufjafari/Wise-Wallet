/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Series } from "./Series";
import { DependencyProperty } from "igniteui-react-core";
import { HighlightingInfo } from "./HighlightingInfo";
import { ShapeItemSearchMode_$type } from "./ShapeItemSearchMode";
import { IEnumerable$1_$type, enumGetBox, Number_$type, Point_$type, typeCast, fromEnum, runOn, Array_$type, markType, markDep } from "igniteui-react-core";
import { NumericXAxis } from "./NumericXAxis";
import { NumericYAxis } from "./NumericYAxis";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { StyleShapeEventArgs } from "./StyleShapeEventArgs";
import { FrameworkElement } from "igniteui-react-core";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { Tuple$2 } from "igniteui-react-core";
import { ShapeHitRegion } from "./ShapeHitRegion";
import { RectUtil } from "igniteui-react-core";
import { Tuple$3 } from "igniteui-react-core";
import { GeometryUtil } from "igniteui-react-core";
import { AssigningShapeStyleEventArgs } from "./AssigningShapeStyleEventArgs";
import { AssigningShapeMarkerStyleEventArgs } from "./AssigningShapeMarkerStyleEventArgs";
import { PointCollectionUtil } from "igniteui-react-core";
import { FlattenedShape } from "./FlattenedShape";
import { SeriesView } from "./SeriesView";
import { Clipper } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Dictionary$2 } from "igniteui-react-core";
import { SeriesRenderManager } from "./SeriesRenderManager";
import { PolySimplification } from "igniteui-react-core";
import { DefaultFlattener } from "./DefaultFlattener";
import { AxisRange } from "./AxisRange";
import { Style } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { boxArray$1 } from "igniteui-react-core";
import { InvalidOperationException } from "igniteui-react-core";
import { isNaN_, truncate } from "igniteui-react-core";
import { FastItemObjectColumn } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { Pool$1 } from "igniteui-react-core";
import { PointCollection } from "igniteui-react-core";
import { PathGeometry } from "igniteui-react-core";
import { PolyLineSegment } from "igniteui-react-core";
import { PathFigure } from "igniteui-react-core";
import { PolygonUtil } from "igniteui-react-core";
/**
 * @hidden
 */
export let ShapeSeriesBase = /*@__PURE__*/ (() => {
    class ShapeSeriesBase extends Series {
        constructor() {
            super();
            this.q5 = false;
            this.q4 = false;
            this.qq = null;
            this.qr = null;
            this.qw = 1;
            this.qg = null;
            this.qh = null;
            this.assigningShapeStyle = null;
            this.assigningShapeMarkerStyle = null;
            this.q0 = null;
            this.q2 = null;
            this.qs = null;
            this.qu = null;
            this.rp = 0;
            this.rl = null;
            this.qd = null;
            this.qf = null;
            this.qe = null;
            this.qc = null;
            this.sw = null;
            this.rs = 0;
            this.styleShape = null;
            this.q0 = new ShapeSeriesRenderManager();
            FastItemObjectColumn.m();
            this.rs = this.rr;
            this.sw = Rect.empty;
        }
        kz() {
            super.kz();
            this.qt = null;
            this.qv = null;
        }
        ag() {
            return [this.qt, this.qv];
        }
        h1(a, b) {
            let c = this.jv(b);
            if (c == ShapeSeriesBase.$$p[6]) {
                return this.h2(a, b, this.r5);
            }
            return null;
        }
        get_d0() {
            return true;
        }
        get_c3() {
            return true;
        }
        qo(a, b, c) {
            let d = this.pn(b);
            let e = this.q1.cz(d, false);
            let f = -1;
            if (e == null) {
                if (a != null) {
                    f = this.cl.indexOf(a);
                }
                else {
                    return null;
                }
            }
            else if (e.dataContext != null) {
                f = e.dataContext.c;
            }
            if (f == -1) {
                return null;
            }
            let g = new HighlightingInfo();
            g.b = this;
            g.h = f;
            g.g = f;
            g.d = false;
            if (c != null && c.h == g.h && c.g == g.g) {
                return c;
            }
            return g;
        }
        qp(a, b, c) {
            let d = this.q1.b1(this.pn(b));
            let e = -1;
            if (d == null) {
                if (a != null) {
                    e = this.cl.indexOf(a);
                }
                else {
                    return null;
                }
            }
            else {
                e = d.ak;
            }
            if (e == -1) {
                return null;
            }
            let f = new HighlightingInfo();
            f.b = this;
            f.h = e;
            f.g = e;
            f.d = false;
            f.e = true;
            if (c != null && c.h == f.h && c.g == f.g) {
                return c;
            }
            return f;
        }
        get qx() {
            return this.qw;
        }
        set qx(a) {
            let b = this.qw;
            this.qw = a;
            if (b != this.qw) {
                this.raisePropertyChanged("ActualItemSearchMode", enumGetBox(ShapeItemSearchMode_$type, b), enumGetBox(ShapeItemSearchMode_$type, this.qw));
            }
        }
        qy() {
            if (this.qz != 0) {
                return this.qz;
            }
            return 1;
        }
        f9(a) {
            switch (this.qx) {
                case 1: return this.sb(a).c;
                case 2: return this.rq(a);
                case 3: return this.rq(a);
            }
            return -1;
        }
        sb(a) {
            let b = this.pn(a);
            let c = { $type: Point_$type, x: NaN, y: NaN };
            let d = this.q1.cb;
            if (d == null) {
                return new Tuple$2(Number_$type, Point_$type, -1, c);
            }
            let e = this.q1.b2(b, false, !this.q6);
            if (e != null) {
                c = RectUtil.l(e.d);
                return new Tuple$2(Number_$type, Point_$type, e.b, c);
            }
            let f = b.x;
            let g = b.y;
            if (this.cl == null || this.qt == null || this.qv == null || this.rl == null) {
                return new Tuple$2(Number_$type, Point_$type, -1, c);
            }
            if (this.cl.count > this.rv) {
                return new Tuple$2(Number_$type, Point_$type, -1, c);
            }
            let h = 1.7976931348623157E+308;
            let i = -1;
            for (let j = 0; j < d.count; j++) {
                let k = d._inner[j].d;
                let l = RectUtil.g(k, b);
                if (l < h) {
                    h = l;
                    i = d._inner[j].b;
                    c = RectUtil.l(d._inner[j].d);
                }
            }
            return new Tuple$2(Number_$type, Point_$type, i, c);
        }
        sa(a) {
            let b = this.pn(a);
            let c = b.x;
            let d = b.y;
            let e = { $type: Point_$type, x: NaN, y: NaN };
            if (this.cl == null || this.qt == null || this.qv == null || this.rl == null) {
                return new Tuple$3(Number_$type, Point_$type, Point_$type, -1, e, e);
            }
            if (this.cl.count > this.rv) {
                return new Tuple$3(Number_$type, Point_$type, Point_$type, -1, e, e);
            }
            let f = 1.7976931348623157E+308;
            let g = this.q1.cb;
            if (g == null) {
                return new Tuple$3(Number_$type, Point_$type, Point_$type, -1, e, e);
            }
            let h = this.q1.b2(b, false, !this.q6);
            if (h != null) {
                let i = RectUtil.l(h.d);
                let j = this.r9(b, h.a, this.q6);
                return new Tuple$3(Number_$type, Point_$type, Point_$type, h.b, j.d, i);
            }
            for (let k = 0; k < g.count; k++) {
                let l = g._inner[k].d;
                let m = RectUtil.g(l, b);
                let n = (l.width * l.width) + (l.height * l.height) + m;
                if (n <= f) {
                    f = n;
                }
            }
            let o = 1.7976931348623157E+308;
            let p = -1;
            for (let q = 0; q < g.count; q++) {
                let r = g._inner[q].d;
                let s = RectUtil.g(r, b);
                if (s < f) {
                    let t = this.r9(b, g._inner[q].a, this.q6);
                    if (t.c < o) {
                        o = t.c;
                        e = t.d;
                        p = q;
                    }
                }
            }
            if (p >= 0) {
                return new Tuple$3(Number_$type, Point_$type, Point_$type, g._inner[p].b, e, RectUtil.l(g._inner[p].d));
            }
            return new Tuple$3(Number_$type, Point_$type, Point_$type, -1, e, e);
        }
        get_q6() {
            return true;
        }
        get q6() {
            return this.get_q6();
        }
        r9(a, b, c) {
            let d = { $type: Point_$type, x: NaN, y: NaN };
            let e = 1.7976931348623157E+308;
            let f = { $type: Point_$type, x: NaN, y: NaN };
            let g = false;
            let h = -1;
            for (let i = 0; i < b.count; i++) {
                let j = b._inner[i];
                if (i >= 1) {
                    let k = GeometryUtil.d(a, d, j);
                    if (k < e) {
                        e = k;
                        g = true;
                        h = i;
                    }
                }
                d = j;
            }
            if (c) {
                let l = b._inner[0];
                let m = GeometryUtil.d(a, d, l);
                if (m < e) {
                    e = m;
                    let n = GeometryUtil.h(a, d, l);
                    f = { $type: Point_$type, x: d.x + (l.x - d.x) * n, y: d.y + (l.y - d.y) * n };
                    return new Tuple$2(Number_$type, Point_$type, e, f);
                }
            }
            if (g) {
                let o = b._inner[h - 1];
                let p = b._inner[h];
                let q = GeometryUtil.h(a, o, p);
                f = { $type: Point_$type, x: o.x + (p.x - o.x) * q, y: o.y + (p.y - o.y) * q };
            }
            return new Tuple$2(Number_$type, Point_$type, e, f);
        }
        rq(a) {
            return this.sa(a).c;
        }
        ps(a, b, c) {
            if (this.qt == null || this.qv == null || this.rl == null) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            switch (this.qx) {
                case 1:
                    let d = this.sb(a);
                    return d.d;
                case 2:
                    let e = this.sa(a);
                    return e.e;
                case 3:
                    let f = this.sa(a);
                    return f.d;
            }
            return { $type: Point_$type, x: NaN, y: NaN };
        }
        hy(a) {
            let b = this.hi(a);
            if (this.cl != null && b >= 0 && b < this.cl.count) {
                return this.cl.item(b);
            }
            return null;
        }
        qn(a, b, c) {
            let d = new HighlightingInfo();
            d.b = this;
            d.h = 0;
            d.g = this.cl.count - 1;
            d.d = true;
            if (c != null && c.h == d.h && c.g == d.g) {
                return c;
            }
            return d;
        }
        ax(a, b, c) {
            if (this.c3 && this.ei(this.bl) && !c) {
                let d = this.qo(a, b, this.qq);
                this.qq = d;
                return d;
            }
            else {
                let e = this.qn(a, b, this.qq);
                this.qq = e;
                return e;
            }
        }
        ay(a, b, c) {
            if (this.ei(this.bl) && !c) {
                let d = this.qp(a, b, this.qr);
                this.qr = d;
                return d;
            }
            else {
                let e = this.qn(a, b, this.qr);
                e.e = true;
                this.qr = e;
                return e;
            }
        }
        rj() {
            return (this.assigningShapeStyle != null && this.q5) || (this.bl != 1);
        }
        ri() {
            return (this.assigningShapeMarkerStyle != null && this.q4) || (this.bl != 1);
        }
        get q3() {
            return this.q2;
        }
        set q3(a) {
            let b = this.q3 != a;
            if (b) {
                let c = this.q3;
                this.q2 = a;
                this.raisePropertyChanged("ShapeColumn", c, this.q3);
            }
        }
        ra(array_) {
            let a = (Array.isArray(array_));
            return a;
        }
        static re(a) {
            if (a == null) {
                return true;
            }
            let val_ = a;
            return (val_ == undefined);
        }
        convertToListList(a) {
            if (a == null) {
                return null;
            }
            let b = new List$1(List$1.$.specialize(Point_$type), 0);
            let c;
            let curr_;
            let d;
            let e;
            let f = false;
            let g = false;
            for (let h = 0; h < a.length; h++) {
                c = a[h];
                if (c == null) {
                    continue;
                }
                let i = new List$1(Point_$type, 0);
                for (let j = 0; j < c.length; j++) {
                    curr_ = c[j];
                    if (f) {
                        d = (curr_.X);
                        e = (curr_.Y);
                    }
                    else {
                        d = (curr_.x);
                        e = (curr_.y);
                    }
                    if (!g) {
                        if ((isNaN_(d) || ShapeSeriesBase.re(d)) && (isNaN_(e) || ShapeSeriesBase.re(e))) {
                            d = (curr_.X);
                            e = (curr_.Y);
                            if (!isNaN_(d) && !ShapeSeriesBase.re(d) && !isNaN_(e) && !ShapeSeriesBase.re(e)) {
                                g = true;
                                f = true;
                            }
                        }
                        else {
                            g = true;
                        }
                    }
                    i.add({ $type: Point_$type, x: d, y: e });
                }
                b.add(i);
            }
            return b;
        }
        ck(a) {
            if (this.cl != null && this.ra(this.itemsSource) && a != null && a.split('!').length != 2) {
                if (this.coercionMethods == null) {
                    this.coercionMethods = {};
                }
                let methods_ = this.coercionMethods;
                methods_.convertToListList = this.convertToListList;
                a += "!convertToListList";
            }
            return super.ck(a);
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            let e = false;
            let f = false;
            switch (b) {
                case ShapeSeriesBase.$$p[2]:
                    this.qx = this.qy();
                    break;
                case "FastItemsSource":
                    let g = typeCast(IFastItemsSource_$type, c);
                    if (g != null) {
                        g.deregisterColumn(this.q3);
                        this.q3 = null;
                    }
                    let h = typeCast(IFastItemsSource_$type, d);
                    if (h != null) {
                        this.q3 = this.ck(this.r5);
                    }
                    e = this.qt != null && !this.qt.c0();
                    f = this.qv != null && !this.qv.c0();
                    if (e || f) {
                        this.mn(false);
                    }
                    break;
                case ShapeSeriesBase.$$p[6]:
                    if (this.cl != null) {
                        this.cl.deregisterColumn(this.q3);
                        this.q3 = this.ck(this.r5);
                    }
                    break;
                case "ShapeColumn":
                    this.sk();
                    e = this.qt != null && !this.qt.c0();
                    f = this.qv != null && !this.qv.c0();
                    if (e || f) {
                        this.mn(false);
                    }
                    this.lu();
                    break;
                case ShapeSeriesBase.$$p[7]:
                case ShapeSeriesBase.$$p[8]:
                    this.qs = this.qt;
                    this.qu = this.qv;
                    let i = c;
                    let j = d;
                    this.sl(i);
                    this.sd(j);
                    if ((j != null && !j.c0()) || (j == null && i != null)) {
                        this.mn(false);
                    }
                    this.lu();
                    break;
                case "ActualResolution":
                    this.rp = this.fx;
                    this.lu();
                    break;
                case "ActualBrush":
                    this.mn(false);
                    break;
                case ShapeSeriesBase.$$p[5]:
                    this.rs = this.rr;
                    this.mn(false);
                    this.lu();
                    break;
                case "ActualThickness":
                    this.mn(false);
                    this.lu();
                    break;
                case ShapeSeriesBase.$$p[1]:
                    this.q5 = this.rh();
                    this.mn(false);
                    break;
                case ShapeSeriesBase.$$p[0]:
                    this.q4 = this.rg();
                    this.mn(false);
                    break;
            }
        }
        rh() {
            return this.rd;
        }
        rg() {
            return this.rc;
        }
        q8(a) {
            if (typeCast(NumericYAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        q7(a) {
            if (typeCast(NumericXAxis.$, a) !== null) {
                return true;
            }
            return false;
        }
        sk() {
            this.rl = null;
            if (this.q3 == null) {
                return;
            }
            this.rl = new List$1(Rect.$, 2, this.q3.count);
            for (let a = 0; a < this.q3.count; a++) {
                this.rl.add(PointCollectionUtil.j(this.q3.item(a)));
            }
        }
        sx(a) {
            if (typeCast(IEnumerable$1_$type.specialize(IEnumerable$1_$type.specialize(Point_$type)), a) !== null) {
                return PointCollectionUtil.h(a);
            }
            else if (typeCast(IEnumerable$1_$type.specialize(Point_$type), a) !== null) {
                return PointCollectionUtil.g(a);
            }
            return Rect.empty;
        }
        rn(a, b, c, d, e, f, g) {
            return this.ro(a, b, c, d, e, f, g);
            if (typeCast(List$1.$.specialize(List$1.$.specialize(Point_$type)), c) !== null) {
                return this.ro(a, b, c, d, e, f, g);
            }
            else if (typeCast(IEnumerable$1_$type.specialize(IEnumerable$1_$type.specialize(Point_$type)), c) !== null) {
                let h = c;
                let i = new List$1(FlattenedShape.$, 0);
                let j = null;
                for (let k of fromEnum(h)) {
                    j = this.qm(a, b, PointCollectionUtil.b(k), d, e, f, g);
                    if (j == null) {
                        continue;
                    }
                    i.add(j);
                }
                return i;
            }
            else if (typeCast(IEnumerable$1_$type.specialize(Point_$type), c) !== null) {
                let l = c;
                let m = this.qm(a, b, PointCollectionUtil.b(l), d, e, f, g);
                let n = new List$1(FlattenedShape.$, 0);
                if (m != null) {
                    n.add(m);
                }
                return n;
            }
            else {
                throw new InvalidOperationException(1, "Unrecognized data in ShapeColumn");
            }
        }
        get_rb() {
            return true;
        }
        get rb() {
            return this.get_rb();
        }
        rk() {
            return false;
        }
        mo(a) {
            this.sj(this.b1);
        }
        mm(a, b, c, d, e) {
            super.mm(a, b, c, d, e);
            let f = this.a7.a$h.item(d);
            let g = f;
            f.a1(c);
            if (this.cy(f)) {
                return;
            }
            this.sj(f);
        }
        sj(a) {
            if (this.cy(a)) {
                return;
            }
            let b;
            let c;
            let d = a;
            let e = a.getViewInfo(c, b);
            c = e.p0;
            b = e.p1;
            if (c.width < 1 || c.height < 1 || this.q3 == null) {
                return;
            }
            let f = this.qt;
            let g = this.qv;
            let h = this.getEffectiveViewport1(a);
            let i = new ScalerParams(1, b, c, f.cg);
            i.c = h;
            let j = new ScalerParams(1, b, c, g.cg);
            j.c = h;
            if (!this.ew) {
                d.cr();
                let k = new Rect(0, 0, 0, 0, 0);
                let l;
                let m;
                let n;
                let o;
                let p = this.q3.count;
                if (this.qf == null || this.qf.length != p) {
                    this.qf = new Array(p);
                    this.qd = new Array(p);
                    this.qe = new Array(p);
                    this.qc = new Array(p);
                }
                let q = this.qf;
                let r = this.qd;
                let s = this.qe;
                let t = this.qc;
                let u;
                for (let v = 0; v < p; v++) {
                    u = this.rl._inner[v];
                    q[v] = u.top;
                    r[v] = u.left;
                    s[v] = u.right;
                    t[v] = u.bottom;
                }
                this.qs.hm(boxArray$1(r), 0, r.length, i);
                this.qs.hm(boxArray$1(s), 0, s.length, i);
                this.qu.hm(boxArray$1(q), 0, q.length, j);
                this.qu.hm(boxArray$1(t), 0, t.length, j);
                d.cs(r, q, s, t);
                let w = this.q3;
                let x = this.cl;
                this.sm(d);
                let y = c.left;
                let z = c.right;
                let aa = c.top;
                let ab = c.bottom;
                let ac = null;
                if (this.sw.isEmpty) {
                    ac = null;
                }
                else {
                    ac = new Clipper(1, this.sw.left, this.sw.bottom, this.sw.right, this.sw.top, this.rb);
                }
                let ad = this.rk();
                if (ad) {
                    d.b9.clear();
                }
                let ae = false;
                let af = true;
                let ag = 0;
                if (this.ce != null) {
                    if (this.ce.e8()) {
                        let ah = this.ce.li(b, i);
                        ae = ah.c;
                        ag = ah.d;
                    }
                }
                let ai;
                for (let aj = 0; aj < p; aj++) {
                    n = r[aj];
                    l = q[aj];
                    m = t[aj];
                    o = s[aj];
                    k.x = Math.min(n, o);
                    k.y = Math.min(l, m);
                    k.width = Math.max(n, o) - k.x;
                    k.height = Math.max(l, m) - k.y;
                    if (k.intersectsWith(c)) {
                        if (k.x < y || k.y < aa || k.x > z || k.y > ab) {
                            ai = ac;
                        }
                        else {
                            ai = null;
                        }
                        let ak = this.rn(a, ai, w.item(aj), i, j, 0, ag);
                        if (ad) {
                            ShapeSeriesBase.si(d, aj, ak);
                        }
                        d.cf(aj, x.item(aj), k, ak);
                    }
                    else if (ae) {
                        k.x = k.x + ag;
                        if (k.intersectsWith(c)) {
                            if (k.x < y || k.y < aa || k.x > z || k.y > ab) {
                                ai = ac;
                            }
                            else {
                                ai = null;
                            }
                            let al = this.rn(a, ai, w.item(aj), i, j, ag, ag);
                            if (ad) {
                                ShapeSeriesBase.si(d, aj, al);
                            }
                            d.cf(aj, x.item(aj), k, al);
                        }
                    }
                }
                d.cq();
            }
            let am = this.rj();
            this.q0.az(this, this.rj(), runOn(this, this.qi));
            let an = false;
            let ao = this.q0.b;
            if (ao != null) {
                an = true;
            }
            let ap = a.q;
            let aq = this.eh;
            let ar = d.b7;
            d.cm((as) => {
                let at = as.dataContext != null ? as.dataContext.item : null;
                let au = as.dataContext != null ? as.dataContext.c : -1;
                d.cj(as, at, am);
                if (an) {
                    this.sf(as, aq, au, this.q3.count, ap, ar);
                }
                else {
                    if (ar) {
                        {
                            this.q0.a1(as, this.fv, ar);
                        }
                    }
                }
                {
                    this.q0.ad(as, false, false, false, false);
                }
            });
        }
        sf(a, b, c, d, e, f) {
            let g = this.bl != 1;
            this.q0.a0(this.q0.b, c, d, false);
            {
                this.q0.a1(a, this.fv, f);
            }
            let h = this.q0.ax;
            let i = null;
            let j = this.cl;
            if (g && this.ce != null) {
                i = this.ce.a7.getHighlightingInfo(this, j, h.o, h.n, false);
                h.b = i;
            }
            h.f = e;
            this.sh(h);
            this.q0.z(this, i, e, g, false);
        }
        se(a, b, c) {
            let d = this.bl != 1;
            this.q0.a0(this.q0.d, a, b, true);
            this.q0.aa(this.fv);
            let e = this.q0.aw;
            let f = null;
            let g = this.cl;
            let h = null;
            if (d && this.ce != null) {
                f = this.ce.a7.getHighlightingInfo(this, g, e.o, e.n, true);
                if (this.ce.a7.isCrossSeriesHighlight(this)) {
                    h = this.ce.a7.getHighlightingInfo(this, g, e.o, e.n, true);
                }
                e.b = f;
            }
            e.f = c;
            this.sg(e);
            this.q0.y(this, f, c, d, e.l, this.ce.a7.sumHighlightingProgress);
        }
        sh(a) {
            if (this.assigningShapeStyle != null && this.q5) {
                this.assigningShapeStyle(this, a);
            }
        }
        sg(a) {
            if (this.assigningShapeMarkerStyle != null && this.q4) {
                this.assigningShapeMarkerStyle(this, a);
            }
        }
        qi(a, b) {
            return this.qj(a, b);
        }
        qj(a, b) {
            if (b < a || a < 0 || a > this.q3.count || b < 0 || b > this.q3.count) {
                return null;
            }
            let c = new Array((b - a) + 1);
            for (let d = a; d <= b; d++) {
                let e = d;
                c[d - a] = this.cl.item(d);
            }
            return c;
        }
        static si(a, b, c) {
            let d = 0;
            let e = null;
            for (let f = 0; f < c.count; f++) {
                let g = c._inner[f];
                let h = g.b.width * g.b.height;
                if (h > d) {
                    d = h;
                    e = g;
                }
            }
            a.b9.addItem(b, e);
        }
        lk() {
            super.lk();
            if (this.qt != null) {
                this.qt.h6();
            }
            if (this.qv != null) {
                this.qv.h6();
            }
        }
        nb(a, b) {
            this.mn(false);
        }
        na(a, b) {
            this.mn(false);
        }
        k5(a, b, c, d) {
            super.k5(a, b, c, d);
            switch (a) {
                case 3:
                    if (d == this.r5) {
                        this.rl._inner[b] = this.sx(this.q3.item(b));
                    }
                    break;
                case 1:
                    for (let e = b; e < b + c; e++) {
                        this.rl.insert(e, this.sx(this.q3.item(e)));
                    }
                    break;
                case 0:
                    this.rl.v(b, c);
                    break;
                case 2:
                    for (let f = b; f < b + c; f++) {
                        this.rl._inner[f] = this.sx(this.q3.item(f));
                    }
                    break;
                case 4:
                    this.sk();
                    break;
            }
            this.mn(false);
        }
        fd(a, b, c) {
            let d = true;
            if (!super.fd(a, b, c) || (this.rf && this.q3 == null) || b.isEmpty || a.isEmpty || this.qt == null || this.qv == null || this.qt.bh == null || this.qv.bh == null || this.qt.lw == this.qt.lv || this.qv.lw == this.qv.lv || this.q3 == null || this.q3.count == 0 || this.rl == null || this.rl.count == 0 || this.rl.count != this.q3.count) {
                d = false;
            }
            return d;
        }
        get_rf() {
            return true;
        }
        get rf() {
            return this.get_rf();
        }
        l4(a) {
            super.l4(a);
            this.q1 = typeCast(ShapeSeriesViewBase.$, a);
        }
        ro(a, b, c, d, e, f, g) {
            let h = new List$1(FlattenedShape.$, 0);
            let i;
            let j = c.count;
            for (let k = 0; k < j; k++) {
                i = c._inner[k];
                let l = this.qm(a, b, i, d, e, f, g);
                if (l == null) {
                    continue;
                }
                h.add(l);
            }
            return h;
        }
        qm(a, b, c, d, e, f, g) {
            let h = this.sc(c, d, e);
            let i = h.c;
            let j = h.d;
            let k = i.length;
            let l = 1.7976931348623157E+308;
            let m = 1.7976931348623157E+308;
            let n = -1.7976931348623157E+308;
            let o = -1.7976931348623157E+308;
            let p;
            let q;
            if (f != 0) {
                for (let r = 0; r < k; r++) {
                    i[r] = i[r] + f;
                }
            }
            for (let s = 0; s < k; s++) {
                p = i[s];
                q = j[s];
                l = p < l ? p : l;
                m = q < m ? q : m;
                n = p > n ? p : n;
                o = q > o ? q : o;
            }
            let t = !(l > this.sw.right || n < this.sw.left || m > this.sw.bottom || o < this.sw.top);
            if (!t && f == 0 && g != 0) {
                if (g != 0) {
                    for (let u = 0; u < k; u++) {
                        i[u] = i[u] + g;
                    }
                }
                for (let v = 0; v < k; v++) {
                    p = i[v];
                    q = j[v];
                    l = p < l ? p : l;
                    m = q < m ? q : m;
                    n = p > n ? p : n;
                    o = q > o ? q : o;
                }
                t = !(l > this.sw.right || n < this.sw.left || m > this.sw.bottom || o < this.sw.top);
            }
            if (!t) {
                return null;
            }
            let w = b != null && (l < this.sw.left || m < this.sw.top || n > this.sw.right || o > this.sw.bottom);
            let x = new Rect(0, l, m, n - l, o - m);
            if (!a.b8(x)) {
                return null;
            }
            l = l < this.sw.left ? this.sw.left : l;
            n = n > this.sw.right ? this.sw.right : n;
            m = m < this.sw.top ? this.sw.top : m;
            o = o > this.sw.bottom ? this.sw.bottom : o;
            let y = PolySimplification.b(h, this.fx);
            let z = new DefaultFlattener().c(h.c, h.d, y, this.rp);
            let aa = z.count;
            if (w) {
                let ab = new List$1(Point_$type, 0);
                b.i = ab;
                for (let ac = 0; ac < aa; ac++) {
                    b.j(z._inner[ac]);
                }
                b.i = null;
                z = ab;
            }
            if (z == null || z.count == 0) {
                return null;
            }
            let ad = new FlattenedShape();
            ad.a = z;
            ad.b = new Rect(0, l, m, n - l, o - m);
            ad.c = x;
            return ad;
        }
        sc(a, b, c) {
            let d = this.qs;
            let e = this.qu;
            let f = a.count;
            let g = new Array(f);
            let h = new Array(f);
            for (let i = 0; i < f; i++) {
                g[i] = a._inner[i].x;
                h[i] = a._inner[i].y;
            }
            d.hm(boxArray$1(g), 0, g.length, b);
            e.hm(boxArray$1(h), 0, h.length, c);
            return new Tuple$2(Array_$type, Array_$type, g, h);
        }
        sm(a) {
            a.cx();
        }
        k2(a, b) {
            super.k2(a, b);
            let c = b;
            c.ck();
        }
        sd(a) {
            if (a != null) {
                a.cs(this);
            }
        }
        sl(a) {
            if (a != null) {
                a.bz(this);
            }
        }
        au(a, b) {
            let c = this.q1.cz(a, b);
            let d = null;
            if (c != null) {
                d = c.dataContext;
            }
            if (d != null) {
                return d;
            }
            return super.au(a, b);
        }
        rw(a) {
            return this.cl.item(a);
        }
        get_e7() {
            return true;
        }
        set_e7(a) {
            super.set_e7(a);
        }
        aq(a) {
            if (typeCast(NumericXAxis.$, a) !== null && this.rl != null) {
                let b = 1.7976931348623157E+308;
                let c = -1.7976931348623157E+308;
                for (let d of fromEnum(this.rl)) {
                    b = Math.min(b, d.left);
                    c = Math.max(c, d.right);
                }
                return new AxisRange(b, c);
            }
            if (typeCast(NumericYAxis.$, a) !== null && this.rl != null) {
                let e = 1.7976931348623157E+308;
                let f = -1.7976931348623157E+308;
                for (let g of fromEnum(this.rl)) {
                    e = Math.min(e, g.top);
                    f = Math.max(f, g.bottom);
                }
                return new AxisRange(e, f);
            }
            return null;
        }
        get_eg() {
            return true;
        }
        get_d5() {
            return true;
        }
        get q9() {
            return this.styleShape != null;
        }
        sy(a, b, c) {
            if (this.styleShape != null) {
                if (this.q1.c6 != null && c == this.q1.c6) {
                    c = new Style();
                    let d = this.q1.c6;
                    c.fill = d.fill;
                    c.opacity = d.opacity;
                    c.stroke = d.stroke;
                    c.strokeThickness = d.strokeThickness;
                }
                else {
                    if (c != null) {
                        let e = new Style();
                        e.fill = c.fill;
                        e.opacity = c.opacity;
                        e.stroke = c.stroke;
                        e.strokeThickness = c.strokeThickness;
                        c = e;
                    }
                    else {
                        c = new Style();
                    }
                }
                let f = new StyleShapeEventArgs(a, b, c);
                this.styleShape(this, f);
                return f.d();
            }
            return c;
        }
    }
    ShapeSeriesBase.$t = /*@__PURE__*/ markType(ShapeSeriesBase, 'ShapeSeriesBase', Series.$);
    ShapeSeriesBase.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ShapeSeriesBase, 'raisePropertyChanged', ['IsCustomShapeMarkerStyleAllowed:rc:sn', [0, false], 'IsCustomShapeStyleAllowed:rd:so', [0, false], 'ItemSearchMode:qz:sp', [ShapeItemSearchMode_$type, /*@__PURE__*/ enumGetBox(ShapeItemSearchMode_$type, 0)], 'ItemSearchPointsThreshold:ru:sq', [1, 10000], 'ItemSearchThreshold:rv:sr', [1, 10000], 'ShapeFilterResolution:rr:ss', [1, 2], 'ShapeMemberPath:r5:st', [2, null], 'XAxis:qt:su', [NumericXAxis.$, null], 'YAxis:qv:sv', [NumericYAxis.$, null]]);
    return ShapeSeriesBase;
})();
/**
 * @hidden
 */
export let ShapeSeriesRenderManager = /*@__PURE__*/ (() => {
    class ShapeSeriesRenderManager extends SeriesRenderManager {
        constructor() {
            super(...arguments);
            this.aw = null;
            this.ax = null;
        }
        c() {
            this.aw = new AssigningShapeMarkerStyleEventArgs();
            return this.aw;
        }
        a() {
            this.ax = new AssigningShapeStyleEventArgs();
            return this.ax;
        }
        a1(a, b, c) {
            this.ag = this.ak;
            this.ah = this.al;
            this.m = this.t;
            this.am = this.an;
            this.ao = this.ar;
            this.k = this.r;
            this.l = this.s;
            this.j = this.q;
            if (c) {
                if (a._fill != null) {
                    this.ag = a._fill;
                }
                if (a._stroke != null) {
                    this.ah = a._stroke;
                }
                if (!isNaN_(a.ad) && (a.y == null || !isNaN_(a.y.strokeThickness))) {
                    this.m = a.ad;
                }
            }
            let d = this.b;
            if (d != null) {
                d.p = this.ag;
                d.q = this.ah;
                d.t = this.m;
                d.u = this.am;
                d.v = this.ao;
                d.r = this.k;
                d.s = this.l;
                d.k = this.j;
                d.e = this.f;
                d.i = b;
                d.d = false;
            }
        }
        ay(a, b, c) {
            this.w(a, b, c);
        }
        az(a, b, c) {
            this.x(a, b, c);
        }
        a0(a, b, c, d) {
            if (b == -1) {
                a.c = false;
                a.o = 0;
                a.n = c - 1;
            }
            else {
                if (d) {
                    a.o = b;
                    a.n = b;
                }
                else {
                    a.c = false;
                    a.o = b;
                    a.n = b;
                }
            }
        }
    }
    ShapeSeriesRenderManager.$t = /*@__PURE__*/ markType(ShapeSeriesRenderManager, 'ShapeSeriesRenderManager', SeriesRenderManager.$);
    return ShapeSeriesRenderManager;
})();
/**
 * @hidden
 */
export let ShapeSeriesViewBase = /*@__PURE__*/ (() => {
    class ShapeSeriesViewBase extends SeriesView {
        constructor(a) {
            super(a);
            this.b9 = null;
            this.b3 = null;
            this.ca = new List$1(ShapeHitRegion.$, 0);
            this.ce = 0;
            this.cd = null;
            this.b6 = null;
            this.c4 = new Path();
            this.b4 = null;
            this.c5 = null;
            this.by = null;
            this.b0 = null;
            this.bz = null;
            this.bx = null;
            this.b3 = a;
            this.b6 = this.b5();
            this.cd = new List$1(Path.$, 0);
            this.b9 = new Dictionary$2(Number_$type, FlattenedShape.$, 0);
        }
        b1(a) {
            return null;
        }
        get cb() {
            return this.ca;
        }
        b5() {
            return ((() => {
                let $ret = new Pool$1(FrameworkElement.$);
                $ret.create = runOn(this, this.cy);
                $ret.activate = runOn(this, this.cn);
                $ret.disactivate = runOn(this, this.co);
                $ret.destroy = runOn(this, this.cp);
                return $ret;
            })());
        }
        b8(a) {
            return a.width >= this.b3.rs && a.height >= this.b3.rs;
        }
        static cc(a) {
            let b = new List$1(PointCollection.$, 0);
            let c;
            let d = a.count;
            for (let e = 0; e < d; e++) {
                c = a._inner[e];
                let f = new PointCollection(1, c.a);
                b.add(f);
            }
            return b;
        }
        get b7() {
            return this.c5 != null || this.b4 != null || this.b3.q9;
        }
        cf(a, b, c, d) {
            if (d != null && d.count > 0) {
                let e = ShapeSeriesViewBase.cc(d);
                c.intersect(this.bu);
                if (!this.b8(c)) {
                }
                else {
                    let f = this.c2(a, e);
                    if (f != null) {
                        let g = this.c1(this.ce, b);
                        for (let h = 0; h < d.count; h++) {
                            let i = new ShapeHitRegion();
                            i.d = d._inner[h].b;
                            i.a = d._inner[h].a;
                            i.b = a;
                            i.c = g;
                            this.ca.add(i);
                        }
                        this.ch(g, f);
                        this.ce = this.ce + 1;
                    }
                }
            }
        }
        c1(a, b) {
            let c = this.b6.item(this.ce);
            if (c.dataContext != null) {
                c.dataContext.item = b;
                c.dataContext.c = a;
            }
            return c;
        }
        static ci(a, b, c) {
            if (b._fill == null) {
                b._fill = a.e.o5;
            }
            if (b._stroke == null) {
                b._stroke = a.e.o8;
            }
            if (b.y == null) {
                b.ad = a.e.fy;
            }
        }
        cm(a) {
            for (let b = 0; b < this.b6.a.count; b++) {
                let c = this.b6.a._inner[b];
                a(c);
            }
        }
        cj(a, b, c) {
            if (a == null) {
                return;
            }
            this.cl(a, c);
            let d = false;
            if (this.b4 != null) {
                let e = this.b4.selectStyle(b, a);
                if (e != null) {
                    d = true;
                }
                if (a.y != e) {
                    a.y = e;
                    this.k.j(a, a.y);
                }
            }
            if (!d) {
                if (a.y != this.c5) {
                    a.y = this.c5;
                    this.k.j(a, a.y);
                }
            }
            let f = this.b3.sy(b, a, a.y);
            if (a.y != f) {
                a.y = f;
                this.k.j(a, a.y);
            }
        }
        cl(a, b) {
        }
        cg(a, b) {
            let c = truncate(Math.floor(a.left));
            let d = truncate(Math.ceil(a.right));
            let e = truncate(Math.floor(a.top));
            let f = truncate(Math.ceil(a.bottom));
            for (let g = c; g < d; g++) {
                for (let h = e; h < f; h++) {
                    this.cu(g, h, b);
                }
            }
        }
        cu(a, b, c) {
        }
        cr() {
            this.ce = 0;
        }
        cq() {
            this.b6.count = this.ce;
            this.aq();
        }
        ct(a, b) {
        }
        ck() {
            this.b6.count = 0;
            this.aq();
        }
        cy() {
            let a = this.b3;
            let b = ((() => {
                let $ret = new Path();
                $ret.dataContext = ((() => {
                    let $ret = new DataContext();
                    $ret.series = a;
                    return $ret;
                })());
                return $ret;
            })());
            this.cd.add(b);
            return b;
        }
        cn(a) {
            a._visibility = 0;
        }
        co(a) {
            a.dataContext.item = null;
            a._visibility = 1;
        }
        cp(a) {
            this.cd.remove(a);
        }
        c3(a, b, c) {
            if (b == null) {
                return null;
            }
            let d = new PathGeometry();
            let e;
            let f = b.count;
            for (let g = 0; g < f; g++) {
                e = b._inner[g];
                if (e.count < 1) {
                    continue;
                }
                let h = new PolyLineSegment();
                h._points = e;
                let i = new PathFigure();
                i._isFilled = c;
                i._isClosed = c;
                i._startPoint = e._inner[0];
                i._segments.add(h);
                d.c.add(i);
            }
            return d;
        }
        ac(a) {
            return this.cd._inner[a];
        }
        ab(a) {
            let b = this.cd._inner[a];
            this.c4._visibility = b._visibility;
            this.c4.an = b.an;
            let c = this.bp(a);
            this.c4._fill = c;
            this.c4._stroke = c;
            this.c4.ad = this.e.fy + 3;
            return this.c4;
        }
        a6(a, b) {
            super.a6(a, b);
            for (let c = 0; c < this.cd.count; c++) {
                let d = this.aa(c, b);
                if (d._visibility != 1) {
                    a.t(d);
                }
            }
        }
        get c6() {
            return this.c5;
        }
        cw(a) {
            this.b4 = a;
        }
        cv(a) {
            this.c5 = a;
        }
        cz(a, b) {
            return this.c0(a, b, false);
        }
        c0(a, b, c) {
            let d = this.b2(a, b, c);
            if (d == null) {
                return null;
            }
            return d.c;
        }
        b2(a, b, c) {
            if (this.ca.count == 0) {
                return null;
            }
            let d = a.x;
            let e = a.y;
            let f = this.ca.count;
            let g = this.ca;
            let h = null;
            for (let i = 0; i < f; i++) {
                h = g._inner[i];
                if (h.a == null || h.a.count == 0) {
                    continue;
                }
                if (d >= h.d.left && d <= h.d.right && e >= h.d.top && e <= h.d.bottom) {
                    if (c) {
                        let j = this.b3.fy / 2 + this.b3.gc(b);
                        if (GeometryUtil.b(a, h.a._inner[0], h.a, j)) {
                            return h;
                        }
                    }
                    else {
                        if (PolygonUtil.b(h.a, a)) {
                            return h;
                        }
                    }
                }
            }
            return null;
        }
        cs(a, b, c, d) {
            this.by = a;
            this.b0 = b;
            this.bz = c;
            this.bx = d;
            this.ca.clear();
        }
        cx() {
            let a = this.bu;
            let b = ((() => {
                let $ret = new Path();
                $ret.y = this.c5;
                return $ret;
            })());
            b.ad = 1;
            if (this.k != null) {
                this.k.j(b, b.y);
            }
            this.b3.sw = RectUtil.r(a, b.ad);
        }
        al(a) {
            super.al(a);
            if (this.b6.a == null) {
                return;
            }
            for (let b = 0; b < this.b6.a.count; b++) {
                let c = typeCast(Path.$, this.b6.a._inner[b]);
                if (c._visibility != 1) {
                    this.e.a9.exportPathData(a, c, "shape" + b, ["Main "]);
                }
            }
        }
    }
    ShapeSeriesViewBase.$t = /*@__PURE__*/ markType(ShapeSeriesViewBase, 'ShapeSeriesViewBase', SeriesView.$);
    return ShapeSeriesViewBase;
})();
