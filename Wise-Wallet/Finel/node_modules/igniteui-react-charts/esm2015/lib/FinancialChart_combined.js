/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, fromEnum, typeCast, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { BrushUtil } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { IZoomableCategoryAxis_$type } from "./IZoomableCategoryAxis";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-react-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-react-core";
import { timeSpanFromDays } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-react-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
export let FinancialChart = /*@__PURE__*/ (() => {
    class FinancialChart extends XYChart {
        sz(a, b, c) {
            super.sz(a, b, c);
            switch (a) {
                case "ToolbarTemplate":
                case "RangeSelectorTemplate":
                    this.adz = new FinancialChartToolbar(this, this.aig);
                    break;
                case "Toolbar":
                    let d = b;
                    if (d != null) {
                        d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.ala));
                        d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.ald));
                        d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.ale));
                        d.l(null);
                    }
                    if (this.adz != null) {
                        this.adz.ac = this.ad6;
                        this.adz.ai = this.dq;
                        this.adz.y = this.ad1;
                        this.adz.al = this.afz;
                        if (this.ahn != null) {
                            this.adz.l(this.ahn);
                        }
                        let e = this.adz;
                        e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.ala));
                        ;
                        let f = this.adz;
                        f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.ald));
                        let g = this.adz;
                        g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.ale));
                    }
                    break;
                case "ChartType":
                    if (this.adz != null) {
                        this.adz.y = this.ad1;
                    }
                    break;
                case "VolumeType":
                    if (this.adz != null) {
                        this.adz.ac = this.ad6;
                    }
                    break;
                case "TrendLineType":
                    if (this.adz != null) {
                        this.adz.ai = this.dq;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.adz == null) {
                        break;
                    }
                    this.adz.al = this.afz;
                    this.setGridRows();
                    break;
            }
        }
        ale(a, b) {
            this.ad6 = this.adz.ac;
        }
        ald(a, b) {
            this.dq = this.adz.ai;
        }
        ala(a, b) {
            this.ad1 = this.adz.y;
        }
        aln() {
            this.aes = new IndicatorPane();
            this.aej = TypeRegistrar.create("FinancialLegend");
        }
        provideGrid(a) {
            this.ahq = a;
            this.al8();
            this.setGridRows();
            if (this.adz != null) {
                this.adz.bg(a);
            }
        }
        onDocumentClick(a) {
            if (this.adz != null) {
                this.adz.bl(a);
            }
        }
        getContext() {
            let a = this.adz.v();
            let b = new FinancialChartContext();
            b.vm = new FinancialChartViewModel();
            b.vm.toolbar = a;
            b.container = this.j8;
            b.toolbarContainer = this.ahn;
            b.legendContainer = this.ahm;
            b.indicatorsContainer = this.ahl;
            b.volumeContainer = this.aho;
            b.zoomContainer = this.ahp;
            return b;
        }
        provideContainer(a) {
            let b = a;
            if (b != null) {
                let c = "financialChartMainGrid";
                let d = b.createElement("div");
                d.setStyleProperty("width", "100%");
                d.setStyleProperty("height", "100%");
                if (this.adz == null) {
                    this.adz = new FinancialChartToolbar(this, this.aig);
                }
                this.adz.w.isIndicatorMenuVisible = this.afq && this.afr;
                this.ahn = b.getSubRenderer(d);
                this.adz.l(this.ahn);
                let e = b.createElement("div");
                e.setStyleProperty("width", "100%");
                e.setStyleProperty("height", "100%");
                let f = b.createElement("div");
                f.setStyleProperty("width", "100%");
                f.setStyleProperty("height", "100%");
                this.ahm = b.getSubRenderer(f);
                let g = b.createElement("div");
                g.setStyleProperty("width", "100%");
                g.setStyleProperty("height", "100%");
                this.ahl = b.getSubRenderer(g);
                let h = b.createElement("div");
                h.setStyleProperty("width", "100%");
                h.setStyleProperty("height", "100%");
                this.aho = b.getSubRenderer(h);
                let i = b.createElement("div");
                i.setStyleProperty("width", "100%");
                i.setStyleProperty("height", "100%");
                this.ahp = b.getSubRenderer(i);
                a = b.getSubRenderer(e);
            }
            else {
                this.ahn = null;
                if (this.adz != null) {
                    this.adz.l(null);
                }
                if (this.afh != null) {
                    this.afh.provideContainer(null);
                    this.afh = null;
                }
                if (this.aej != null) {
                    this.aej.provideContainer(null);
                }
            }
            super.provideContainer(a);
            if (b != null) {
                if (this.volumeChart != null) {
                    this.volumeChart.provideContainer(this.aho);
                }
                if (this.aes != null) {
                    this.aes.h(this.ahl);
                }
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.provideContainer(this.ahp);
                    if (a != null) {
                        this.aku();
                    }
                    else {
                        this.afh = null;
                    }
                }
                if (this.aej != null) {
                    this.aej.provideContainer(this.ahm);
                }
                this.setGridRows();
            }
        }
        aly(a, b, c) {
            if (a != null) {
                a.provideContainer(null);
            }
            if (b != null) {
                b.provideContainer(c);
            }
            this.setGridRows();
        }
        amc(a, b) {
            this.aly(a, b, this.ahp);
            if (b == null) {
                return;
            }
            this.aku();
        }
        aku() {
            if (this.ahp == null) {
                return;
            }
            if (this.afh != null) {
                this.afh.provideContainer(null);
            }
            this.afh = TypeRegistrar.create("ZoomSlider");
            this.afh.provideContainer(this.ahp);
            let a = this.afh;
            a.windowRectChanged = delegateCombine(a.windowRectChanged, (a, b) => {
                if (this.dataChart != null) {
                    this.dataChart.tq = new Rect(0, this.afh.windowRect.left, this.dataChart.ta.top, this.afh.windowRect.width, this.dataChart.ta.height);
                }
            });
            this.akv();
        }
        ama(a, b) {
            this.aly(a, b, this.aho);
        }
        setGridRows() {
            if (this.ahq == null) {
                return;
            }
            let a = new Array(6);
            a[0] = (this.afz ? this.ag7 : 0) + "px";
            a[1] = this.afv ? "min-content" : "0px";
            a[2] = "auto";
            a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
            a[4] = this.volumeChart == null ? "0px" : "100px";
            a[5] = this.zoomSliderChart == null ? "0px" : "100px";
            if (this.afh != null) {
                if (a[5] == "0px") {
                    this.afh.hide();
                }
                else {
                    this.afh.show();
                }
            }
            this.ahq.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin(" ", ...a), "auto", "1fr"));
            this.ahq.setStyleProperty("grid-template-rows", stringJoin(" ", ...a));
            if (this.j8 == null) {
                return;
            }
            if (this.dataChart != null) {
                this.dataChart.notifyContainerResized();
            }
            if (this.aes != null) {
                this.aes.f();
            }
            if (this.volumeChart != null) {
                this.volumeChart.notifyContainerResized();
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.notifyContainerResized();
            }
            if (this.afh != null) {
                this.afh.notifySizeChanged();
            }
        }
        r9() {
            super.r9();
            this.we = 1;
            this.abt = 0;
            this.yb = 0;
            this.acn = null;
            this.acg = AxisDefaults.g;
            this.xv = AxisDefaults.e;
            this.xu = AxisDefaults.f;
            this.ach = AxisDefaults.j;
            this.acd = null;
            this.ame = AxisDefaults.h;
            this.ahk = AxisDefaults.b;
            this.ft = true;
            this.fm = true;
            this.fn = false;
            this.a9 = 0;
            this.h9 = Defaults.j;
            this.uo = Defaults.ae;
            this.uj = Defaults.af;
            this.uk = Defaults.ag;
            this.iv = NaN;
            this.im = 40;
            this.f2 = true;
            this.f9 = false;
            if (this.dataChart != null) {
                let a = this.dataChart.cu.j.e();
                this.ada = a.d;
                this.adb = a.e;
                this.ac9 = a.d;
                this.ame = this.dataChart.xv;
            }
            let b = new BrushCollection();
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8BDC5C";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#8961A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#6DB1FF";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#82E9D9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#EA3C63";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#735656";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#F8CE4F";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#A8A8B7";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#E051A9";
                return $ret;
            })()));
            b.add(((() => {
                let $ret = new Brush();
                $ret.fill = "#FF903B";
                return $ret;
            })()));
            let c = new BrushCollection();
            for (let d of fromEnum(b)) {
                c.add(BrushUtil.m(d, 0.3));
            }
            this.adc = c;
            this.add = b;
        }
        alu() {
            if (this.aes != null) {
                this.aes.b = null;
                this.aes.b = this.indicatorCharts;
            }
            this.setGridRows();
        }
        alv() {
            this.setGridRows();
        }
        al4() {
            this.alu();
        }
        akt() {
            if (this.afh == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
                return;
            }
            let a = this.j8.rootWrapper.width();
            let b = this.dataChart.tp.left + this.dataChart.tp.width;
            let c = this.dataChart.tp.left;
            let d = a - b;
            this.afh.startInset = c - this.afh.trackStartInset;
            this.afh.endInset = d - this.afh.trackEndInset;
            if (this.afh.endInset < 0) {
                let e = this.afh.endInset;
                this.afh.endInset = 0;
                this.dataChart.g2 += (e * -1);
            }
            if (this.afh.startInset < 0) {
                let f = this.afh.startInset;
                this.afh.startInset = 0;
                this.dataChart.gx += (f * -1);
            }
            this.zoomSliderChart.gx = c;
            this.zoomSliderChart.g2 = d;
            this.zoomSliderChart.gk = this.afh.barExtent;
        }
        alk() {
            this.akt();
        }
        r6(a) {
            super.r6(a);
            if (a != null) {
                a.gj = 0;
            }
        }
        amf(a) {
            return a.s3();
        }
        ami() {
            return this.ahm == null ? null : this.amh(this.ahm.rootWrapper);
        }
        amg(a) {
            if (a == null || a.d == null) {
                return null;
            }
            return this.amh(a.d.rootWrapper);
        }
        amh(a) {
            if (a == null) {
                return null;
            }
            let b = a.getOffset();
            return new Rect(0, b.left, b.top, a.width(), a.height());
        }
        ag2() {
            if (this.ahq == null) {
                return NaN;
            }
            let a = this.ahq.getOffset();
            return this.ahq.width() + (a == null ? 0 : a.left);
        }
        sh(source_, a, b) {
            super.sh(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.mh(source_, a, b);
            }
        }
        si(source_, a, b) {
            super.si(source_, a, b);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.mi(source_, a, b);
            }
        }
        sg(source_) {
            super.sg(source_);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.ma(source_);
            }
        }
        sk(source_, a, b, c) {
            super.sk(source_, a, b, c);
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.mj(source_, a, b, c);
            }
        }
        sc(a, b) {
            super.sc(a, b);
            if (this.afw(a)) {
                a.toolTip = null;
            }
        }
        get adz() {
            return this.ady;
        }
        set adz(a) {
            let b = this.adz;
            if (a != b) {
                this.ady = a;
                this.sv("Toolbar", b, this.adz);
            }
        }
        get aif() {
            return this.ah8;
        }
        set aif(a) {
            let b = this.aif;
            if (a != b) {
                this.ah8 = a;
                this.sv("RangeSelectorTemplate", b, this.aif);
            }
        }
        get aig() {
            return this.ah9;
        }
        set aig(a) {
            let b = this.aig;
            if (a != b) {
                this.ah9 = a;
                this.sv("ToolbarTemplate", b, this.aig);
            }
        }
        get aic() {
            return this.ah5;
        }
        set aic(a) {
            let b = this.aic;
            if (a != b) {
                this.ah5 = a;
                this.sv("ChartTypePickerTemplate", b, this.aic);
            }
        }
        get aih() {
            return this.aia;
        }
        set aih(a) {
            let b = this.aih;
            if (a != b) {
                this.aia = a;
                this.sv("TrendLineTypePickerTemplate", b, this.aih);
            }
        }
        get aii() {
            return this.aib;
        }
        set aii(a) {
            let b = this.aii;
            if (a != b) {
                this.aib = a;
                this.sv("VolumeTypePickerTemplate", b, this.aii);
            }
        }
        get aid() {
            return this.ah6;
        }
        set aid(a) {
            let b = this.aid;
            if (a != b) {
                this.ah6 = a;
                this.sv("IndicatorMenuTemplate", b, this.aid);
            }
        }
        get aie() {
            return this.ah7;
        }
        set aie(a) {
            let b = this.aie;
            if (a != b) {
                this.ah7 = a;
                this.sv("OverlayPickerTemplate", b, this.aie);
            }
        }
        get afh() {
            return this.afg;
        }
        set afh(a) {
            let b = this.afh;
            if (a != b) {
                this.afg = a;
                this.sv("ZoomSlider", b, this.afh);
            }
        }
        get_im() {
            return super.get_im();
        }
        set_im(a) {
            super.set_im(a);
        }
        get_f2() {
            return super.get_f2();
        }
        set_f2(a) {
            super.set_f2(a);
        }
        get ag7() {
            return this.agq;
        }
        set ag7(a) {
            let b = this.ag7;
            if (a != b) {
                this.agq = a;
                this.sv("ToolbarHeight", b, this.ag7);
            }
        }
        constructor() {
            super();
            this.aes = null;
            this.ahq = null;
            this.aho = null;
            this.ahl = null;
            this.ahn = null;
            this.ahp = null;
            this.ahm = null;
            this.ady = null;
            this.ah8 = null;
            this.ah9 = null;
            this.ah5 = null;
            this.aia = null;
            this.aib = null;
            this.ah6 = null;
            this.ah7 = null;
            this.afg = null;
            this.agq = 40;
            this.aem = null;
            this.aek = null;
            this.aeo = null;
            this.aet = null;
            this.aij = null;
            this.afc = null;
            this.af2 = false;
            this.af1 = false;
            this.af9 = false;
            this.afo = false;
            this.ahw = 10;
            this.agx = NaN;
            this.agz = NaN;
            this.agy = NaN;
            this.ag0 = 0;
            this.ad4 = 0;
            this.ad7 = 0;
            this.ags = 3;
            this.agv = NaN;
            this.agt = NaN;
            this.agu = NaN;
            this.agw = NaN;
            this.ad9 = 0;
            this.afj = true;
            this.ad0 = 0;
            this.afk = false;
            this.aee = null;
            this.aeg = null;
            this.agb = null;
            this.afm = true;
            this.afl = false;
            this.afn = false;
            this.afd = null;
            this.aeb = 1;
            this.ac2 = null;
            this.ac3 = null;
            this.ac4 = null;
            this.ac5 = null;
            this.ac7 = null;
            this.ac6 = null;
            this.ac1 = null;
            this.ac0 = null;
            this.agr = 1;
            this.agp = 1;
            this.ago = 2;
            this.agn = 1;
            this.aeq = null;
            this.ahs = -2147483648;
            this.agm = 2;
            this.ahv = 3;
            this.aht = 10;
            this.ahr = 30;
            this.ahu = 9;
            this.adv = null;
            this.adw = null;
            this.adr = null;
            this.applyCustomIndicators = null;
            this.amd = null;
            this.ag1 = 1;
            this.afi = false;
            this.aei = null;
            this.agj = dateMinValue();
            this.agi = dateMaxValue();
            this.agg = null;
            this.rr();
            this.agg = new ObservableCollection$1(Base.$, 0);
            if (this.xAxisBreaks != null) {
                let a = this.xAxisBreaks;
                a.collectionChanged = delegateCombine(a.collectionChanged, (a, b) => this.al2());
            }
            this.aln();
        }
        v3() {
            return this.xAxis;
        }
        v4() {
            return this.yAxis;
        }
        onAttachedToUI() {
            super.onAttachedToUI();
            if (this.afh != null) {
                this.afh.onAttachedToUI();
            }
        }
        onDetachedFromUI() {
            super.onDetachedFromUI();
            if (this.afh != null) {
                this.afh.onDetachedFromUI();
            }
        }
        bc(a) {
            return 20;
        }
        get_gr() {
            return ((() => {
                let $ret = new List$1(DataSeriesType_$type, 0);
                $ret.add(20);
                return $ret;
            })());
        }
        get gr() {
            return this.get_gr();
        }
        get_gq() {
            return ((() => {
                let $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
                $ret.add(new SimpleFinancialPriceSeriesRule());
                $ret.add(new SubCollectionsRule());
                return $ret;
            })());
        }
        get gq() {
            return this.get_gq();
        }
        adl(a) {
            return this.adm(a);
        }
        aez(a) {
            return this.ae0(a);
        }
        adk(a) {
            let b = this.adl(0);
            b.name = a;
            return b;
        }
        rn() {
            this.xAxis = this.adk("xAxis");
            this.yAxis = this.aez(0);
            this.yAxis.name = "yAxis";
            this.volumeAxis = this.aez(0);
            this.volumeAxis.name = "volumeAxis";
            this.volumeXAxis = this.adk("volumeXAxis");
            this.agd = new List$1(NumericYAxis.$, 0);
            this.agf = new List$1(CategoryAxisBase.$, 0);
            this.indicatorAxis = this.aez(0);
            this.indicatorAxis.name = "indicatorAxis";
            this.indicatorXAxis = this.adk("indicatorXAxis_0");
            this.agd.add(this.indicatorAxis);
            this.agf.add(this.indicatorXAxis);
            if (this.xAxis.ay == null) {
                this.xAxis.ay = new AxisLabelSettings();
            }
            if (this.yAxis.ay == null) {
                this.yAxis.ay = new AxisLabelSettings();
            }
            if (this.volumeAxis.ay == null) {
                this.volumeAxis.ay = new AxisLabelSettings();
            }
            if (this.volumeXAxis.ay == null) {
                this.volumeAxis.ay = new AxisLabelSettings();
            }
            if (this.indicatorAxis.ay == null) {
                this.indicatorAxis.ay = new AxisLabelSettings();
            }
            if (this.indicatorXAxis.ay == null) {
                this.indicatorXAxis.ay = new AxisLabelSettings();
            }
            this.zoomSliderAxis = this.aez(0);
            this.zoomSliderAxis.name = "zoomSliderAxis";
            this.zoomSliderXAxis = this.adk("zoomSliderXAxis");
            if (this.zoomSliderAxis.ay == null) {
                this.zoomSliderAxis.ay = new AxisLabelSettings();
            }
            if (this.zoomSliderXAxis.ay == null) {
                this.zoomSliderXAxis.ay = new AxisLabelSettings();
            }
        }
        rj(a, b) {
            let c = typeCast(MarkerSeries.$, a);
            if (c != null) {
                c.ql = this.cr(a, b);
            }
        }
        cq(a) {
            if (a != null) {
                return 1;
            }
            return super.cq(a);
        }
        tf(a) {
            if (a.suggestedSecondaryAxis == 2) {
                this.yAxis.lh = true;
                this.yAxis.l8 = 10;
            }
        }
        ti() {
            this.yAxis.lh = this.af6;
            this.yAxis.l8 = this.ah4;
        }
        ad3(a) {
            let b;
            if (this.ad1 == 0) {
                if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                    b = 4;
                }
                else {
                    b = 2;
                }
            }
            else {
                b = this.ad1;
            }
            b = this.ad2(b);
            return b;
        }
        ad2(a) {
            if ((a == 1 || a == 2)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        aec(a) {
            if ((a == 2 || a == 3)) {
                if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                    return a;
                }
                a = 5;
            }
            if (a == 5) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 6;
            }
            if (a == 6) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 4;
            }
            if (a == 4) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        ad5(a) {
            if (a == 2) {
                if (TypeRegistrar.isRegistered("LineSeries")) {
                    return a;
                }
                a = 3;
            }
            if (a == 3) {
                if (TypeRegistrar.isRegistered("AreaSeries")) {
                    return a;
                }
                a = 1;
            }
            if (a == 1) {
                if (TypeRegistrar.isRegistered("ColumnSeries")) {
                    return a;
                }
            }
            return a;
        }
        air(a) {
            let b = a.getMemberPathFor(14);
            if (stringIsNullOrEmpty(b)) {
                b = a.getMemberPathFor(11);
            }
            return b;
        }
        adm(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createXAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("TimeXAxis")) {
                            a = TypeRegistrar.create("TimeXAxis");
                        }
                        else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                            a = TypeRegistrar.create("OrdinalTimeXAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        ae0(axisType_) {
            if ((this.externalObject)) {
                return (this.externalObject.createYAxis(axisType_).i);
            }
            else {
                let a;
                switch (axisType_) {
                    case 0:
                        if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                    case 1:
                        if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                            a = TypeRegistrar.create("PercentChangeYAxis");
                        }
                        else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                            a = TypeRegistrar.create("NumericYAxis");
                        }
                        else {
                            throw new BaseError(1, "no valid axes loaded");
                        }
                        return a;
                }
                return null;
            }
        }
        ae6() {
            return this.c3(1);
        }
        ae7() {
            return this.c3(0);
        }
        ae5() {
            return this.c3(2);
        }
        ae8() {
            return this.c3(20);
        }
        get afp() {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        }
        get aen() {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        }
        get afs() {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        }
        get ael() {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get afq() {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        }
        get aep() {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        }
        get afr() {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        }
        get aeu() {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        }
        c1(a, b) {
            let c = this.air(a);
            switch (this.ad3(a)) {
                case 3:
                    let d = this.ae6();
                    this.aen.setValueMemberPath(d, c);
                    this.aen.setXAxis(d, this.xAxis);
                    this.aen.setYAxis(d, this.yAxis);
                    this.aen.setCategoryMode(d, 1);
                    return d;
                case 4:
                    let e = this.ae7();
                    this.aen.setValueMemberPath(e, c);
                    this.aen.setXAxis(e, this.xAxis);
                    this.aen.setYAxis(e, this.yAxis);
                    this.aen.setCategoryMode(e, 1);
                    return e;
                default:
                case 1:
                case 2:
                    let f = this.ae8();
                    this.ael.setOpenMemberPath(f, a.getMemberPathFor(11));
                    this.ael.setHighMemberPath(f, a.getMemberPathFor(12));
                    this.ael.setLowMemberPath(f, a.getMemberPathFor(13));
                    this.ael.setCloseMemberPath(f, a.getMemberPathFor(14));
                    this.ael.setVolumeMemberPath(f, a.getMemberPathFor(15));
                    this.ael.setXAxis(f, this.xAxis);
                    this.ael.setYAxis(f, this.yAxis);
                    this.ael.setDisplayType(f, this.ad1 == 1 ? 1 : 0);
                    this.ael.setCategoryMode(f, 1);
                    return f;
            }
        }
        th() {
            super.th();
            this.ali(this.xAxis);
            this.al6(false);
            if (this.ad6 != 0 && this.volumeChart != null) {
                this.alp();
            }
            this.ali(this.volumeXAxis);
            this.ali(this.indicatorXAxis);
            this.al3();
            this.al5();
            if (this.aed != 0) {
                this.alq();
                this.ali(this.zoomSliderXAxis);
            }
        }
        abf(a, b) {
            super.abf(a, b);
            a(this.volumeXAxis);
            if (this.agf != null) {
                for (let c of fromEnum(this.agf)) {
                    a(c);
                }
            }
            let d = true;
            switch (b) {
                case "XAxisMajorStroke":
                case "XAxisMajorStrokeThickness":
                    d = false;
                    break;
            }
            if (d) {
                a(this.zoomSliderXAxis);
            }
        }
        abk(a, b) {
            super.abk(a, b);
            if (b) {
                a(this.volumeAxis);
                if (this.agd != null) {
                    for (let c of fromEnum(this.agd)) {
                        a(c);
                    }
                }
                a(this.zoomSliderAxis);
            }
        }
        alm(a) {
            let b = typeCast(IZoomableCategoryAxis_$type, this.xAxis);
            if (b != null) {
                a(b);
            }
        }
        abi(a) {
            super.abi(a);
            this.aa9(this.volumeXAxis, a);
            this.aa9(this.indicatorXAxis, a);
            this.aa9(this.zoomSliderXAxis, a);
        }
        abn(a) {
            super.abn(a);
            this.aa9(this.volumeAxis, a);
            this.aa9(this.indicatorAxis, a);
            this.aa9(this.zoomSliderAxis, a);
        }
        abl(a) {
            super.abl(a);
            this.aa8(this.volumeAxis, a);
            this.aa8(this.indicatorAxis, a);
            this.aa8(this.zoomSliderAxis, a);
        }
        abg(a) {
            super.abg(a);
            this.aa8(this.volumeXAxis, a);
            this.aa8(this.indicatorXAxis, a);
            this.aa8(this.zoomSliderXAxis, a);
        }
        r5(a) {
            super.r5(a);
            if (a == null) {
                return;
            }
            if (a == this.zoomSliderChart) {
                a.ul = a.uo = false;
                a.legend = null;
                if (this.dataChart != null) {
                    a.ag = this.dataChart.ag;
                    a.aj = this.dataChart.aj;
                }
            }
            else {
                SyncManager.d(a, ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = this.ajm();
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })()));
                SyncManager.c(a);
            }
            a.ci = 2;
        }
        ajm() {
            if (this.aij == null) {
                FinancialChart.ah3++;
                this.aij = FinancialChart.ah3.toString();
            }
            return this.aij;
        }
        ak4(a, b) {
            this.akq();
            this.alk();
        }
        akq() {
            if (this.yAxis.b7()) {
                return;
            }
            let a = this.yAxis.av.bd;
            if (this.ad6 != 0) {
                a = Math.max(a, this.volumeAxis.av.bd);
            }
            for (let b of fromEnum(this.agd)) {
                a = Math.max(a, b.av.bd);
            }
            this.akr(a);
        }
        akr(a) {
            if (this.yAxis.b7()) {
                return;
            }
            this.yAxis.er = this.volumeAxis.er = a;
            for (let b of fromEnum(this.agd)) {
                b.er = a;
            }
            this.zoomSliderAxis.er = this.yAxis.er;
        }
        akw(a) {
            if (this.indicatorCharts == null) {
                return;
            }
            for (let b = 0; b < this.indicatorCharts.count; b++) {
                let c = this.indicatorCharts._inner[b];
                for (let d = 0; d < c.series.count; d++) {
                    let e = c.series._inner[d];
                    if (!(this.afu(e))) {
                        continue;
                    }
                    a(c.series._inner[d], b);
                }
            }
        }
        akz(a) {
            if (this.volumeChart == null) {
                return;
            }
            for (let b = 0; b < this.volumeChart.series.count; b++) {
                let c = this.volumeChart.series._inner[b];
                if (c.dd) {
                    continue;
                }
                a(this.volumeChart.series._inner[b], b);
            }
        }
        akx(a) {
            if (this.dataChart == null) {
                return;
            }
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (!this.afw(c)) {
                    continue;
                }
                a(c, b);
            }
        }
        aky(a, b) {
            if (this.dataChart == null) {
                return;
            }
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.afw(d)) {
                    continue;
                }
                let e = this.ahx(d, c);
                a(d, e);
            }
            if (b) {
                this.ak0(a);
            }
        }
        ak0(a) {
            if (this.zoomSliderChart == null) {
                return;
            }
            for (let b = 0; b < this.zoomSliderChart.series.count; b++) {
                let c = this.zoomSliderChart.series._inner[b];
                if (c.dd) {
                    continue;
                }
                a(this.zoomSliderChart.series._inner[b], b);
            }
        }
        ahx(a, b) {
            if (a.cc != this.dataChart) {
                return b;
            }
            let c = this.bd == null || this.bd.dataSeries == null ? 0 : this.bd.dataSeries.count;
            let d = this.aeh == null ? 0 : this.aeh.count;
            return b - (c * d);
        }
        rv(a) {
            super.rv(a);
            this.akz(a);
            this.akw(a);
            this.ak0(a);
        }
        get volumeChart() {
            return this.afc;
        }
        set volumeChart(a) {
            let b = this.volumeChart;
            if (a != b) {
                this.afc = a;
                this.sv("VolumeChart", b, this.volumeChart);
            }
        }
        alp() {
            if (this.dataChart == null) {
                return;
            }
            this.volumeChart.series.clear();
            let a = new List$1(Series.$, 0);
            let b = -1;
            for (let c = 0; c < this.dataChart.series.count; c++) {
                let d = this.dataChart.series._inner[c];
                if (this.afw(d) || d.dd) {
                    continue;
                }
                b++;
                let e;
                let f = this.ad6;
                f = this.ad5(f);
                switch (f) {
                    case 2:
                        e = this.ae7();
                        break;
                    case 3:
                        e = this.ae5();
                        break;
                    default:
                    case 1:
                        e = this.ae6();
                        break;
                }
                this.aen.setCategoryMode(e, 1);
                e.name = "volumeSeries_" + b;
                e.itemsSource = d.itemsSource;
                this.aen.setXAxis(e, this.volumeXAxis);
                this.aen.setYAxis(e, this.volumeAxis);
                this.aen.setValueMemberPath(e, this.bd != null && this.bd.dataSeries != null && this.bd.dataSeries.count > b ? this.bd.dataSeries._inner[b].getMemberPathFor(15) : null);
                e.title = d.title + " Volume";
                e.o9 = ArrayExtension.getModulus$1(Brush.$, this.ade, b);
                e.pe = ArrayExtension.getModulus$1(Brush.$, this.adf, b);
                e.g4 = this.ag8;
                a.add(e);
            }
            let g = this.gn("volume", false);
            if (g != null) {
                a.o(g);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.volumeChart.series.add(i);
                this.sa(i, h);
            }
        }
        aft(a) {
            if (!this.afp) {
                return false;
            }
            return this.aen.matchesType(a);
        }
        afx(a) {
            if (!this.afs) {
                return false;
            }
            return this.ael.matchesType(a);
        }
        afu(a) {
            if (!this.afq) {
                return false;
            }
            return this.aep.matchesType(a);
        }
        afw(a) {
            if (!this.afr) {
                return false;
            }
            return this.aeu.matchesType(a);
        }
        alo() {
            if (this.dataChart == null) {
                return;
            }
            let a = 0;
            let b = this.aef == null ? 0 : this.aef.count;
            let c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let d = b + c;
            for (let e = 0; e < d; e++) {
                let f = new List$1(Series.$, 0);
                let g = this.indicatorCharts._inner[e];
                let h = e >= b;
                let i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.aef._inner[e]);
                let j = -1;
                for (let k = 0; k < this.dataChart.series.count; k++) {
                    let l = this.dataChart.series._inner[k];
                    if (this.afw(l) || l.dd) {
                        continue;
                    }
                    j++;
                    let m;
                    if (h) {
                        let n = this.ae9("Custom");
                        this.aep.handleCustomIndicatorEvent(n, runOn(this, this.ak2));
                        m = n;
                    }
                    else {
                        m = this.afb(this.aef._inner[e]);
                    }
                    if (m == null) {
                        continue;
                    }
                    m.name = "indicator_" + a++;
                    this.aep.setXAxis(m, this.agf._inner[e]);
                    this.aep.setYAxis(m, this.agd._inner[e]);
                    m.itemsSource = l.itemsSource;
                    this.aep.setOpenMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(11));
                    this.aep.setHighMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(12));
                    this.aep.setLowMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(13));
                    this.aep.setCloseMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(14));
                    this.aep.setVolumeMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(15));
                    m.title = l.title + " " + i;
                    m.o9 = ArrayExtension.getModulus$1(Brush.$, this.ac8, e);
                    m.g4 = this.ag4;
                    if (this.afu(m)) {
                        this.aep.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.ac9, e));
                        this.aep.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.aer, e));
                    }
                    if (this.ahz != -2147483648 && this.afu(m)) {
                        this.aep.setPeriodOverride(m, this.ahz);
                    }
                    if (this.afu(m)) {
                        this.aep.setSmoothingPeriod(m, this.ah2);
                    }
                    if (this.afu(m)) {
                        this.aep.setSignalPeriod(m, this.ah1);
                    }
                    if (this.afu(m)) {
                        this.aep.setShortPeriod(m, this.ah0);
                        this.aep.setLongPeriod(m, this.ahy);
                    }
                    this.sa(m, e);
                    f.add(m);
                }
                let o = this.gn(i, false);
                for (let p = 0; p < f.count; p++) {
                    let q = f._inner[p];
                    g.series.add(q);
                }
                if (o != null) {
                    for (let r = 0; r < o.count; r++) {
                        let s = o._inner[r];
                        g.series.add(s);
                        this.sa(s, r);
                    }
                }
            }
        }
        ae9(indicatorName_) {
            return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
        }
        afb(a) {
            return this.ae9(EnumUtil.getName(FinancialIndicatorType_$type, a));
        }
        al6(a) {
            if (this.adz == null) {
                return;
            }
            let b = this.xAxis;
            if (b.actualMinimumValue > b.actualMaximumValue) {
                return;
            }
            this.adz.as = b.actualMinimumValue;
            this.adz.ar = b.actualMaximumValue;
            if (a) {
                this.adz.au = b.visibleMinimum;
                this.adz.at = b.visibleMaximum;
            }
            this.adz.bn();
        }
        j9() {
            let a = ((() => {
                let $ret = new FinancialChartVisualData();
                $ret.mainChart = super.j9();
                $ret.volumeChart = this.volumeChart == null ? null : this.volumeChart.vx();
                $ret.toolbar = this.adz == null ? null : this.adz.aj();
                $ret.zoomChart = this.zoomSliderChart == null ? null : this.zoomSliderChart.vx();
                return $ret;
            })());
            if (this.indicatorCharts != null) {
                a.indicatorCharts = new List$1(Base.$, 0);
                for (let b of fromEnum(this.indicatorCharts)) {
                    a.indicatorCharts.add1(b.vx());
                }
            }
            if (this.dataChart != null) {
                a.mainChartLeft = this.amf(this.dataChart).x;
                a.mainChartTop = this.amf(this.dataChart).y;
            }
            if (this.volumeChart != null) {
                a.volumeChartLeft = this.amf(this.volumeChart).x;
                a.volumeChartTop = this.amf(this.volumeChart).y;
            }
            if (this.zoomSliderChart != null) {
                a.zoomChartLeft = this.amf(this.zoomSliderChart).x;
                a.zoomChartTop = this.amf(this.zoomSliderChart).y;
            }
            if (this.adz != null) {
                let c = this.amg(this.adz);
                a.toolbarLeft = c.left;
                a.toolbarTop = c.top;
                a.toolbarWidth = c.width;
                a.toolbarHeight = c.height;
            }
            if (this.indicatorCharts != null) {
                a.indicatorChartLefts = new List$1(Number_$type, 0);
                a.indicatorChartTops = new List$1(Number_$type, 0);
                for (let d of fromEnum(this.indicatorCharts)) {
                    a.indicatorChartLefts.add(this.amf(d).x);
                    a.indicatorChartTops.add(this.amf(d).y);
                }
            }
            let e = this.ami();
            a.legendLeft = e.left;
            a.legendTop = e.top;
            a.legendWidth = e.width;
            a.legendHeight = e.height;
            a.legend = this.aej == null ? null : this.aej.exportVisualData();
            return a;
        }
        aio() {
            let a = this.j9();
            a.scaleByViewport();
            return a.serialize();
        }
        afa(overlayName_) {
            return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
        }
        al5() {
            if (this.dataChart == null) {
                return;
            }
            let a = new List$1(Series.$, 0);
            for (let b of fromEnum(this.dataChart.series)) {
                if (this.afw(b)) {
                    a.add(b);
                }
            }
            for (let c of fromEnum(a)) {
                this.dataChart.series.remove(c);
            }
            if (this.aeh == null) {
                return;
            }
            let d = new List$1(Series.$, 0);
            let e = -1;
            for (let f = 0; f < this.dataChart.series.count; f++) {
                let g = this.dataChart.series._inner[f];
                if (this.afw(g) || g.dd) {
                    continue;
                }
                e++;
                for (let h = 0; h < this.aeh.count; h++) {
                    let i = this.aeh._inner[h];
                    let j;
                    switch (i) {
                        case 1:
                            j = this.afa(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                        default:
                        case 0:
                            j = this.afa(EnumUtil.getName(FinancialOverlayType_$type, i));
                            break;
                    }
                    j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                    this.aeu.setXAxis(j, this.xAxis);
                    this.aeu.setYAxis(j, this.yAxis);
                    j.itemsSource = g.itemsSource;
                    let k = e * this.aeh.count + h;
                    j.o9 = ArrayExtension.getModulus$1(Brush.$, this.adc, k);
                    j.pe = ArrayExtension.getModulus$1(Brush.$, this.add, k);
                    j.g4 = this.ag6;
                    j.title = g.title + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                    let l = g;
                    if (l == null) {
                        continue;
                    }
                    let m = this.bd.dataSeries._inner[e];
                    this.aeu.setOpenMemberPath(j, m.getMemberPathFor(11));
                    this.aeu.setHighMemberPath(j, m.getMemberPathFor(12));
                    this.aeu.setLowMemberPath(j, m.getMemberPathFor(13));
                    this.aeu.setCloseMemberPath(j, m.getMemberPathFor(14));
                    this.aeu.setVolumeMemberPath(j, m.getMemberPathFor(15));
                    d.add(j);
                }
            }
            let n = new Array(this.dataChart.series.count);
            this.dataChart.series.copyTo(n, 0);
            this.dataChart.skipDataCleanup = true;
            this.dataChart.series.clear();
            this.dataChart.skipDataCleanup = false;
            for (let o = 0; o < n.length; o++) {
                n[o].index = -1;
            }
            d.o(n);
            for (let p = 0; p < d.count; p++) {
                let q = d._inner[p];
                this.dataChart.series.add(q);
                this.sa(q, p);
            }
        }
        al3() {
            if (this.af2) {
                return;
            }
            this.af2 = true;
            if (this.indicatorCharts != null) {
                let a = this.indicatorCharts;
                this.indicatorCharts = null;
                for (let b of fromEnum(a)) {
                    this.alj(b);
                }
            }
            if ((this.aef == null || this.aef.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
                this.indicatorCharts = null;
                if (this.agd != null) {
                    this.agd.clear();
                }
                if (this.agf != null) {
                    this.agf.clear();
                }
                this.alu();
                this.al4();
                this.af2 = false;
                return;
            }
            if (this.indicatorCharts == null) {
                this.indicatorCharts = new List$1(XamDataChart.$, 0);
            }
            this.indicatorCharts.clear();
            this.agd.clear();
            this.agf.clear();
            let c = this.aef == null ? 0 : this.aef.count;
            let d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
            let e = c + d;
            for (let f = 0; f < e; f++) {
                let g = new XamDataChart();
                this.indicatorCharts.add(g);
                this.alh(g);
                let h = f >= c;
                if (h) {
                    g.kh = this.customIndicatorNames._inner[f - c];
                }
                else {
                    g.kh = this.aiq(this.aef._inner[f]);
                }
                if (this.indicatorAxis != null) {
                    let i;
                    let j;
                    if (f == 0) {
                        i = this.indicatorAxis;
                        j = this.indicatorXAxis;
                    }
                    else {
                        i = new NumericYAxis();
                        if (!this.indicatorXAxis.cd) {
                            j = this.adl(0);
                        }
                        else {
                            j = this.adl(1);
                        }
                    }
                    j.name = "indicatorXAxis_" + f;
                    i.name = "indicatorAxis_" + f;
                    g.axes.add(i);
                    g.axes.add(j);
                    this.agd.add(i);
                    this.agf.add(j);
                    if (this.fi) {
                        this.abc(i);
                    }
                    if (this.fi) {
                        this.aba(j);
                    }
                }
            }
            this.alo();
            this.alu();
            if (this.adz != null) {
                this.adz.ae = this.aef;
            }
            this.aks();
            this.al4();
            this.af2 = false;
        }
        r2() {
            super.r2();
            this.aba(this.xAxis);
            this.aba(this.volumeXAxis);
            if (this.agf != null) {
                for (let a of fromEnum(this.agf)) {
                    this.aba(a);
                }
            }
            this.abc(this.yAxis);
            this.abc(this.volumeAxis);
            if (this.agd != null) {
                for (let b of fromEnum(this.agd)) {
                    this.abc(b);
                }
            }
            this.aba(this.zoomSliderXAxis);
            this.abc(this.zoomSliderAxis);
        }
        get_f8() {
            return !this.af0;
        }
        get af8() {
            return (this.externalObject._dynamicContent);
        }
        amb(a, b) {
            this.alx(a, b);
            this.aks();
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
            }
            this.alq();
            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
            this.alv();
            this.amc(a, b);
        }
        alq() {
            if (this.dataChart == null || this.zoomSliderChart == null) {
                return;
            }
            this.zoomSliderChart.series.clear();
            let a = new List$1(Series.$, 0);
            for (let b = 0; b < this.dataChart.series.count; b++) {
                let c = this.dataChart.series._inner[b];
                if (this.afw(c) || c.dd) {
                    continue;
                }
                let d;
                let e = this.aed;
                e = this.aec(e);
                let f = this.ahx(c, b);
                if (e == 1) {
                    switch (this.ad3(this.bd != null && this.bd.dataSeries != null && this.bd.dataSeries.count > f ? this.bd.dataSeries._inner[f] : null)) {
                        case 1:
                            e = 2;
                            break;
                        case 2:
                            e = 3;
                            break;
                        case 3:
                            e = 4;
                            break;
                        case 4:
                            e = 5;
                            break;
                    }
                }
                switch (e) {
                    case 2:
                        d = this.ae8();
                        this.ael.setDisplayType(d, 1);
                        break;
                    case 3:
                        d = this.ae8();
                        this.ael.setDisplayType(d, 0);
                        break;
                    case 5:
                        d = this.ae7();
                        break;
                    case 6:
                        d = this.ae5();
                        break;
                    default:
                    case 4:
                        d = this.ae6();
                        break;
                }
                let g = this.bd != null && this.bd.dataSeries != null && this.bd.dataSeries.count > f ? this.bd.dataSeries._inner[f] : null;
                if (d.dj && !d.ds) {
                    this.aen.setCategoryMode(d, 1);
                    this.aen.setXAxis(d, this.zoomSliderXAxis);
                    this.aen.setYAxis(d, this.zoomSliderAxis);
                    this.aen.setValueMemberPath(d, g == null ? null : this.air(g));
                }
                else if (d.ds) {
                    this.ael.setCategoryMode(d, 1);
                    this.ael.setXAxis(d, this.zoomSliderXAxis);
                    this.ael.setYAxis(d, this.zoomSliderAxis);
                    if (g != null) {
                        this.ael.setOpenMemberPath(d, g.getMemberPathFor(11));
                        this.ael.setHighMemberPath(d, g.getMemberPathFor(12));
                        this.ael.setLowMemberPath(d, g.getMemberPathFor(13));
                        this.ael.setCloseMemberPath(d, g.getMemberPathFor(14));
                        this.ael.setVolumeMemberPath(d, g.getMemberPathFor(15));
                    }
                }
                d.name = "zoomSliderSeries_" + f;
                d.itemsSource = c.itemsSource;
                d.title = c.title;
                d.g4 = this.i1;
                a.add(d);
            }
            for (let h = 0; h < a.count; h++) {
                let i = a._inner[h];
                this.zoomSliderChart.series.add(i);
                this.sa(i, h);
            }
        }
        sp(a, b, c) {
            super.sp(a, b, c);
            if (a == null || !b) {
                return;
            }
            let d = true;
            let e = true;
            switch (c) {
                case "Brushes":
                case "Outlines":
                    d = e = false;
                    break;
            }
            if (this.indicatorCharts != null && d) {
                for (let f of fromEnum(this.indicatorCharts)) {
                    a(f);
                }
            }
            if (this.volumeChart != null && e) {
                a(this.volumeChart);
            }
            if (this.zoomSliderChart != null) {
                a(this.zoomSliderChart);
            }
        }
        ak2(a, b) {
            let c = b;
            let d = a;
            let e = -1;
            if (this.indicatorCharts != null) {
                e = this.indicatorCharts.indexOf(d.cc);
            }
            e -= this.aef == null ? 0 : this.aef.count;
            if (this.applyCustomIndicators != null) {
                this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
            }
        }
        alz(a, b, c) {
            if (a != null) {
                if (b != null) {
                    a.axes.remove(b);
                }
                a.axes.add(c);
            }
            if (this.fi) {
                this.aba(c);
            }
        }
        get af7() {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        }
        ak3(a, b) {
            this.al3();
        }
        afy(a, b) {
            if (b <= (0)) {
                return false;
            }
            switch (a) {
                case 5: return true;
                case 4:
                case 3: return b >= timeSpanFromDays(365);
                case 2: return b >= timeSpanFromDays(180);
                case 1: return b >= timeSpanFromDays(90);
                case 0: return b >= timeSpanFromDays(30);
            }
            return false;
        }
        alt() {
            let a = this.adx != null ? this.adx : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
            let b = new FinancialChartRangeSelectorOptionCollection(0);
            let c = this.xAxis;
            let d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
            for (let e of fromEnum(a)) {
                if (this.afy(e, d)) {
                    b.add(e);
                }
            }
            this.adw = b;
            if (this.adz != null) {
                this.adz.u = this.adw;
            }
        }
        ak7(a, b) {
            this.alt();
        }
        alc(a, b) {
            this.aeh = this.adz.ag;
        }
        alb(a, b) {
            this.aef = this.adz.ae;
        }
        ak5(a, b) {
            this.al3();
        }
        ak6(a, b) {
            this.al5();
        }
        alg(a, b) {
            let c = a;
            if (c.bf == null) {
                return;
            }
            if (this.af0) {
                this.als(c.bf);
            }
        }
        alj(a) {
            SyncManager.e(a);
            a.axes.clear();
            a.series.clear();
            a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.ak4));
            a.provideContainer(null);
            if (this.volumeChart == null && this.indicatorCharts == null) {
                this.yAxis.er = this.volumeAxis.er = this.indicatorAxis.er = 0;
                this.xAxis.ay.visibility = this.acy;
            }
        }
        alh(a) {
            let b = a != this.zoomSliderChart;
            if (b) {
                if (this.dataChart != null) {
                    a.tq = new Rect(0, this.dataChart.ta.x, a.tq.y, this.dataChart.ta.width, a.tq.height);
                }
                let c = ((() => {
                    let $ret = new SyncSettings();
                    $ret.syncChannel = "one";
                    $ret.synchronizeHorizontally = true;
                    $ret.synchronizeVertically = false;
                    return $ret;
                })());
                SyncManager.d(a, c);
                SyncManager.c(a);
            }
            a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.ak4));
            this.r4(a);
        }
        aks() {
            if (this.indicatorCharts != null || this.volumeChart != null) {
                this.aa8(this.xAxis, (a) => a.visibility = 1);
            }
            for (let a = 0; a < this.agf.count; a++) {
                let b = this.agf._inner[a];
                let c = a < this.agf.count - 1 || this.volumeChart != null;
                this.aa8(b, (d) => d.visibility = c ? 1 : 0);
            }
        }
        alx(a, b) {
            if (a != null) {
                this.alj(a);
            }
            if (b != null) {
                this.alh(b);
            }
        }
        al9(a, b) {
            this.alx(a, b);
            this.aks();
            if (this.volumeChart != null) {
                if (this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.volumeChart.axes.add(this.volumeXAxis);
                }
                this.alp();
                this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
            }
            this.ama(a, b);
        }
        ak8(a, b) {
            this.al7();
        }
        al7() {
            if (this.adz == null || +(this.adz.au) == +(dateMaxValue()) || +(this.adz.at) == +(dateMinValue()) || this.dataChart == null) {
                return;
            }
            let a = this.xAxis;
            let b = a.getWindowRectForSelection(this.adz.au, this.adz.at);
            if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
                return;
            }
            this.af1 = true;
            this.dataChart.tq = new Rect(0, b.left, this.dataChart.tq.top, b.width, this.dataChart.tq.height);
            if (this.afh != null) {
                this.afh.windowRect = this.dataChart.ta;
            }
            if (this.af0) {
                this.als(this.dataChart);
            }
            this.af1 = false;
        }
        alf(a, b) {
            this.alt();
            this.al6(!this.af1);
        }
        ak1(a, b) {
            if (!this.af1) {
                if (this.af0) {
                    this.als(a);
                }
                let c = false;
                let d = this.s2(() => this.al6(true), c);
                c = d.p1;
                if (this.afh != null) {
                    this.afh.windowRect = this.dataChart.ta;
                }
            }
        }
        al1(a, b, c, d) {
            if (a == null || b == null) {
                return;
            }
            if (c != -1) {
                this.af1 = true;
                a.tq = new Rect(0, d, a.ta.top, c, a.ta.height);
                this.af1 = false;
            }
            let e = 1.7976931348623157E+308;
            let f = -1.7976931348623157E+308;
            let g = new Rect(0, 0, 0, 1, 1);
            let h = new ScalerParams(0, g, g, this.yAxis.cg, a.te);
            for (let i of fromEnum(a.series)) {
                h.b = i.gg();
                let j = i.ar(a.ta);
                let k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                let l = b.ei(j.c, h);
                let m = b.ei(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
            let n = a.ta.width;
            if (c != -1) {
                n = c;
            }
            let o = a.ta.left;
            if (d != -1) {
                o = d;
            }
            if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
                return;
            }
            this.af1 = true;
            let p = new Rect(0, o, e, n, f - e);
            a.tq = p;
            this.af1 = false;
        }
        al0(a) {
            if (a == null) {
                return;
            }
            if (a == this.dataChart) {
                this.al1(this.dataChart, this.yAxis, -1, -1);
                if (this.volumeChart != null) {
                    this.al1(this.volumeChart, this.volumeAxis, this.dataChart.ta.width, this.dataChart.ta.left);
                }
            }
            else if (a == this.volumeChart) {
                this.al1(this.volumeChart, this.volumeAxis, -1, -1);
                this.al1(this.dataChart, this.yAxis, this.volumeChart.ta.width, this.volumeChart.ta.left);
            }
        }
        als(a) {
            this.s1(() => this.al0(a));
        }
        ak9(a, b) {
            if (this.af0) {
                this.als(a);
            }
        }
        al8() {
            if (!this.af8) {
                return;
            }
            this.akv();
            if (this.aed == 0) {
                this.zoomSliderChart = null;
            }
            else if (this.zoomSliderChart == null) {
                this.zoomSliderChart = ((() => {
                    let $ret = new XamDataChart();
                    $ret.name = "ZoomSliderChart";
                    return $ret;
                })());
            }
            else {
                this.alq();
            }
        }
        akv() {
            let container_ = this.ahp.rootWrapper.getNativeElement();
            let containerParent_ = container_.parentElement;
            if (this.afh != null && containerParent_ != null && !this.af9) {
                this.af9 = true;
                if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                    let z_ = this.afh;
                    let f_ = this.externalObject;
                    let sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                    let sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                    sliderInstance_._implementation = z_;
                    sliderComponent_._staticStyling(container_, sliderInstance_, f_);
                }
            }
        }
        al2() {
            if (this.ad8 != 1) {
                return;
            }
            this.abe((a) => {
                let b;
                b = a.breaks;
                b.clear();
                if (this.xAxisBreaks == null) {
                    return;
                }
                for (let c of fromEnum(this.xAxisBreaks)) {
                    b.add(c);
                }
            });
        }
        tn(a, b, c) {
            super.tn(a, b, c);
            if (this.bd.dataSeries.count > 0) {
                if (this.ad8 == 1 && stringIsNullOrEmpty(this.lm)) {
                    this.b3.setXMemberPath(a, c.getMemberPathFor(17));
                }
                if (stringIsNullOrEmpty(this.lo)) {
                    this.b3.setYMemberPath(a, this.air(c));
                }
                if (stringIsNullOrEmpty(this.li)) {
                    this.b3.setLabelMemberPath(a, this.air(c));
                }
                if (stringIsNullOrEmpty(this.lf)) {
                    this.b3.setContentMemberPath(a, this.air(c));
                }
            }
        }
        aiq(a) {
            switch (a) {
                case 0: return "Absolute Volume Oscillator";
                case 1: return "Accumulation/Distribution Indicator";
                case 2: return "Average Directional Index";
                case 3: return "Average True Range Indicator";
                case 4: return "Bollinger Bandwidth";
                case 5: return "Chaikin Oscillator";
                case 6: return "Chaikin Volatility Indicator";
                case 7: return "Commodity Channel Index";
                case 8: return "Detrended Price Oscillator";
                case 9: return "Ease of Movement Indicator";
                case 10: return "Fast Stochastic Oscillator";
                case 11: return "Force Index Indicator";
                case 12: return "Full Stochastic Oscillator";
                case 13: return "Market Facilitation Index";
                case 14: return "Mass Index Indicator";
                case 15: return "Median Price Indicator";
                case 16: return "Money Flow Index";
                case 17: return "MACD Indicator";
                case 18: return "Negative Volume Index";
                case 19: return "On Balance Volume Indicator";
                case 20: return "Percentage Price Oscillator";
                case 21: return "Percentage Volume Oscillator";
                case 22: return "Positive Volume Index";
                case 23: return "Price Volume Trend";
                case 24: return "ROC - Rate of Change Indicator";
                case 25: return "RSI - Relative Strength Index";
                case 26: return "Slow Stochastic Oscillator";
                case 27: return "Standard Deviation Indicator";
                case 28: return "Stoch RSI";
                case 29: return "TRIX Indicator";
                case 30: return "Typical Price Indicator";
                case 31: return "Ultimate Oscillator";
                case 32: return "Weighted Close Indicator";
                case 33: return "Williams %R Indicator";
                default: return "Unknown";
            }
        }
        aba(a) {
            super.aba(a);
            let b = a;
            this.ali(b);
            if (a.bf != null) {
                for (let c of fromEnum(a.bf.series)) {
                    if (this.aft(c)) {
                        this.aen.setXAxis(c, b);
                    }
                    else if (this.afx(c)) {
                        this.ael.setXAxis(c, b);
                    }
                    else if (this.afu(c)) {
                        this.aep.setXAxis(c, b);
                    }
                    else if (this.afw(c)) {
                        this.aeu.setXAxis(c, b);
                    }
                }
            }
            this.alm((d) => {
                d.zoomMaximumCategoryRange = this.ag9;
                d.zoomMaximumItemSpan = this.aha;
                d.zoomToCategoryRange = this.ahb;
                d.zoomToCategoryStart = this.ahc;
                d.zoomToItemSpan = this.ahd;
            });
            let d = a == this.zoomSliderXAxis;
            if (d) {
                a.jv = this.ame;
                a.eq = this.ahk;
                this.aa8(a, (e) => e.visibility = 1);
            }
            let e = a;
            e.minimumValue = this.agl;
            e.maximumValue = this.agk;
            a.b0 = this.af3;
        }
        abc(a) {
            super.abc(a);
            if (a.bf != null && a == this.yAxis) {
                for (let b of fromEnum(a.bf.series)) {
                    if (this.aft(b)) {
                        this.aen.setYAxis(b, this.yAxis);
                    }
                    else if (this.afx(b)) {
                        this.ael.setYAxis(b, this.yAxis);
                    }
                    else if (this.afu(b)) {
                        this.aep.setYAxis(b, this.yAxis);
                    }
                    else if (this.afw(b)) {
                        this.aeu.setYAxis(b, this.yAxis);
                    }
                }
            }
            a.k9 = this.af4;
            a.l4 = this.ahi;
            a.l3 = this.ahh;
            if (a == this.yAxis) {
                a.l0 = this.ahg;
            }
            let c = a == this.zoomSliderAxis;
            if (c) {
                this.aa8(a, (d) => d.visibility = 1);
            }
            a.b0 = this.af5;
        }
        ali(a) {
            a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
            a.fz = XYChart.yx(a, this.bd.dataSeries);
            if (this.bd.dataSeries.count > 0) {
                let b = this.bd.dataSeries._inner[0].getMemberPathFor(17);
                a.hx(b);
            }
        }
        sa(a, b) {
            super.sa(a, b);
            if (a == null) {
                return;
            }
            let c = this.zoomSliderChart == a.cc;
            let d = this.dataChart != null && this.dataChart.series.contains(a);
            if ((d || c) && a.d6) {
                a.ms(this.ada != null ? ArrayExtension.getModulus$1(Brush.$, this.ada, b) : null, this.adb != null ? ArrayExtension.getModulus$1(Brush.$, this.adb, b) : null);
            }
            let e = this.afu(a);
            if (this.afw(a)) {
                a.o9 = this.adc != null ? ArrayExtension.getModulus$1(Brush.$, this.adc, b) : null;
                a.pe = this.add != null ? ArrayExtension.getModulus$1(Brush.$, this.add, b) : null;
                a.g4 = this.ag6;
            }
            else if (e) {
                a.o9 = this.ac8 != null ? ArrayExtension.getModulus$1(Brush.$, this.ac8, b) : null;
                a.g4 = this.ag4;
            }
            else if (!a.dd && (d || c)) {
                a.o9 = this.ab != null ? ArrayExtension.getModulus$1(Brush.$, this.ab, b) : null;
                a.pe = this.af != null ? ArrayExtension.getModulus$1(Brush.$, this.af, b) : null;
            }
            let f = this.volumeChart != null && this.volumeChart == a.cc;
            if (f) {
                a.g4 = this.ag8;
            }
            a.legend = c || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.afv ? this.aej : null;
        }
        sv(a, b, c) {
            super.sv(a, b, c);
            switch (a) {
                case "YAxisIsLogarithmic":
                    this.yAxis.lh = this.af6;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.lh = this.af6;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.lh = this.af6;
                    }
                    break;
                case "YAxisLogarithmBase":
                    this.yAxis.l8 = this.ah4;
                    if (this.volumeAxis != null) {
                        this.volumeAxis.l8 = this.ah4;
                    }
                    if (this.zoomSliderAxis != null) {
                        this.zoomSliderAxis.l8 = this.ah4;
                    }
                    break;
                case "VolumeType":
                    let d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                    if (this.ad6 == 0) {
                        this.volumeChart = null;
                    }
                    else if (this.volumeChart == null) {
                        this.volumeChart = ((() => {
                            let $ret = new XamDataChart();
                            $ret.name = "VolumeChart";
                            return $ret;
                        })());
                    }
                    else {
                        this.alp();
                    }
                    break;
                case "VolumeChart":
                    this.al9(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "DataChart":
                    if (typeCast(XamDataChart.$, b) !== null) {
                        let e = b;
                        e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.ak4));
                        e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.ak1));
                        e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.ak9));
                    }
                    if (this.dataChart != null) {
                        let f = this.dataChart;
                        f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.ak4));
                        let g = this.dataChart;
                        g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.ak1));
                        let h = this.dataChart;
                        h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.ak9));
                    }
                    this.al8();
                    break;
                case "XAxisMode":
                    this.xAxis = this.adl(this.ad8);
                    this.xAxis.name = "xAxis";
                    this.volumeXAxis = this.adl(this.ad8);
                    this.volumeXAxis.name = "volumeXAxis";
                    this.indicatorXAxis = this.adl(this.ad8);
                    this.indicatorXAxis.name = "indicatorXAxis_0";
                    this.zoomSliderXAxis = this.adl(this.ad8);
                    this.zoomSliderXAxis.name = "zoomSliderXAxis";
                    this.aa8(this.zoomSliderXAxis, (i) => i.visibility = 1);
                    this.aks();
                    if (this.ad8 == 1) {
                        this.al2();
                    }
                    break;
                case "YAxisMode":
                    this.yAxis = this.aez(this.aea);
                    this.yAxis.name = "yAxis";
                    this.zoomSliderAxis = this.aez(this.aea);
                    this.zoomSliderAxis.name = "zoomSliderAxis";
                    this.volumeAxis = this.aez(this.aea);
                    this.volumeAxis.name = "volumeAxis";
                    break;
                case "Toolbar":
                    let i = typeCast(FinancialChartToolbar.$, b);
                    if (i != null) {
                        i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.ak8));
                        i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.alb));
                        i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.alc));
                    }
                    if (this.adz != null) {
                        this.adz.ae = this.aef;
                        this.adz.ag = this.aeh;
                        this.adz.u = this.adw;
                        this.al6(true);
                        let j = this.adz;
                        j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.ak8));
                        let k = this.adz;
                        k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.alb));
                        let l = this.adz;
                        l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.alc));
                    }
                    break;
                case "XAxis":
                    let m = typeCast(CategoryAxisBase.$, b);
                    if (m != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(m);
                        }
                    }
                    let n = typeCast(ITimeRangeSelectorAxis_$type, b);
                    if (n != null) {
                        n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.alf));
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.xAxis);
                    }
                    if (this.fi) {
                        this.aba(this.xAxis);
                        this.rs();
                    }
                    this.al6(false);
                    this.al7();
                    this.alt();
                    let o = this.xAxis;
                    o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.alf));
                    break;
                case "XAxisZoomMaximumCategoryRange":
                    this.alm((p) => p.zoomMaximumCategoryRange = this.ag9);
                    break;
                case "XAxisZoomMaximumItemSpan":
                    this.alm((p) => p.zoomMaximumItemSpan = this.aha);
                    break;
                case "XAxisZoomToCategoryRange":
                    this.alm((p) => p.zoomToCategoryRange = this.ahb);
                    break;
                case "XAxisZoomToCategoryStart":
                    this.alm((p) => p.zoomToCategoryStart = this.ahc);
                    break;
                case "XAxisZoomToItemSpan":
                    this.alm((p) => p.zoomToItemSpan = this.ahd);
                    break;
                case "ChartType":
                    this.th();
                    break;
                case "VolumeXAxis":
                    this.alz(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                    break;
                case "ZoomSliderXAxis":
                    this.alz(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                    break;
                case "IndicatorXAxis":
                    this.al3();
                    break;
                case "YAxis":
                    let p = typeCast(NumericYAxis.$, b);
                    if (p != null) {
                        if (this.dataChart != null) {
                            this.dataChart.axes.remove(p);
                        }
                    }
                    if (this.dataChart != null) {
                        this.dataChart.axes.add(this.yAxis);
                    }
                    if (this.fi) {
                        this.abc(this.yAxis);
                        this.abc(this.yAxis);
                    }
                    let q = this.yAxis;
                    q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.alg));
                    break;
                case "VolumeAxis":
                    let r = typeCast(Axis.$, b);
                    if (this.volumeChart != null && r != null) {
                        this.volumeChart.axes.remove(r);
                    }
                    if (this.volumeChart != null && this.volumeAxis != null) {
                        this.volumeChart.axes.add(this.volumeAxis);
                        this.alp();
                    }
                    if (this.fi) {
                        this.abc(this.volumeAxis);
                    }
                    let s = this.volumeAxis;
                    s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.alg));
                    break;
                case "IndicatorAxis":
                    if (this.indicatorCharts != null) {
                        for (let t = 0; t < this.indicatorCharts.count; t++) {
                            let u = this.indicatorCharts._inner[t];
                            let v = new List$1(Axis.$, 0);
                            for (let w of fromEnum(u.axes)) {
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                            for (let x of fromEnum(v)) {
                                u.axes.remove(x);
                            }
                            let y = null;
                            if (t == 0) {
                                y = this.indicatorAxis;
                            }
                            else if (this.aea == 1) {
                                y = this.aez(this.aea);
                            }
                            else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                                y = new NumericYAxis();
                            }
                            if (y != null) {
                                u.axes.add(y);
                            }
                            if (this.fi) {
                                this.abc(y);
                            }
                        }
                    }
                    break;
                case "IsWindowSyncedToVisibleRange":
                    if (this.dataChart != null) {
                        this.dataChart.uo = this.f9 && this.f8;
                    }
                    if (this.volumeChart != null) {
                        this.volumeChart.uo = this.f9 && this.f8;
                    }
                    if (this.af0) {
                        this.al0(this.dataChart);
                    }
                    else {
                        this.volumeChart.vv = 1;
                    }
                    break;
                case "IndicatorTypes":
                    let z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                    if (z != null) {
                        z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.ak5));
                    }
                    let aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                    if (aa != null) {
                        aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.ak5));
                    }
                    this.al3();
                    break;
                case "OverlayTypes":
                    let ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                    if (ab != null) {
                        ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.ak6));
                    }
                    let ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                    if (ac != null) {
                        ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.ak6));
                    }
                    this.al5();
                    break;
                case "YAxisAbbreviateLargeNumbers":
                    this.abj((ad) => ad.k9 = this.af4);
                    break;
                case "YAxisMinimumValue":
                    this.abk((ad) => ad.l4 = this.ahi, false);
                    break;
                case "YAxisMaximumValue":
                    this.abk((ad) => ad.l3 = this.ahh, false);
                    break;
                case "YAxisInterval":
                    this.abk((ad) => ad.l0 = this.ahg, false);
                    break;
                case "Thickness":
                case "ZoomSliderType":
                    this.al8();
                    break;
                case "ZoomSliderChart":
                    if (!this.af7) {
                        return;
                    }
                    this.amb(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                    break;
                case "NegativeBrushes":
                case "NegativeOutlines":
                    this.aky((ad, ae) => {
                        if (ad.d6) {
                            ad.ms(this.ada != null ? ArrayExtension.getModulus$1(Brush.$, this.ada, ae) : null, this.adb != null ? ArrayExtension.getModulus$1(Brush.$, this.adb, ae) : null);
                        }
                    }, true);
                    break;
                case "OverlayBrushes":
                    this.akx((ad, ae) => ad.o9 = this.adc != null ? ArrayExtension.getModulus$1(Brush.$, this.adc, ae) : null);
                    break;
                case "OverlayOutlines":
                    this.akx((ad, ae) => ad.pe = this.add != null ? ArrayExtension.getModulus$1(Brush.$, this.add, ae) : null);
                    break;
                case "OverlayThickness":
                    this.akx((ad, ae) => ad.g4 = this.ag6);
                    break;
                case "OverlayMultiplier":
                    this.akx((ad, ae) => this.aeu.setMultiplier(ad, this.ag5));
                    break;
                case "VolumeBrushes":
                    this.akz((ad, ae) => ad.o9 = ArrayExtension.getModulus$1(Brush.$, this.ade, ae));
                    break;
                case "VolumeOutlines":
                    this.akz((ad, ae) => ad.pe = ArrayExtension.getModulus$1(Brush.$, this.adf, ae));
                    break;
                case "VolumeThickness":
                    this.akz((ad, ae) => ad.g4 = this.ag8);
                    break;
                case "IndicatorNegativeBrushes":
                    this.akw((ad, ae) => this.aep.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, this.ac9, ae)));
                    break;
                case "IndicatorBrushes":
                    this.akw((ad, ae) => ad.o9 = ArrayExtension.getModulus$1(Brush.$, this.ac8, ae));
                    break;
                case "IndicatorThickness":
                    this.akw((ad, ae) => ad.g4 = this.ag4);
                    break;
                case "IndicatorDisplayTypes":
                    this.akw((ad, ae) => this.aep.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.aer, ae)));
                    break;
                case "IndicatorPeriod":
                    this.akw((ad, ae) => {
                        if (this.ahz == -2147483648) {
                            return;
                        }
                        this.aep.setPeriodOverride(ad, this.ahz);
                    });
                    break;
                case "IndicatorMultiplier":
                    this.akw((ad, ae) => this.aep.setMultiplier(ad, this.ag3));
                    break;
                case "IndicatorSmoothingPeriod":
                    this.akw((ad, ae) => this.aep.setSmoothingPeriod(ad, this.ah2));
                    break;
                case "IndicatorShortPeriod":
                    this.akw((ad, ae) => this.aep.setShortPeriod(ad, this.ah0));
                    break;
                case "IndicatorLongPeriod":
                    this.akw((ad, ae) => this.aep.setLongPeriod(ad, this.ahy));
                    break;
                case "IndicatorSignalPeriod":
                    this.akw((ad, ae) => this.aep.setSignalPeriod(ad, this.ah1));
                    break;
                case "RangeSelectorOptions":
                    let ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                    if (ad != null) {
                        ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.ak7));
                    }
                    if (this.adx != null) {
                        let ae = this.adx;
                        ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.ak7));
                    }
                    this.alt();
                    break;
                case "CustomIndicatorNames":
                    let af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                    if (af != null) {
                        af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.ak3));
                    }
                    if (this.customIndicatorNames != null) {
                        let ag = this.customIndicatorNames;
                        ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.ak3));
                    }
                    this.al3();
                    break;
                case "Legend":
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.legend = null;
                    }
                    break;
                case "Brushes":
                    this.aky((ah, ai) => ah.o9 = this.ab != null ? ArrayExtension.getModulus$1(Brush.$, this.ab, ai) : null, true);
                    break;
                case "Outlines":
                    this.aky((ah, ai) => ah.pe = this.af != null ? ArrayExtension.getModulus$1(Brush.$, this.af, ai) : null, true);
                    break;
                case "XAxisLabelVisibility":
                    if (this.acy == 0 && this.zoomSliderXAxis != null) {
                        this.aa8(this.zoomSliderXAxis, (ah) => ah.visibility = 1);
                    }
                    this.aks();
                    break;
                case "YAxisLabelVisibility":
                    if (this.acz != 0 || this.zoomSliderAxis == null) {
                        break;
                    }
                    this.aa8(this.zoomSliderAxis, (ah) => ah.visibility = 1);
                    break;
                case "ZoomSliderXAxisMajorStroke":
                    this.zoomSliderXAxis.jv = this.ame;
                    break;
                case "ZoomSliderXAxisMajorStrokeThickness":
                    this.zoomSliderXAxis.eq = this.ahk;
                    break;
                case "FinancialChartLegend":
                case "IsLegendVisible":
                    let ah = this.afv && this.legend == null;
                    {
                        let ai = (aj, ak) => {
                            if (aj.isUsableInLegend) {
                                aj.legend = ah ? this.aej : null;
                            }
                        };
                        this.aky(ai, false);
                        this.akx(ai);
                    }
                    break;
                case "ZoomSliderAxis":
                    let aj = typeCast(Axis.$, b);
                    if (aj != null && this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.remove(aj);
                    }
                    if (this.zoomSliderAxis != null) {
                        if (this.zoomSliderChart != null) {
                            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                            this.alq();
                            this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                        }
                        if (this.fi) {
                            this.abc(this.zoomSliderAxis);
                        }
                        this.aa8(this.zoomSliderAxis, (ak) => ak.visibility = 1);
                    }
                    break;
                case "XAxisMinimumValue":
                    this.abe((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.minimumValue = this.agl;
                        }
                    });
                    break;
                case "XAxisMaximumValue":
                    this.abe((ak) => {
                        let al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                        if (al != null) {
                            al.maximumValue = this.agk;
                        }
                    });
                    break;
                case FinancialChart.ajz:
                    this.abf((ak) => ak.b0 = this.af3, a);
                    break;
                case FinancialChart.aka:
                    this.abj((ak) => ak.b0 = this.af5);
                    break;
            }
        }
        get_b1() {
            return 1;
        }
        get b1() {
            return this.get_b1();
        }
        get af6() {
            return this.afo;
        }
        set af6(a) {
            let b = this.af6;
            if (a != b) {
                this.afo = a;
                this.sv("YAxisIsLogarithmic", b, this.af6);
            }
        }
        get ah4() {
            return this.ahw;
        }
        set ah4(a) {
            let b = this.ah4;
            if (a != b) {
                this.ahw = a;
                this.sv("YAxisLogarithmBase", b, this.ah4);
            }
        }
        get ahg() {
            return this.agx;
        }
        set ahg(a) {
            let b = this.ahg;
            if (a != b) {
                this.agx = a;
                this.sv("YAxisInterval", b, this.ahg);
            }
        }
        get ahi() {
            return this.agz;
        }
        set ahi(a) {
            let b = this.ahi;
            if (a != b) {
                this.agz = a;
                this.sv("YAxisMinimumValue", b, this.ahi);
            }
        }
        get ahh() {
            return this.agy;
        }
        set ahh(a) {
            let b = this.ahh;
            if (a != b) {
                this.agy = a;
                this.sv("YAxisMaximumValue", b, this.ahh);
            }
        }
        get ahj() {
            return this.ag0;
        }
        set ahj(a) {
            let b = this.ahj;
            if (a != b) {
                this.ag0 = a;
                this.sv("YAxisMinorInterval", b, this.ahj);
            }
        }
        get ahf() {
            return this.yAxis.lw;
        }
        get ahe() {
            return this.yAxis.lv;
        }
        get ad6() {
            return this.ad4;
        }
        set ad6(a) {
            let b = this.ad6;
            if (a != b) {
                this.ad4 = a;
                this.sv("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ad6));
            }
        }
        get ad8() {
            return this.ad7;
        }
        set ad8(a) {
            let b = this.ad8;
            if (a != b) {
                this.ad7 = a;
                this.sv("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.ad8));
            }
        }
        get ag9() {
            return this.ags;
        }
        set ag9(a) {
            let b = this.ag9;
            if (a != b) {
                this.ags = a;
                this.sv("XAxisZoomMaximumCategoryRange", b, this.ag9);
            }
        }
        get ahc() {
            return this.agv;
        }
        set ahc(a) {
            let b = this.ahc;
            if (a != b) {
                this.agv = a;
                this.sv("XAxisZoomToCategoryStart", b, this.ahc);
            }
        }
        get aha() {
            return this.agt;
        }
        set aha(a) {
            let b = this.aha;
            if (a != b) {
                this.agt = a;
                this.sv("XAxisZoomMaximumItemSpan", b, this.aha);
            }
        }
        get ahb() {
            return this.agu;
        }
        set ahb(a) {
            let b = this.ahb;
            if (a != b) {
                this.agu = a;
                this.sv("XAxisZoomToCategoryRange", b, this.ahb);
            }
        }
        get ahd() {
            return this.agw;
        }
        set ahd(a) {
            let b = this.ahd;
            if (a != b) {
                this.agw = a;
                this.sv("XAxisZoomToItemSpan", b, this.ahd);
            }
        }
        get aea() {
            return this.ad9;
        }
        set aea(a) {
            let b = this.aea;
            if (a != b) {
                this.ad9 = a;
                this.sv("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.aea));
            }
        }
        get afz() {
            return this.afj;
        }
        set afz(a) {
            let b = this.afz;
            if (a != b) {
                this.afj = a;
                this.sv("IsToolbarVisible", b, this.afz);
            }
        }
        get ad1() {
            return this.ad0;
        }
        set ad1(a) {
            let b = this.ad1;
            if (a != b) {
                this.ad0 = a;
                this.sv("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.ad1));
            }
        }
        get_abt() {
            return super.get_abt();
        }
        set_abt(a) {
            super.set_abt(a);
        }
        get af0() {
            return this.afk;
        }
        set af0(a) {
            let b = this.af0;
            if (a != b) {
                this.afk = a;
                this.sv("IsWindowSyncedToVisibleRange", b, this.af0);
            }
        }
        get aef() {
            return this.aee;
        }
        set aef(a) {
            let b = this.aef;
            if (a != b) {
                this.aee = a;
                this.sv("IndicatorTypes", b, this.aef);
            }
        }
        get aeh() {
            return this.aeg;
        }
        set aeh(a) {
            let b = this.aeh;
            if (a != b) {
                this.aeg = a;
                this.sv("OverlayTypes", b, this.aeh);
            }
        }
        get indicatorCharts() {
            return this.agb;
        }
        set indicatorCharts(a) {
            let b = this.indicatorCharts;
            if (a != b) {
                this.agb = a;
                this.sv("IndicatorCharts", b, this.indicatorCharts);
            }
        }
        get af4() {
            return this.afm;
        }
        set af4(a) {
            let b = this.af4;
            if (a != b) {
                this.afm = a;
                this.sv("YAxisAbbreviateLargeNumbers", b, this.af4);
            }
        }
        get_iv() {
            return super.get_iv();
        }
        set_iv(a) {
            super.set_iv(a);
        }
        get af3() {
            return this.afl;
        }
        set af3(a) {
            let b = this.af3;
            if (a != b) {
                this.afl = a;
                this.sv(FinancialChart.ajz, b, this.af3);
            }
        }
        get af5() {
            return this.afn;
        }
        set af5(a) {
            let b = this.af5;
            if (a != b) {
                this.afn = a;
                this.sv(FinancialChart.aka, b, this.af5);
            }
        }
        get zoomSliderChart() {
            return this.afd;
        }
        set zoomSliderChart(a) {
            let b = this.zoomSliderChart;
            if (a != b) {
                this.afd = a;
                this.sv("ZoomSliderChart", b, this.zoomSliderChart);
            }
        }
        get zoomSliderAxis() {
            return this.aey;
        }
        set zoomSliderAxis(a) {
            let b = this.zoomSliderAxis;
            if (a != b) {
                this.aey = a;
                this.sv("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        }
        get zoomSliderXAxis() {
            return this.adj;
        }
        set zoomSliderXAxis(a) {
            let b = this.zoomSliderXAxis;
            if (a != b) {
                this.adj = a;
                this.sv("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        }
        get aed() {
            return this.aeb;
        }
        set aed(a) {
            let b = this.aed;
            if (a != b) {
                this.aeb = a;
                this.sv("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.aed));
            }
        }
        get ada() {
            return this.ac2;
        }
        set ada(a) {
            let b = this.ada;
            if (a != b) {
                this.ac2 = a;
                this.sv("NegativeBrushes", b, this.ada);
            }
        }
        get adb() {
            return this.ac3;
        }
        set adb(a) {
            let b = this.adb;
            if (a != b) {
                this.ac3 = a;
                this.sv("NegativeOutlines", b, this.adb);
            }
        }
        get adc() {
            return this.ac4;
        }
        set adc(a) {
            let b = this.adc;
            if (a != b) {
                this.ac4 = a;
                this.sv("OverlayBrushes", b, this.adc);
            }
        }
        get add() {
            return this.ac5;
        }
        set add(a) {
            let b = this.add;
            if (a != b) {
                this.ac5 = a;
                this.sv("OverlayOutlines", b, this.add);
            }
        }
        get adf() {
            return this.ac7;
        }
        set adf(a) {
            let b = this.adf;
            if (a != b) {
                this.ac7 = a;
                this.sv("VolumeOutlines", b, this.adf);
            }
        }
        get ade() {
            return this.ac6;
        }
        set ade(a) {
            let b = this.ade;
            if (a != b) {
                this.ac6 = a;
                this.sv("VolumeBrushes", b, this.ade);
            }
        }
        get ac9() {
            return this.ac1;
        }
        set ac9(a) {
            let b = this.ac9;
            if (a != b) {
                this.ac1 = a;
                this.sv("IndicatorNegativeBrushes", b, this.ac9);
            }
        }
        get ac8() {
            return this.ac0;
        }
        set ac8(a) {
            let b = this.ac8;
            if (a != b) {
                this.ac0 = a;
                this.sv("IndicatorBrushes", b, this.ac8);
            }
        }
        get ag8() {
            return this.agr;
        }
        set ag8(a) {
            let b = this.ag8;
            if (a != b) {
                this.agr = a;
                this.sv("VolumeThickness", b, this.ag8);
            }
        }
        get ag6() {
            return this.agp;
        }
        set ag6(a) {
            let b = this.ag6;
            if (a != b) {
                this.agp = a;
                this.sv("OverlayThickness", b, this.ag6);
            }
        }
        get ag5() {
            return this.ago;
        }
        set ag5(a) {
            let b = this.ag5;
            if (a != b) {
                this.ago = a;
                this.sv("OverlayMultiplier", b, this.ag5);
            }
        }
        get ag4() {
            return this.agn;
        }
        set ag4(a) {
            let b = this.ag4;
            if (a != b) {
                this.agn = a;
                this.sv("IndicatorThickness", b, this.ag4);
            }
        }
        get aer() {
            return this.aeq;
        }
        set aer(a) {
            let b = this.aer;
            if (a != b) {
                this.aeq = a;
                this.sv("IndicatorDisplayTypes", b, this.aer);
            }
        }
        get ahz() {
            return this.ahs;
        }
        set ahz(a) {
            let b = this.ahz;
            if (a != b) {
                this.ahs = a;
                this.sv("IndicatorPeriod", b, this.ahz);
            }
        }
        get ag3() {
            return this.agm;
        }
        set ag3(a) {
            let b = this.ag3;
            if (a != b) {
                this.agm = a;
                this.sv("IndicatorMultiplier", b, this.ag3);
            }
        }
        get ah2() {
            return this.ahv;
        }
        set ah2(a) {
            let b = this.ah2;
            if (a != b) {
                this.ahv = a;
                this.sv("IndicatorSmoothingPeriod", b, this.ah2);
            }
        }
        get ah0() {
            return this.aht;
        }
        set ah0(a) {
            let b = this.ah0;
            if (a != b) {
                this.aht = a;
                this.sv("IndicatorShortPeriod", b, this.ah0);
            }
        }
        get ahy() {
            return this.ahr;
        }
        set ahy(a) {
            let b = this.ahy;
            if (a != b) {
                this.ahr = a;
                this.sv("IndicatorLongPeriod", b, this.ahy);
            }
        }
        get ah1() {
            return this.ahu;
        }
        set ah1(a) {
            let b = this.ah1;
            if (a != b) {
                this.ahu = a;
                this.sv("IndicatorSignalPeriod", b, this.ah1);
            }
        }
        get adx() {
            return this.adv;
        }
        set adx(a) {
            let b = this.adx;
            if (a != b) {
                this.adv = a;
                this.sv("RangeSelectorOptions", b, this.adx);
            }
        }
        get customIndicatorNames() {
            return this.adr;
        }
        set customIndicatorNames(a) {
            let b = this.adr;
            if (a != b) {
                this.adr = a;
                this.sv("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        }
        get_f9() {
            return super.get_f9();
        }
        set_f9(a) {
            super.set_f9(a);
        }
        get ame() {
            return this.amd;
        }
        set ame(a) {
            let b = this.ame;
            if (a != b) {
                this.amd = a;
                this.sv("ZoomSliderXAxisMajorStroke", b, this.ame);
            }
        }
        get ahk() {
            return this.ag1;
        }
        set ahk(a) {
            let b = this.ahk;
            if (a != b) {
                this.ag1 = a;
                this.sv("ZoomSliderXAxisMajorStrokeThickness", b, this.ahk);
            }
        }
        get afv() {
            return this.afi;
        }
        set afv(a) {
            let b = this.afv;
            if (a != b) {
                this.afi = a;
                this.sv("IsLegendVisible", b, this.afv);
            }
        }
        get aej() {
            return this.aei;
        }
        set aej(a) {
            let b = this.aej;
            if (a != b) {
                this.aei = a;
                this.sv("FinancialChartLegend", b, this.aej);
            }
        }
        get xAxis() {
            return this.adi;
        }
        set xAxis(a) {
            let b = this.xAxis;
            if (a != b) {
                this.adi = a;
                this.sv("XAxis", b, this.xAxis);
            }
        }
        get yAxis() {
            return this.aex;
        }
        set yAxis(a) {
            let b = this.yAxis;
            if (a != b) {
                this.aex = a;
                this.sv("YAxis", b, this.yAxis);
            }
        }
        get volumeAxis() {
            return this.aew;
        }
        set volumeAxis(a) {
            let b = this.volumeAxis;
            if (a != b) {
                this.aew = a;
                this.sv("VolumeAxis", b, this.volumeAxis);
            }
        }
        get volumeXAxis() {
            return this.adh;
        }
        set volumeXAxis(a) {
            let b = this.volumeXAxis;
            if (a != b) {
                this.adh = a;
                this.sv("VolumeXAxis", b, this.volumeXAxis);
            }
        }
        get indicatorAxis() {
            return this.aev;
        }
        set indicatorAxis(a) {
            let b = this.indicatorAxis;
            if (a != b) {
                this.aev = a;
                this.sv("IndicatorAxis", b, this.indicatorAxis);
            }
        }
        get indicatorXAxis() {
            return this.adg;
        }
        set indicatorXAxis(a) {
            let b = this.indicatorXAxis;
            if (a != b) {
                this.adg = a;
                this.sv("IndicatorXAxis", b, this.indicatorXAxis);
            }
        }
        get agd() {
            return this.aga;
        }
        set agd(a) {
            let b = this.agd;
            if (a != b) {
                this.aga = a;
                this.sv("IndicatorAxes", b, this.agd);
            }
        }
        get agf() {
            return this.agc;
        }
        set agf(a) {
            let b = this.agf;
            if (a != b) {
                this.agc = a;
                this.sv("IndicatorXAxes", b, this.agf);
            }
        }
        get agl() {
            return this.agj;
        }
        set agl(a) {
            let b = this.agl;
            if (+a != +b) {
                this.agj = a;
                this.sv("XAxisMinimumValue", b, this.agl);
            }
        }
        get agk() {
            return this.agi;
        }
        set agk(a) {
            let b = this.agk;
            if (+a != +b) {
                this.agi = a;
                this.sv("XAxisMaximumValue", b, this.agk);
            }
        }
        get xAxisBreaks() {
            return this.agg;
        }
    }
    FinancialChart.$t = /*@__PURE__*/ markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.ah3 = 0;
    FinancialChart.ajz = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    FinancialChart.aka = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return FinancialChart;
})();
/**
 * @hidden
 */
export let FinancialChartToolbar = /*@__PURE__*/ (() => {
    class FinancialChartToolbar extends TemplatedHtmlControl {
        bg(a) {
            let b = a.querySelectorAll(".financialChartToolbarArea");
            if (b != null && b.length > 0) {
                this.g = b[0];
                if (!this.al) {
                    this.g.hide();
                }
            }
            let c = a.querySelectorAll(".financialChartIndicatorMenu");
            if (c != null && c.length > 0) {
                this.q.g = c[0];
            }
            let d = a.querySelectorAll(".financialChartRangeSelector");
            if (d != null && d.length > 0) {
                this.s.g = d[0];
            }
            let e = a.querySelectorAll(".financialChartTypePicker");
            if (e != null && e.length > 0) {
                this.aa.g = e[0];
            }
        }
        bl(a) {
            this.q.u(a);
            this.aa.u(a);
        }
        constructor(a, b) {
            super("financialChartToolbar", b, "");
            this.o = null;
            this.r = null;
            this.z = null;
            this.p = null;
            this.w = null;
            this.aq = dateMaxValue();
            this.ap = dateMinValue();
            this.ao = dateMaxValue();
            this.an = dateMinValue();
            this.rangeChanged = null;
            this.chartTypeChanged = null;
            this.trendLineTypeChanged = null;
            this.volumeTypeChanged = null;
            this.indicatorTypesChanged = null;
            this.overlayTypesChanged = null;
            this.x = 0;
            this.ah = 0;
            this.ab = 0;
            this.ad = null;
            this.af = null;
            this.t = null;
            this.ak = false;
            this.o = a;
            this.w = new FinancialChartToolbarViewModel();
            this.s = new FinancialChartRangeSelector(a != null ? a.aif : null);
            this.aa = new FinancialChartTypePicker(a != null ? a.aic : null);
            this.q = new FinancialChartIndicatorMenu(1, a != null ? a.aid : null);
        }
        get s() {
            return this.r;
        }
        set s(a) {
            let b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        }
        get aa() {
            return this.z;
        }
        set aa(a) {
            let b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        }
        get q() {
            return this.p;
        }
        set q(a) {
            let b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        }
        bm(a, b, c) {
            switch (a) {
                case "RangeStart":
                    if (this.s != null) {
                        this.s.t = this.as;
                    }
                    break;
                case "RangeEnd":
                    if (this.s != null) {
                        this.s.s = this.ar;
                    }
                    break;
                case "SelectionStart":
                    if (this.s != null) {
                        this.s.v = this.au;
                    }
                    break;
                case "SelectionEnd":
                    if (this.s != null) {
                        this.s.u = this.at;
                    }
                    break;
                case "RangeSelector":
                    let d = b;
                    if (d != null) {
                        d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                    }
                    if (this.s != null) {
                        this.s.t = this.as;
                        this.s.s = this.ar;
                        this.s.o = this.u;
                        this.s.v = this.au;
                        this.s.u = this.at;
                        let e = this.s;
                        e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                    }
                    break;
                case "ChartTypePicker":
                    let f = b;
                    if (f != null) {
                        f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                    }
                    if (this.aa != null) {
                        this.aa.w = this.y;
                        let g = this.aa;
                        g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                    }
                    break;
                case "ChartType":
                    if (this.aa != null) {
                        this.aa.w = this.y;
                    }
                    break;
                case "RangeSelectorOptions":
                    if (this.s != null) {
                        this.s.o = this.u;
                    }
                    break;
                case "IsToolbarVisible":
                    if (this.g == null) {
                        break;
                    }
                    if (this.al) {
                        this.g.show();
                    }
                    else {
                        this.g.hide();
                    }
                    break;
                case "IndicatorMenu":
                    let h = typeCast(FinancialChartIndicatorMenu.$, b);
                    if (h != null) {
                        h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                    }
                    if (this.q != null) {
                        let i = this.q;
                        i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                    }
                    break;
                case "IndicatorTypes":
                    if (this.indicatorTypesChanged != null) {
                        this.indicatorTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "OverlayTypes":
                    if (this.overlayTypesChanged != null) {
                        this.overlayTypesChanged(this, EventArgs.empty);
                    }
                    break;
                case "TrendLineType":
                    if (this.trendLineTypeChanged != null) {
                        this.trendLineTypeChanged(this, EventArgs.empty);
                    }
                    break;
                case "VolumeType":
                    if (this.volumeTypeChanged != null) {
                        this.volumeTypeChanged(this, EventArgs.empty);
                    }
                    break;
            }
        }
        bh(a, b) {
            this.ag = this.q.z;
            this.ae = this.q.y;
            this.ai = this.q.aa;
            this.ac = this.q.x;
        }
        bi(a, b) {
            this.y = this.aa.w;
            if (this.chartTypeChanged != null) {
                this.chartTypeChanged(this, b);
            }
        }
        bj(a, b) {
            this.au = this.s.v;
            this.at = this.s.u;
            if (this.rangeChanged != null) {
                this.rangeChanged(this, b);
            }
        }
        v() {
            let a = new FinancialChartToolbarContext();
            a.container = this.d;
            a.vm = this.w;
            a.vm.financialChartIndicatorMenu = ((() => {
                let $ret = new FinancialChartIndicatorMenuContext();
                $ret.vm = this.q.p;
                return $ret;
            })());
            a.vm.financialChartTypePicker = ((() => {
                let $ret = new FinancialChartTypePickerContext();
                $ret.vm = this.aa.p;
                return $ret;
            })());
            a.vm.financialChartRangeSelector = ((() => {
                let $ret = new FinancialChartRangeSelectorContext();
                $ret.vm = this.s.q;
                return $ret;
            })());
            return a;
        }
        l(a) {
            super.l(a);
            if (a == null) {
                return;
            }
            this.s.l(a);
            this.aa.l(a);
            this.q.l(a);
            this.bk();
        }
        bk() {
        }
        get au() {
            return this.aq;
        }
        set au(a) {
            let b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        }
        get at() {
            return this.ap;
        }
        set at(a) {
            let b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        }
        get as() {
            return this.ao;
        }
        set as(a) {
            let b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        }
        get ar() {
            return this.an;
        }
        set ar(a) {
            let b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        }
        bn() {
            if (this.s != null) {
                this.s.ab();
            }
        }
        get y() {
            return this.x;
        }
        set y(a) {
            let b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        }
        get ai() {
            return this.ah;
        }
        set ai(a) {
            let b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        }
        get ac() {
            return this.ab;
        }
        set ac(a) {
            let b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        }
        get ae() {
            return this.ad;
        }
        set ae(a) {
            let b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        }
        get ag() {
            return this.af;
        }
        set ag(a) {
            let b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        }
        static am(a, b) {
            if (a == b) {
                return true;
            }
            if ((a == null && b != null) || (a != null && b == null)) {
                return false;
            }
            if (a.count != b.count) {
                return false;
            }
            for (let c of fromEn(a)) {
                if (!b.contains(c)) {
                    return false;
                }
            }
            return true;
        }
        aj() {
            return ((() => {
                let $ret = new FinancialChartToolbarVisualData();
                $ret.rangeSelector = this.s == null ? null : this.s.r();
                return $ret;
            })());
        }
        get u() {
            return this.t;
        }
        set u(a) {
            let b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        }
        get al() {
            return this.ak;
        }
        set al(a) {
            let b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        }
    }
    FinancialChartToolbar.$t = /*@__PURE__*/ markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
})();
/**
 * @hidden
 */
export let FinancialChartRangeSelector = /*@__PURE__*/ (() => {
    class FinancialChartRangeSelector extends TemplatedHtmlControl {
        get v() {
            return this.q.selectionStart;
        }
        set v(a) {
            this.q.selectionStart = a;
        }
        get u() {
            return this.q.selectionEnd;
        }
        set u(a) {
            this.q.selectionEnd = a;
        }
        get t() {
            return this.q.rangeStart;
        }
        set t(a) {
            this.q.rangeStart = a;
        }
        get s() {
            return this.q.rangeEnd;
        }
        set s(a) {
            this.q.rangeEnd = a;
        }
        ab() {
            if (this.q.onPropertiesChanged()) {
                this.p.g(this.q);
            }
        }
        constructor(a) {
            super("financialChartRangeSelector", a, "");
            this.q = null;
            this.rangeChanged = null;
            this.p = null;
            this.p = new FinancialChartRangeSelectorView();
            this.q = new FinancialChartRangeSelectorViewModel();
            this.q.onRangeChanged = runOn(this, this.z);
            this.p.c = this.q;
        }
        l(a) {
            super.l(a);
            this.p.f(this.d, this.q);
        }
        z() {
            if (this.rangeChanged != null) {
                this.rangeChanged(this, EventArgs.empty);
            }
        }
        r() {
            return this.p.d(this.g);
        }
        get o() {
            return this.q.options;
        }
        set o(a) {
            let b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        }
        aa() {
            if (this.q != null) {
                this.q.ao();
            }
            if (this.p != null) {
                this.p.i(this.o);
            }
        }
    }
    FinancialChartRangeSelector.$t = /*@__PURE__*/ markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
})();
