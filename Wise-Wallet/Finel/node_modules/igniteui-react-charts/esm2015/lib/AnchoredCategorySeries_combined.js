/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { CategorySeries } from "./CategorySeries";
import { IIsCategoryBased_$type } from "./IIsCategoryBased";
import { IHasSingleValueCategory_$type } from "./IHasSingleValueCategory";
import { IHasCategoryTrendline_$type } from "./IHasCategoryTrendline";
import { ITrendLineSeries_$type } from "./ITrendLineSeries";
import { IAnchoredCategorySeriesInteractionManager_$type } from "./IAnchoredCategorySeriesInteractionManager";
import { DVContainer } from "igniteui-react-core";
import { Point_$type, enumGetBox, typeCast, markType, markDep } from "igniteui-react-core";
import { DependencyProperty } from "igniteui-react-core";
import { Series } from "./Series";
import { TrendLineType_$type } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { PenLineCap_$type } from "igniteui-react-core";
import { DoubleCollection } from "igniteui-react-core";
import { CategoryFrame } from "./CategoryFrame";
import { ICategoryScaler_$type } from "./ICategoryScaler";
import { IScaler_$type } from "./IScaler";
import { CategorySeriesView } from "./CategorySeriesView";
import { CategorySeriesMarkerCollisionAvoidance_$type } from "./CategorySeriesMarkerCollisionAvoidance";
import { ConsolidatedItemHitTestBehavior_$type } from "./ConsolidatedItemHitTestBehavior";
import { CategoryFramePreparer } from "./CategoryFramePreparer";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { Rect } from "igniteui-react-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { NumericAxisBase } from "./NumericAxisBase";
import { CategoryBucketCalculator } from "./CategoryBucketCalculator";
import { AxisRange } from "./AxisRange";
import { NumericYAxis } from "./NumericYAxis";
import { ScalerParams } from "./ScalerParams";
import { CategoryMarkerManager } from "./CategoryMarkerManager";
import { CollisionAvoider } from "./CollisionAvoider";
import { NonCollisionAvoider } from "./NonCollisionAvoider";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { PropertyMetadata } from "igniteui-react-core";
import { truncate, isNaN_, isInfinity } from "igniteui-react-core";
import { CategoryTrendLineManagerFactory } from "./CategoryTrendLineManagerFactory";
/**
 * @hidden
 */
export let AnchoredCategorySeries = /*@__PURE__*/ (() => {
    class AnchoredCategorySeries extends CategorySeries {
        get tu() {
            if (this.tt == null) {
                this.tt = DVContainer.instance.createInstance(IAnchoredCategorySeriesInteractionManager_$type, () => this.co.n);
            }
            return this.tt;
        }
        getHostReferenceValue() {
            return this.gg();
        }
        i4() {
            return AnchoredCategorySeries.$$p[4];
        }
        by() {
            let a = new AnchoredCategorySeriesView(this);
            return a;
        }
        l4(a) {
            super.l4(a);
            this.tp = a;
        }
        constructor() {
            super();
            this.tt = null;
            this.ty = false;
            this.tv = null;
            this.tq = null;
            this.t4 = null;
            this.tx = true;
            this.tz = 0;
            this.t0 = 0;
            this.r2 = new CategoryFramePreparer(1, this, this.r6, this, this, this.r6.cr);
        }
        h1(a, b) {
            let c = this.jv(b);
            if (c == AnchoredCategorySeries.$$p[4]) {
                return this.h2(a, b, this.uc);
            }
            return super.h1(a, b);
        }
        get valueColumn() {
            return this.tv;
        }
        set valueColumn(a) {
            if (this.tv != a) {
                let b = this.tv;
                this.tv = a;
                if (!this.ty) {
                    this.raisePropertyChanged("ValueColumn", b, this.tv);
                }
            }
        }
        getDataLegendSeriesContextAt(a, b) {
            let c = new DataLegendSeriesValueInfo();
            c.a = 0;
            c.l = this.gn({ $type: Point_$type, x: a, y: b }, false, false);
            c.q = this.uc != null ? this.uc : "Value";
            c.p = "Value";
            c.r = this.t8 != null ? this.t8 : "V:";
            c.s = this.ua != null ? this.ua : "";
            let d = new DataLegendSeriesContext();
            d.f = ((() => {
                let $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
                $ret.add(c);
                return $ret;
            })());
            d.b = this.aw();
            return d;
        }
        get ux() {
            return this.c(AnchoredCategorySeries.uk);
        }
        set ux(a) {
            this.h(AnchoredCategorySeries.uk, a);
        }
        eq(a) {
            let b = new Rect(0, 0, 0, 1, 1);
            let c = this.fetchXAxis();
            let d = this.fetchYAxis();
            let e = this.p1(this.b1);
            let f = c != null ? this.r2.r(typeCast(ICategoryScaler_$type, c), b, b, e) : 0;
            return this.tu.c$a(this, this.valueColumn, c, d, f, a);
        }
        tm(a, b, c) {
            if (b < a || a < 0 || a > this.valueColumn.count || b < 0 || b > this.valueColumn.count || c == null) {
                return null;
            }
            let d = new Array((b - a) + 1);
            let e = c.cm;
            let f = null;
            if (e) {
                f = c.i$b;
            }
            for (let g = a; g <= b; g++) {
                let h = g;
                if (e) {
                    h = f._inner[h];
                }
                d[g - a] = this.cl.item(g);
            }
            return d;
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            if (this.tp.c3 && this.tp.c2.g$b(a, b, c, d)) {
                this.mn(false);
                this.lu();
            }
            switch (b) {
                case "FastItemsSource":
                    if (typeCast(IFastItemsSource_$type, c) != null) {
                        c.deregisterColumn(this.valueColumn);
                        this.valueColumn = null;
                    }
                    if (typeCast(IFastItemsSource_$type, d) != null) {
                        this.valueColumn = this.ci(this.uc);
                    }
                    let e = typeCast(NumericAxisBase.$, this.fetchYAxis());
                    if (e != null && !e.c0()) {
                        this.tp.cr.g(this.fx);
                        this.mn(false);
                    }
                    break;
                case AnchoredCategorySeries.$$p[4]:
                    if (this.cl != null) {
                        this.cl.deregisterColumn(this.valueColumn);
                        this.valueColumn = this.ci(this.uc);
                    }
                    this.t4 = this.uc;
                    break;
                case "ValueColumn":
                    if (this.tp.c3) {
                        this.tp.c2.g$i();
                    }
                    let f = typeCast(NumericAxisBase.$, this.fetchYAxis());
                    if (f != null && !f.c0()) {
                        this.tp.cr.g(this.fx);
                        this.mn(false);
                    }
                    this.uj();
                    this.m7();
                    break;
                case "TrendLineBrush":
                    this.m1();
                    break;
                case "ErrorBarSettings":
                    this.mn(false);
                    break;
                case "TrendLineType":
                    this.lu();
                    break;
                case AnchoredCategorySeries.$$p[1]:
                    this.mn(false);
                    break;
            }
        }
        aq(a) {
            if (this.valueColumn == null || this.valueColumn.count == 0) {
                return null;
            }
            if (a == this.fetchXAxis()) {
                return new AxisRange(0, this.valueColumn.count - 1);
            }
            if (a == this.fetchYAxis()) {
                return new AxisRange(this.valueColumn.minimum, this.valueColumn.maximum);
            }
            return null;
        }
        k5(a, b, c, d) {
            switch (a) {
                case 4:
                case 1:
                case 0:
                    this.tp.cr.g(this.fx);
                    break;
            }
            if (this.tp.c3) {
                this.tp.c2.g$e(a, b, c, d);
            }
            this.uj();
            this.m7();
            if (a == 0 || a == 2 || a == 3 || a == 4) {
                this.tx = true;
            }
            else if (a == 1) {
                for (let e = b; e < b + c; e++) {
                    this.tz += this.valueColumn.item(e);
                }
                this.t0 = this.tz / this.valueColumn.count;
            }
        }
        sw() {
            return this.t1(this.r6);
        }
        t1(a) {
            let b = 0;
            let c = a.bv;
            let d = a.bu;
            let e = this.getEffectiveViewport1(a);
            let f = typeCast(NumericYAxis.$, this.fetchYAxis());
            if (!c.isEmpty && !d.isEmpty && f != null) {
                let g = new ScalerParams(0, c, d, f.cg, e);
                if (f.co) {
                    g.b = this.gg();
                }
                b = f.ei(f.l6, g);
            }
            return b;
        }
        uh(a, b, c) {
            let d = this.t1(c);
            if (a.count > 0) {
                let e = d;
                a.add({ $type: Point_$type, x: a._inner[a.count - 1].x, y: e });
                a.add({ $type: Point_$type, x: a._inner[0].x, y: e });
            }
        }
        tn(a, b, c, d) {
            return this.to(a, b, c, d, false);
        }
        to(a, b, c, d, e) {
            return CategorySeries.rr(a, b, c, d, e);
        }
        fd(a, b, c) {
            let d = super.fd(a, b, c);
            let e = c;
            if (this.valueColumn == null || this.valueColumn.count == 0 || e.cr.d < 1) {
                d = false;
            }
            return d;
        }
        k2(a, b) {
            super.k2(a, b);
            let c = b;
            c.cx();
            if (c.c3) {
                c.c2.g$d();
            }
        }
        tc(a, b) {
            super.tc(a, b);
            this.r3(b).d(a, b);
        }
        tf(a, b) {
            super.tf(a, b);
            let c = typeCast(AnchoredCategorySeriesView.$, b);
            c.b3 = true;
            if (c.c3) {
                c.c2.g$g(a.p);
            }
            if (this.qn()) {
                CategoryMarkerManager.e(this, a.m, b.cu, this.qp);
                this.s9(b, a);
                b.cm();
            }
            this.ue(a, b);
        }
        mm(a, b, c, d, e) {
            super.mm(a, b, c, d, e);
            let f = this.a7.a$h.item(d);
            let g = f;
            g.cr.g(this.fx);
            f.a1(c);
            if (this.cy(g)) {
                return;
            }
            if (this.tq == null) {
                this.tq = new CategoryFrame(3);
            }
            this.tq.u();
            this.tc(this.tq, g);
            this.tf(this.tq, g);
        }
        ue(a, b) {
        }
        m1() {
            super.m1();
            if (this.index < 0) {
                return;
            }
            this.tp.c7();
            if (this.trendLineBrush != null) {
                this.tp.c5();
            }
            else {
                this.tp.c4();
            }
        }
        h4(a, b) {
            if (this.tp.c3 && a == this.tp.c2.g$j) {
                return null;
            }
            return super.h4(a, b);
        }
        get currentCategoryMode() {
            return this.preferredCategoryMode(typeCast(CategoryAxisBase.$, this.rw()));
        }
        get scaler() {
            return typeCast(ICategoryScaler_$type, this.rw());
        }
        get yScaler() {
            return typeCast(IScaler_$type, this.sh());
        }
        get bucketizer() {
            return this.tp.cr;
        }
        get currentMode2Index() {
            return this.s0();
        }
        provideCollisionDetector() {
            if (this.tr == 1) {
                return new CollisionAvoider();
            }
            return NonCollisionAvoider.b;
        }
        get trendlinePreparer() {
            return this.tp.c3 ? this.tp.c2 : null;
        }
        lc(a) {
            super.lc(a);
            if (this.tp.c3) {
                this.a9.exportTrendlineData(this, a, this.tp.c2.g$j);
            }
        }
        hy(a) {
            let b = this.fetchXAxis();
            let c = this.fetchYAxis();
            return this.tu.c$b(this, a, this.sx(this.b1), this.valueColumn, b, c, this.ts == 1, (d) => super.hy(d));
        }
        get mayContainUnknowns() {
            return this.valueColumn == null || this.valueColumn.mayContainUnknowns;
        }
        gg() {
            return Series.gh(this.valueColumn, typeCast(ISortingAxis_$type, this.fetchXAxis()));
        }
        get_t3() {
            return 0;
        }
        get t3() {
            return this.get_t3();
        }
        ar(a) {
            if (a.isEmpty && this.ce != null) {
                a = this.ce.ta;
            }
            if (this.valueColumn == null) {
                return null;
            }
            let b = this.pz(this.b1);
            let c = this.rw();
            let d = new ScalerParams(0, a, this.ce.tp, c.cg, this.getEffectiveViewport());
            let e = (c.el(b.left, d));
            let f = (c.el(b.right, d));
            if (c.cg) {
                let g = e;
                e = f;
                f = g;
            }
            e -= this.t3;
            f += this.t3;
            let h = null;
            if (c.cm) {
                h = c;
                e = h.i$f(e);
                f = h.i$f(f);
            }
            else {
                e = Math.floor(e);
                f = Math.ceil(f);
            }
            if (isNaN_(e) || isNaN_(f)) {
                return null;
            }
            e = Math.max(0, Math.min(this.valueColumn.count - 1, e));
            f = Math.max(0, Math.min(this.valueColumn.count - 1, f));
            let i = 1.7976931348623157E+308;
            let j = -1.7976931348623157E+308;
            if (truncate(e) <= truncate(f)) {
                for (let k = truncate(e); k <= truncate(f); k++) {
                    let l = k;
                    if (h != null) {
                        l = h.i$b._inner[k];
                    }
                    let m = this.valueColumn.item(l);
                    if (this.valueColumn.mayContainUnknowns) {
                        if (isInfinity(m) || isNaN_(m)) {
                            continue;
                        }
                    }
                    i = Math.min(i, m);
                    j = Math.max(j, m);
                }
            }
            let n = new AxisRange(i, j);
            n = this.ap(n, this.sh(), a);
            return n;
        }
        uj() {
            this.f5 = this.valueColumn == null || this.valueColumn.count == 0 ? NaN : this.valueColumn.item(this.valueColumn.count - 1);
        }
        ui() {
            if (this.tx) {
                this.tz = 0;
                for (let a = 0; a < this.valueColumn.count; a++) {
                    this.tz += this.valueColumn.item(a);
                }
                this.t0 = this.tz / this.valueColumn.count;
                this.tx = false;
            }
        }
        gq(a, b) {
            if (b == null || !b.ci) {
                return NaN;
            }
            let c = this.sh();
            if (b != c) {
                return NaN;
            }
            let d = this.am(a);
            if (c.co) {
                return d[1];
            }
            else {
                return d[0];
            }
        }
        am(a) {
            let b = NaN;
            switch (a) {
                case 5:
                case 2:
                    b = this.valueColumn.maximum;
                    break;
                case 4:
                case 1:
                    b = this.valueColumn.minimum;
                    break;
                case 6:
                case 3:
                    if (this.tx) {
                        this.ui();
                    }
                    b = this.t0;
                    break;
            }
            let c = this.sh();
            if (c.co) {
                return [NaN, b];
            }
            else {
                return [b, NaN];
            }
        }
        pv(a) {
            let b = NaN;
            switch (a) {
                case 5:
                case 2:
                    b = this.valueColumn.maximum;
                    break;
                case 4:
                case 1:
                    b = this.valueColumn.minimum;
                    break;
                case 6:
                case 3:
                    if (this.tx) {
                        this.ui();
                    }
                    b = this.t0;
                    break;
            }
            if (isNaN_(b)) {
                return { $type: Point_$type, x: NaN, y: NaN };
            }
            let c = this.sh();
            let d = this.getEffectiveViewport1(this.b1);
            let e = new ScalerParams(0, this.b1.bv, this.b1.bu, c.cg, d);
            if (c.co) {
                e.b = this.gg();
            }
            e.c = d;
            if (c.co) {
                return { $type: Point_$type, x: NaN, y: c.ei(b, e) };
            }
            else {
                return { $type: Point_$type, x: c.ei(b, e), y: NaN };
            }
        }
        pw(a) {
            let b = this.sh();
            let c = this.getEffectiveViewport1(this.b1);
            let d = new ScalerParams(0, this.b1.bv, this.b1.bu, b.cg, c);
            if (b.co) {
                d.b = this.gg();
            }
            d.c = c;
            if (b.co) {
                return { $type: Point_$type, x: NaN, y: b.ei(a[1], d) };
            }
            else {
                return { $type: Point_$type, x: b.ei(a[0], d), y: NaN };
            }
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    AnchoredCategorySeries.$t = /*@__PURE__*/ markType(AnchoredCategorySeries, 'AnchoredCategorySeries', CategorySeries.$, [IIsCategoryBased_$type, IHasSingleValueCategory_$type, IHasCategoryTrendline_$type, ITrendLineSeries_$type]);
    AnchoredCategorySeries.uk = /*@__PURE__*/ DependencyProperty.i("ActualTrendLineBrush", Brush.$, AnchoredCategorySeries.$, /*@__PURE__*/ new PropertyMetadata(2, null, (a, b) => a.raisePropertyChanged("ActualTrendLineBrush", b.oldValue, b.newValue)));
    AnchoredCategorySeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, AnchoredCategorySeries, 'raisePropertyChanged', ['ConsolidatedItemHitTestBehavior:ts:ul', [ConsolidatedItemHitTestBehavior_$type, /*@__PURE__*/ enumGetBox(ConsolidatedItemHitTestBehavior_$type, 0)], 'MarkerCollisionAvoidance:tr:um', [CategorySeriesMarkerCollisionAvoidance_$type, /*@__PURE__*/ enumGetBox(CategorySeriesMarkerCollisionAvoidance_$type, 1)], 'ValueMemberAsLegendLabel:t8:uu', [2, null], 'ValueMemberAsLegendUnit:ua:uv', [2, null], 'ValueMemberPath:uc:uw', [2, null], 'TrendLineType::us', [TrendLineType_$type, /*@__PURE__*/ enumGetBox(TrendLineType_$type, 0)], 'TrendLineThickness::ur', [1, 1.5], 'TrendLinePeriod::uq', [1, 7], 'TrendLineBrush::un', [Brush.$, null], 'TrendLineZIndex:t2:ut', [1, 1001], 'TrendLineDashArray:uy:uo', [DoubleCollection.$], 'TrendLineDashCap:uz:up', [PenLineCap_$type, /*@__PURE__*/ enumGetBox(PenLineCap_$type, 0)]]);
    return AnchoredCategorySeries;
})();
/**
 * @hidden
 */
export let AnchoredCategoryBucketCalculator = /*@__PURE__*/ (() => {
    class AnchoredCategoryBucketCalculator extends CategoryBucketCalculator {
        constructor(a) {
            super(a);
            this.i = null;
            this.h = null;
            this.j = 0;
            this.i = a;
        }
        getBucketWithoutUnknowns(a) {
            let b = this.h;
            let c = this.j;
            let d = a * this.d;
            let e = d + this.d - 1;
            let f = c - 1;
            d = d < f ? d : f;
            e = e < f ? e : f;
            let g = 1.7976931348623157E+308;
            let h = -1.7976931348623157E+308;
            let i = true;
            for (let j = d; j <= e; ++j) {
                let k = b[j];
                g = g < k ? g : k;
                h = h > k ? h : k;
                i = false;
            }
            if (!i) {
                return [0.5 * (d + e), g, h];
            }
            return [0.5 * (d + e), NaN, NaN];
        }
        getBucket(a) {
            let b = this.h;
            let c = this.j;
            let d = a * this.d;
            let e = d + this.d - 1;
            let f = c - 1;
            d = d < f ? d : f;
            e = e < f ? e : f;
            let g = 0;
            let h = 0;
            let i = true;
            for (let j = d; j <= e; ++j) {
                let k = b[j];
                if (!i) {
                    if (!isNaN_(k)) {
                        g = g < k ? g : k;
                        h = h > k ? h : k;
                    }
                }
                else {
                    if (!isNaN_(k)) {
                        g = k;
                        h = k;
                        i = false;
                    }
                }
            }
            if (!i) {
                return [0.5 * (d + e), g, h];
            }
            return [0.5 * (d + e), NaN, NaN];
        }
        cacheValues() {
            this.j = this.i.c0.valueColumn.count;
            this.h = this.i.c0.valueColumn.asArray();
        }
        unCacheValues() {
            this.h = null;
        }
    }
    AnchoredCategoryBucketCalculator.$t = /*@__PURE__*/ markType(AnchoredCategoryBucketCalculator, 'AnchoredCategoryBucketCalculator', CategoryBucketCalculator.$);
    return AnchoredCategoryBucketCalculator;
})();
/**
 * @hidden
 */
export let AnchoredCategorySeriesView = /*@__PURE__*/ (() => {
    class AnchoredCategorySeriesView extends CategorySeriesView {
        constructor(a) {
            super(a);
            this.c0 = null;
            this.c1 = null;
            this.c0 = a;
        }
        get c2() {
            if (this.c1 == null) {
                this.c1 = CategoryTrendLineManagerFactory.a(this.c1, this.e.as(), this.e.nf, this.e, this.e.co);
            }
            return this.c1;
        }
        set c2(a) {
            this.c1 = a;
        }
        get c3() {
            return this.c1 != null;
        }
        c7() {
            this.c0.ux = null;
        }
        c5() {
            this.c0.ux = this.c0.trendLineBrush;
        }
        c4() {
            this.c0.ux = this.c0.o5;
        }
        cs() {
            return new AnchoredCategoryBucketCalculator(this);
        }
        c6() {
            this.cr.cacheValues();
        }
        c8() {
            this.cr.unCacheValues();
        }
        c9(a) {
            let b = this.cu.item(a);
            return this.cp(b);
        }
        a5(a, b) {
            if (a.d) {
                if (this.c0.trendLineType != 0 && !b) {
                    let c = this.c2.g$j;
                    c.ad = this.c0.trendLineThickness;
                    c._stroke = this.c0.ux;
                    c.ai = this.c0.uy;
                    c.aj = this.c0.uz;
                    a.v(c);
                }
            }
            super.a5(a, b);
        }
        getDefaultTooltipTemplate() {
            return this.c0.tu.c$c(this.e, this.c0.uc);
        }
    }
    AnchoredCategorySeriesView.$t = /*@__PURE__*/ markType(AnchoredCategorySeriesView, 'AnchoredCategorySeriesView', CategorySeriesView.$);
    return AnchoredCategorySeriesView;
})();
