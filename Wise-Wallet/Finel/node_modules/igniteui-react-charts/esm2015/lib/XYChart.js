/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { DomainChart } from "./DomainChart";
import { fromEnum, enumGetBox, markType } from "igniteui-react-core";
import { HorizontalAlignment_$type } from "igniteui-react-core";
import { VerticalAlignment_$type } from "igniteui-react-core";
import { Visibility_$type } from "igniteui-react-core";
import { YAxisLabelLocation_$type } from "./YAxisLabelLocation";
import { XAxisLabelLocation_$type } from "./XAxisLabelLocation";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { AxisDefaults } from "./AxisDefaults";
import { TitleSettings } from "./TitleSettings";
import { ScalerParams } from "./ScalerParams";
import { DeviceUtils } from "igniteui-react-core";
/**
 * @hidden
 */
export let XYChart = /*@__PURE__*/ (() => {
    class XYChart extends DomainChart {
        constructor() {
            super(...arguments);
            this.v5 = null;
            this.v6 = null;
            this.wm = 0;
            this.wo = 5;
            this.wn = 0;
            this.wl = 5;
            this.w3 = 5;
            this.w5 = 0;
            this.w4 = 5;
            this.w2 = 0;
            this.abw = null;
            this.ab3 = null;
            this.abu = null;
            this.abv = null;
            this.wx = 0;
            this.xe = 0;
            this.ww = NaN;
            this.xd = NaN;
            this.wz = NaN;
            this.xg = NaN;
            this.wy = NaN;
            this.xf = NaN;
            this.wv = NaN;
            this.xc = NaN;
            this.ab2 = null;
            this.ab9 = null;
            this.yo = null;
            this.ys = null;
            this.yq = null;
            this.yu = null;
            this.yj = null;
            this.yk = null;
            this.abx = null;
            this.ab4 = null;
            this.wp = DeviceUtils.g(1);
            this.w6 = DeviceUtils.g(1);
            this.wq = DeviceUtils.g(1);
            this.w7 = DeviceUtils.g(1);
            this.abz = null;
            this.ab6 = null;
            this.ab0 = null;
            this.ab7 = null;
            this.wr = DeviceUtils.g(1);
            this.w8 = DeviceUtils.g(1);
            this.ws = DeviceUtils.g(8);
            this.w9 = 0;
            this.ab1 = null;
            this.ab8 = null;
            this.wt = DeviceUtils.g(1);
            this.xa = DeviceUtils.g(1);
            this.yp = null;
            this.yt = null;
            this.aby = null;
            this.ab5 = null;
            this.wk = 0;
            this.w1 = 0;
            this.wj = NaN;
            this.w0 = NaN;
            this.wu = 0;
            this.xb = -90;
            this.wf = false;
            this.wg = false;
            this.abp = 1;
            this.acs = 1;
            this.abo = 1;
            this.abq = 2;
            this.acq = 0;
            this.acr = 1;
            this.acw = 0;
            this.acx = 0;
            this.wd = 4;
            this.wb = 4;
            this.yn = null;
            this.vz = null;
            this.yr = null;
            this.v0 = null;
        }
        provideContainer(a) {
            if (a != null) {
                let b = this.v3();
                let c = this.v4();
                if (b != null) {
                    b.provideRenderer(a);
                }
                if (c != null) {
                    c.provideRenderer(a);
                }
            }
            super.provideContainer(a);
        }
        r9() {
            super.r9();
            let a = this.v3();
            let b = this.v4();
            if (a != null && a.ay != null) {
                this.acc = a.ay.textColor;
            }
            if (b != null && b.ay != null) {
                this.acj = b.ay.textColor;
            }
            this.ach = AxisDefaults.j;
            this.aco = AxisDefaults.j;
            this.acd = AxisDefaults.h;
            this.ack = AxisDefaults.h;
            this.acg = AxisDefaults.g;
            this.acn = AxisDefaults.g;
        }
        sy(a, b, c) {
            super.sy(a, b, c);
            switch (a) {
                case "XAxisLabelLeftMargin":
                    this.abg((d) => d.leftMargin = this.xo);
                    break;
                case "XAxisLabelTopMargin":
                    this.abg((d) => d.topMargin = this.xq);
                    break;
                case "XAxisLabelRightMargin":
                    this.abg((d) => d.rightMargin = this.xp);
                    break;
                case "XAxisLabelBottomMargin":
                    this.abg((d) => d.bottomMargin = this.xn);
                    break;
                case "YAxisLabelLeftMargin":
                    this.abl((d) => d.leftMargin = this.x5);
                    break;
                case "YAxisLabelTopMargin":
                    this.abl((d) => d.topMargin = this.x7);
                    break;
                case "YAxisLabelRightMargin":
                    this.abl((d) => d.rightMargin = this.x6);
                    break;
                case "YAxisLabelBottomMargin":
                    this.abl((d) => d.bottomMargin = this.x4);
                    break;
                case "ActualItemsSource":
                case "ShouldDisplayMockData":
                case "ShouldUseSkeletonStyleForMockData":
                    this.aca = this.u6(this.acc);
                    this.acb = this.u6(this.acj);
                    break;
                case "XAxisLabelTextColor":
                    this.aca = this.u6(this.acc);
                    break;
                case "YAxisLabelTextColor":
                    this.acb = this.u6(this.acj);
                    break;
                case "ActualXAxisLabelTextColor":
                    this.abg((d) => d.textColor = this.aca);
                    break;
                case "ActualYAxisLabelTextColor":
                    this.abl((d) => d.textColor = this.acb);
                    break;
                case "XAxisTitleMargin":
                    this.abi((d) => d.margin = this.xz);
                    break;
                case "YAxisTitleMargin":
                    this.abn((d) => d.margin = this.yg);
                    break;
                case "XAxisTitleLeftMargin":
                    this.abi((d) => d.leftMargin = this.xy);
                    break;
                case "YAxisTitleLeftMargin":
                    this.abn((d) => d.leftMargin = this.yf);
                    break;
                case "XAxisTitleTopMargin":
                    this.abi((d) => d.topMargin = this.x1);
                    break;
                case "YAxisTitleTopMargin":
                    this.abn((d) => d.topMargin = this.yi);
                    break;
                case "XAxisTitleRightMargin":
                    this.abi((d) => d.rightMargin = this.x0);
                    break;
                case "YAxisTitleRightMargin":
                    this.abn((d) => d.rightMargin = this.yh);
                    break;
                case "XAxisTitleBottomMargin":
                    this.abi((d) => d.bottomMargin = this.xx);
                    break;
                case "YAxisTitleBottomMargin":
                    this.abn((d) => d.bottomMargin = this.ye);
                    break;
                case "XAxisTitleTextColor":
                    this.abi((d) => d.textColor = this.aci);
                    break;
                case "YAxisTitleTextColor":
                    this.abn((d) => d.textColor = this.acp);
                    break;
                case "XAxisFormatLabel":
                    this.abe((d) => d.at = this.v7);
                    break;
                case "YAxisFormatLabel":
                    this.abj((d) => d.at = this.v8);
                    break;
            }
        }
        get v7() {
            return this.v5;
        }
        set v7(a) {
            let b = this.v7;
            if (a != b) {
                this.v5 = a;
                this.sv("XAxisFormatLabel", b, this.v7);
            }
        }
        get v8() {
            return this.v6;
        }
        set v8(a) {
            let b = this.v8;
            if (a != b) {
                this.v6 = a;
                this.sv("YAxisFormatLabel", b, this.v8);
            }
        }
        get xo() {
            return this.wm;
        }
        set xo(a) {
            let b = this.xo;
            if (a != b) {
                this.wm = a;
                this.sv("XAxisLabelLeftMargin", b, this.xo);
            }
        }
        get xq() {
            return this.wo;
        }
        set xq(a) {
            let b = this.xq;
            if (a != b) {
                this.wo = a;
                this.sv("XAxisLabelTopMargin", b, this.xq);
            }
        }
        get xp() {
            return this.wn;
        }
        set xp(a) {
            let b = this.xp;
            if (a != b) {
                this.wn = a;
                this.sv("XAxisLabelRightMargin", b, this.xp);
            }
        }
        get xn() {
            return this.wl;
        }
        set xn(a) {
            let b = this.xn;
            if (a != b) {
                this.wl = a;
                this.sv("XAxisLabelBottomMargin", b, this.xn);
            }
        }
        get x5() {
            return this.w3;
        }
        set x5(a) {
            let b = this.x5;
            if (a != b) {
                this.w3 = a;
                this.sv("YAxisLabelLeftMargin", b, this.x5);
            }
        }
        get x7() {
            return this.w5;
        }
        set x7(a) {
            let b = this.x7;
            if (a != b) {
                this.w5 = a;
                this.sv("YAxisLabelTopMargin", b, this.x7);
            }
        }
        get x6() {
            return this.w4;
        }
        set x6(a) {
            let b = this.x6;
            if (a != b) {
                this.w4 = a;
                this.sv("YAxisLabelRightMargin", b, this.x6);
            }
        }
        get x4() {
            return this.w2;
        }
        set x4(a) {
            let b = this.x4;
            if (a != b) {
                this.w2 = a;
                this.sv("YAxisLabelBottomMargin", b, this.x4);
            }
        }
        get acc() {
            return this.abw;
        }
        set acc(a) {
            let b = this.acc;
            if (a != b) {
                this.abw = a;
                this.sv("XAxisLabelTextColor", b, this.acc);
            }
        }
        get acj() {
            return this.ab3;
        }
        set acj(a) {
            let b = this.acj;
            if (a != b) {
                this.ab3 = a;
                this.sv("YAxisLabelTextColor", b, this.acj);
            }
        }
        get aca() {
            return this.abu;
        }
        set aca(a) {
            let b = this.abu;
            if (a != b) {
                this.abu = a;
                this.sv("ActualXAxisLabelTextColor", b, this.aca);
            }
        }
        get acb() {
            return this.abv;
        }
        set acb(a) {
            let b = this.abv;
            if (a != b) {
                this.abv = a;
                this.sv("ActualYAxisLabelTextColor", b, this.acb);
            }
        }
        get xz() {
            return this.wx;
        }
        set xz(a) {
            let b = this.xz;
            if (a != b) {
                this.wx = a;
                this.sv("XAxisTitleMargin", b, this.xz);
            }
        }
        get yg() {
            return this.xe;
        }
        set yg(a) {
            let b = this.yg;
            if (a != b) {
                this.xe = a;
                this.sv("YAxisTitleMargin", b, this.yg);
            }
        }
        get xy() {
            return this.ww;
        }
        set xy(a) {
            let b = this.xy;
            if (a != b) {
                this.ww = a;
                this.sv("XAxisTitleLeftMargin", b, this.xy);
            }
        }
        get yf() {
            return this.xd;
        }
        set yf(a) {
            let b = this.yf;
            if (a != b) {
                this.xd = a;
                this.sv("YAxisTitleLeftMargin", b, this.yf);
            }
        }
        get x1() {
            return this.wz;
        }
        set x1(a) {
            let b = this.x1;
            if (a != b) {
                this.wz = a;
                this.sv("XAxisTitleTopMargin", b, this.x1);
            }
        }
        get yi() {
            return this.xg;
        }
        set yi(a) {
            let b = this.yi;
            if (a != b) {
                this.xg = a;
                this.sv("YAxisTitleTopMargin", b, this.yi);
            }
        }
        get x0() {
            return this.wy;
        }
        set x0(a) {
            let b = this.x0;
            if (a != b) {
                this.wy = a;
                this.sv("XAxisTitleRightMargin", b, this.x0);
            }
        }
        get yh() {
            return this.xf;
        }
        set yh(a) {
            let b = this.yh;
            if (a != b) {
                this.xf = a;
                this.sv("YAxisTitleRightMargin", b, this.yh);
            }
        }
        get xx() {
            return this.wv;
        }
        set xx(a) {
            let b = this.xx;
            if (a != b) {
                this.wv = a;
                this.sv("XAxisTitleBottomMargin", b, this.xx);
            }
        }
        get ye() {
            return this.xc;
        }
        set ye(a) {
            let b = this.ye;
            if (a != b) {
                this.xc = a;
                this.sv("YAxisTitleBottomMargin", b, this.ye);
            }
        }
        get aci() {
            return this.ab2;
        }
        set aci(a) {
            let b = this.aci;
            if (a != b) {
                this.ab2 = a;
                this.sv("XAxisTitleTextColor", b, this.aci);
            }
        }
        get acp() {
            return this.ab9;
        }
        set acp(a) {
            let b = this.acp;
            if (a != b) {
                this.ab9 = a;
                this.sv("YAxisTitleTextColor", b, this.acp);
            }
        }
        sz(a, b, c) {
            super.sz(a, b, c);
            switch (a) {
                case "XAxisLabelTextStyle":
                    this.abg((d) => d.textStyle = this.zc);
                    break;
                case "YAxisLabelTextStyle":
                    this.abl((d) => d.textStyle = this.aah);
                    break;
                case "XAxisTitleTextStyle":
                    this.abi((d) => d.textStyle = this.z0);
                    break;
                case "YAxisTitleTextStyle":
                    this.abn((d) => d.textStyle = this.aa5);
                    break;
            }
        }
        get zc() {
            return this.yo;
        }
        set zc(a) {
            let b = this.zc;
            if (a != b) {
                this.yo = a;
                this.sv("XAxisLabelTextStyle", b, this.zc);
            }
        }
        get aah() {
            return this.ys;
        }
        set aah(a) {
            let b = this.aah;
            if (a != b) {
                this.ys = a;
                this.sv("YAxisLabelTextStyle", b, this.aah);
            }
        }
        get z0() {
            return this.yq;
        }
        set z0(a) {
            let b = this.z0;
            if (a != b) {
                this.yq = a;
                this.sv("XAxisTitleTextStyle", b, this.z0);
            }
        }
        get aa5() {
            return this.yu;
        }
        set aa5(a) {
            let b = this.aa5;
            if (a != b) {
                this.yu = a;
                this.sv("YAxisTitleTextStyle", b, this.aa5);
            }
        }
        abb(a) {
            this.aa8(a, (b) => b.leftMargin = this.xo);
            this.aa8(a, (b) => b.topMargin = this.xq);
            this.aa8(a, (b) => b.rightMargin = this.xp);
            this.aa8(a, (b) => b.bottomMargin = this.xn);
            this.aa8(a, (b) => b.textColor = this.aca);
            this.aa9(a, (b) => b.textColor = this.aci);
            this.aa9(a, (b) => b.leftMargin = this.xy);
            this.aa9(a, (b) => b.topMargin = this.x1);
            this.aa9(a, (b) => b.rightMargin = this.x0);
            this.aa9(a, (b) => b.bottomMargin = this.xx);
            this.aa8(a, (b) => b.textStyle = this.zc);
            this.aa9(a, (b) => b.textStyle = this.z0);
        }
        abd(a) {
            this.aa8(a, (b) => b.leftMargin = this.x5);
            this.aa8(a, (b) => b.topMargin = this.x7);
            this.aa8(a, (b) => b.rightMargin = this.x6);
            this.aa8(a, (b) => b.bottomMargin = this.x4);
            this.aa8(a, (b) => b.textColor = this.acb);
            this.aa9(a, (b) => b.textColor = this.acp);
            this.aa9(a, (b) => b.leftMargin = this.yf);
            this.aa9(a, (b) => b.topMargin = this.yi);
            this.aa9(a, (b) => b.rightMargin = this.yh);
            this.aa9(a, (b) => b.bottomMargin = this.ye);
            this.aa8(a, (b) => b.textStyle = this.aah);
            this.aa9(a, (b) => b.textStyle = this.aa5);
        }
        tg(a) {
            let b = this.bc(a);
            let c = this.c1(a, b);
            if (c == null) {
                return;
            }
            c.itemsSource = a.data;
            c.name = this.oe(a);
            c.title = this.of(a, b);
            this.dataChart.series.add(c);
        }
        abe(a) {
            this.abf(a, null);
        }
        abf(a, b) {
            a(this.v3());
        }
        abk(a, b) {
            a(this.v4());
        }
        abj(a) {
            this.abk(a, true);
        }
        rt(a, b) {
            this.abe(a);
            this.abk(a, b);
        }
        abi(a) {
            this.aa9(this.v3(), a);
        }
        abn(a) {
            this.aa9(this.v4(), a);
        }
        abl(a) {
            this.aa8(this.v4(), a);
        }
        abg(a) {
            this.aa8(this.v3(), a);
        }
        xh(a) {
            let b = this.v3();
            return b.ei(a, new ScalerParams(1, this.ve, this.vd, b.cg));
        }
        xj(a) {
            let b = this.v3();
            return b.el(a, new ScalerParams(1, this.ve, this.vd, b.cg));
        }
        xi(a) {
            let b = this.v4();
            return b.ei(a, new ScalerParams(1, this.ve, this.vd, b.cg));
        }
        xk(a) {
            let b = this.v4();
            return b.el(a, new ScalerParams(1, this.ve, this.vd, b.cg));
        }
        td(a) {
            super.td(a);
            if (a == null) {
                return;
            }
            if (a.axes != null) {
                let b = this.v3();
                let c = this.v4();
                if (a.axes.contains(b)) {
                    a.axes.remove(b);
                }
                if (a.axes.contains(c)) {
                    a.axes.remove(c);
                }
            }
        }
        static yx(a, b) {
            for (let c of fromEnum(b)) {
                let d = c.findMatchingHint(16);
                if (d != null) {
                    let e = d.path;
                    return e;
                }
            }
            return null;
        }
        r4(a) {
            super.r4(a);
            if (a == this.dataChart) {
                this.dataChart.axes.add(this.v3());
                this.dataChart.axes.add(this.v4());
            }
        }
        aba(a) {
            if (a != null && this.j8 != null && a.fk == null) {
                a.provideRenderer(this.j8);
            }
            a.jv = this.acd;
            a.eq = this.xr;
            a.jw = this.ace;
            a.et = this.xs;
            a.jy = this.acg;
            a.ff = this.xt;
            a.jx = this.acf;
            a.fg = this.xu;
            a.jz = this.ach;
            a.fh = this.xv;
            a.c3 = true;
            a.ct = this.gb;
            a.cv = this.gb;
            let b = a == this.v3();
            if (b) {
                a.g5 = this.zr;
            }
            a.fz = this.yl;
            a.gf = this.y3;
            a.ag = this.v1;
            this.aa8(a, (c) => c.angle = this.xm);
            this.aa8(a, (c) => {
                if (c.extent != this.xl) {
                    c.extent = this.xl;
                }
            });
            this.aa8(a, (c) => c.horizontalAlignment = this.abr);
            this.aa8(a, (c) => c.verticalAlignment = this.act);
            this.aa8(a, (c) => c.visibility = this.acy);
            this.aa8(a, (c) => c.location = this.v9(this.wc));
            this.aa9(a, (c) => c.horizontalAlignment = this.abs);
            this.aa9(a, (c) => c.angle = this.xw);
            this.abb(a);
        }
        abc(a) {
            if (a == null) {
                return;
            }
            if (this.j8 != null && a.fk == null) {
                a.provideRenderer(this.j8);
            }
            a.ct = this.gb;
            a.cv = this.gb;
            this.aa8(a, (b) => b.angle = this.x3);
            this.aa8(a, (b) => {
                if (b.extent != this.x2) {
                    b.extent = this.x2;
                }
            });
            this.aa8(a, (b) => b.horizontalAlignment = this.abt);
            this.aa8(a, (b) => b.verticalAlignment = this.acu);
            this.aa8(a, (b) => b.visibility = this.acz);
            this.aa8(a, (b) => b.location = this.wa(this.we));
            this.aa9(a, (b) => b.verticalAlignment = this.acv);
            this.aa9(a, (b) => b.angle = this.yd);
            a.jv = this.ack;
            a.eq = this.x8;
            a.jw = this.acl;
            a.et = this.x9;
            a.jy = this.acn;
            a.ff = this.ya;
            a.jx = this.acm;
            a.fg = this.yb;
            a.jz = this.aco;
            a.fh = this.yc;
            let b = a == this.v4();
            if (b) {
                a.g5 = this.aaw;
            }
            a.gf = this.z8;
            a.ag = this.v2;
            this.abd(a);
        }
        r1() {
            super.r1();
            this.aba(this.v3());
            this.abc(this.v4());
        }
        aa8(a, b) {
            if (a == null) {
                return;
            }
            if (a.ay == null) {
                a.ay = new AxisLabelSettings();
                a.ay.angle = a.d4();
                a.ay.bottomMargin = a.d5();
                a.ay.leftMargin = a.d6();
                a.ay.rightMargin = a.d7();
                a.ay.topMargin = a.d8();
                a.ay.horizontalAlignment = a.jq();
                a.ay.location = a.az();
                a.ay.verticalAlignment = a.kj();
            }
            b(a.ay);
        }
        aa9(a, b) {
            if (a == null) {
                return;
            }
            if (a.be == null) {
                a.be = new TitleSettings();
                a.be.bottomMargin = a.ea();
                a.be.leftMargin = a.eb();
                a.be.rightMargin = a.ec();
                a.be.topMargin = a.ed();
                a.be.location = a.a0();
                a.be.angle = a.d9();
                a.be.horizontalAlignment = a.jr();
                a.be.verticalAlignment = a.kk();
            }
            b(a.be);
        }
        sv(a, b, c) {
            super.sv(a, b, c);
            switch (a) {
                case "XAxisLabelAngle":
                    this.abg((d) => d.angle = this.xm);
                    break;
                case "YAxisLabelAngle":
                    this.abl((d) => d.angle = this.x3);
                    break;
                case "XAxisLabelHorizontalAlignment":
                    this.abg((d) => d.horizontalAlignment = this.abr);
                    break;
                case "YAxisLabelHorizontalAlignment":
                    this.abl((d) => d.horizontalAlignment = this.abt);
                    break;
                case "XAxisLabelVerticalAlignment":
                    this.abg((d) => d.verticalAlignment = this.act);
                    break;
                case "YAxisLabelVerticalAlignment":
                    this.abl((d) => d.verticalAlignment = this.acu);
                    break;
                case "XAxisLabelVisibility":
                    this.abg((d) => d.visibility = this.acy);
                    break;
                case "YAxisLabelVisibility":
                    this.abl((d) => d.visibility = this.acz);
                    break;
                case "XAxisLabel":
                    this.abe((d) => d.fz = this.yl);
                    break;
                case "YAxisLabel":
                    this.abj((d) => d.fz = this.ym);
                    break;
                case "XAxisLabelFormat":
                    this.abe((d) => d.gf = this.y3);
                    break;
                case "XAxisLabelFormatSpecifiers":
                    this.abe((d) => d.ag = this.v1);
                    break;
                case "YAxisLabelFormat":
                    this.abj((d) => d.gf = this.z8);
                    break;
                case "YAxisLabelFormatSpecifiers":
                    this.abj((d) => d.ag = this.v2);
                    break;
                case "XAxisTitleAngle":
                    this.abi((d) => d.angle = this.xw);
                    break;
                case "YAxisTitleAngle":
                    this.abn((d) => d.angle = this.yd);
                    break;
                case "XAxisTitleAlignment":
                    this.abi((d) => d.horizontalAlignment = this.abs);
                    break;
                case "YAxisTitleAlignment":
                    this.abn((d) => d.verticalAlignment = this.acv);
                    break;
                case "XAxisTitle":
                    this.abe((d) => d.g5 = this.zr);
                    break;
                case "YAxisTitle":
                    this.abk((d) => d.g5 = this.aaw, false);
                    break;
                case "XAxisMajorStroke":
                    this.abf((d) => d.jv = this.acd, a);
                    break;
                case "YAxisMajorStroke":
                    this.abj((d) => d.jv = this.ack);
                    break;
                case "XAxisMajorStrokeThickness":
                    this.abf((d) => d.eq = this.xr, a);
                    break;
                case "YAxisMajorStrokeThickness":
                    this.abj((d) => d.eq = this.x8);
                    break;
                case "XAxisMinorStroke":
                    this.abe((d) => d.jw = this.ace);
                    break;
                case "YAxisMinorStroke":
                    this.abj((d) => d.jw = this.acl);
                    break;
                case "XAxisMinorStrokeThickness":
                    this.abe((d) => d.et = this.xs);
                    break;
                case "YAxisMinorStrokeThickness":
                    this.abj((d) => d.et = this.x9);
                    break;
                case "XAxisTickLength":
                    this.abe((d) => d.fg = this.xu);
                    break;
                case "YAxisTickLength":
                    this.abj((d) => d.fg = this.yb);
                    break;
                case "XAxisTickStroke":
                    this.abe((d) => d.jz = this.ach);
                    break;
                case "YAxisTickStroke":
                    this.abj((d) => d.jz = this.aco);
                    break;
                case "XAxisTickStrokeThickness":
                    this.abe((d) => d.fh = this.xv);
                    break;
                case "YAxisTickStrokeThickness":
                    this.abj((d) => d.fh = this.yc);
                    break;
                case "XAxisStroke":
                    this.abe((d) => d.jy = this.acg);
                    break;
                case "YAxisStroke":
                    this.abj((d) => d.jy = this.acn);
                    break;
                case "XAxisStrokeThickness":
                    this.abe((d) => d.ff = this.xt);
                    break;
                case "YAxisStrokeThickness":
                    this.abj((d) => d.ff = this.ya);
                    break;
                case "XAxisExtent":
                    this.abg((d) => d.extent = this.xl);
                    break;
                case "YAxisExtent":
                    this.abl((d) => d.extent = this.x2);
                    break;
                case "XAxisStrip":
                    this.abe((d) => d.jx = this.acf);
                    break;
                case "YAxisStrip":
                    this.abj((d) => d.jx = this.acm);
                    break;
                case "XAxisInverted":
                    this.abe((d) => d.cg = this.wh);
                    break;
                case "YAxisInverted":
                    this.abj((d) => d.cg = this.wi);
                    break;
                case "YAxisLabelLocation":
                    this.abm();
                    break;
                case "XAxisLabelLocation":
                    this.abh();
                    break;
            }
        }
        abm() {
            let a = this.wa(this.we);
            if (a == 2 || a == 7) {
                this.abt = 2;
            }
            else {
                this.abt = 0;
            }
            this.abl((b) => b.location = a);
        }
        abh() {
            let a = this.v9(this.wc);
            if (a == 1 || a == 5) {
                this.act = 0;
            }
            else {
                this.act = 2;
            }
            this.abg((b) => b.location = a);
        }
        wa(a) {
            if (a == 0) {
                return 2;
            }
            else if (a == 1) {
                return 3;
            }
            else if (a == 3) {
                return 7;
            }
            else if (a == 2) {
                return 6;
            }
            else {
                if (this.b1 == 1) {
                    return 3;
                }
                else {
                    return 2;
                }
            }
        }
        v9(a) {
            if (a == 1) {
                return 1;
            }
            else if (a == 0) {
                return 0;
            }
            else if (a == 3) {
                return 5;
            }
            else if (a == 2) {
                return 4;
            }
            else {
                return 1;
            }
        }
        get yl() {
            return this.yj;
        }
        set yl(a) {
            let b = this.yl;
            if (a != b) {
                this.yj = a;
                this.sv("XAxisLabel", b, this.yl);
            }
        }
        get ym() {
            return this.yk;
        }
        set ym(a) {
            let b = this.ym;
            if (a != b) {
                this.yk = a;
                this.sv("YAxisLabel", b, this.ym);
            }
        }
        get acd() {
            return this.abx;
        }
        set acd(a) {
            let b = this.acd;
            if (a != b) {
                this.abx = a;
                this.sv("XAxisMajorStroke", b, this.acd);
            }
        }
        get ack() {
            return this.ab4;
        }
        set ack(a) {
            let b = this.ack;
            if (a != b) {
                this.ab4 = a;
                this.sv("YAxisMajorStroke", b, this.ack);
            }
        }
        get xr() {
            return this.wp;
        }
        set xr(a) {
            let b = this.xr;
            if (a != b) {
                this.wp = a;
                this.sv("XAxisMajorStrokeThickness", b, this.xr);
            }
        }
        get x8() {
            return this.w6;
        }
        set x8(a) {
            let b = this.x8;
            if (a != b) {
                this.w6 = a;
                this.sv("YAxisMajorStrokeThickness", b, this.x8);
            }
        }
        get xs() {
            return this.wq;
        }
        set xs(a) {
            let b = this.xs;
            if (a != b) {
                this.wq = a;
                this.sv("XAxisMinorStrokeThickness", b, this.xs);
            }
        }
        get x9() {
            return this.w7;
        }
        set x9(a) {
            let b = this.x9;
            if (a != b) {
                this.w7 = a;
                this.sv("YAxisMinorStrokeThickness", b, this.x9);
            }
        }
        get acf() {
            return this.abz;
        }
        set acf(a) {
            let b = this.acf;
            if (a != b) {
                this.abz = a;
                this.sv("XAxisStrip", b, this.acf);
            }
        }
        get acm() {
            return this.ab6;
        }
        set acm(a) {
            let b = this.acm;
            if (a != b) {
                this.ab6 = a;
                this.sv("YAxisStrip", b, this.acm);
            }
        }
        get acg() {
            return this.ab0;
        }
        set acg(a) {
            let b = this.acg;
            if (a != b) {
                this.ab0 = a;
                this.sv("XAxisStroke", b, this.acg);
            }
        }
        get acn() {
            return this.ab7;
        }
        set acn(a) {
            let b = this.acn;
            if (a != b) {
                this.ab7 = a;
                this.sv("YAxisStroke", b, this.acn);
            }
        }
        get xt() {
            return this.wr;
        }
        set xt(a) {
            let b = this.xt;
            if (a != b) {
                this.wr = a;
                this.sv("XAxisStrokeThickness", b, this.xt);
            }
        }
        get ya() {
            return this.w8;
        }
        set ya(a) {
            let b = this.ya;
            if (a != b) {
                this.w8 = a;
                this.sv("YAxisStrokeThickness", b, this.ya);
            }
        }
        get xu() {
            return this.ws;
        }
        set xu(a) {
            let b = this.xu;
            if (a != b) {
                this.ws = a;
                this.sv("XAxisTickLength", b, this.xu);
            }
        }
        get yb() {
            return this.w9;
        }
        set yb(a) {
            let b = this.yb;
            if (a != b) {
                this.w9 = a;
                this.sv("YAxisTickLength", b, this.yb);
            }
        }
        get ach() {
            return this.ab1;
        }
        set ach(a) {
            let b = this.ach;
            if (a != b) {
                this.ab1 = a;
                this.sv("XAxisTickStroke", b, this.ach);
            }
        }
        get aco() {
            return this.ab8;
        }
        set aco(a) {
            let b = this.aco;
            if (a != b) {
                this.ab8 = a;
                this.sv("YAxisTickStroke", b, this.aco);
            }
        }
        get xv() {
            return this.wt;
        }
        set xv(a) {
            let b = this.xv;
            if (a != b) {
                this.wt = a;
                this.sv("XAxisTickStrokeThickness", b, this.xv);
            }
        }
        get yc() {
            return this.xa;
        }
        set yc(a) {
            let b = this.yc;
            if (a != b) {
                this.xa = a;
                this.sv("YAxisTickStrokeThickness", b, this.yc);
            }
        }
        get zr() {
            return this.yp;
        }
        set zr(a) {
            let b = this.zr;
            if (a != b) {
                this.yp = a;
                this.sv("XAxisTitle", b, this.zr);
            }
        }
        get aaw() {
            return this.yt;
        }
        set aaw(a) {
            let b = this.aaw;
            if (a != b) {
                this.yt = a;
                this.sv("YAxisTitle", b, this.aaw);
            }
        }
        get ace() {
            return this.aby;
        }
        set ace(a) {
            let b = this.ace;
            if (a != b) {
                this.aby = a;
                this.sv("XAxisMinorStroke", b, this.ace);
            }
        }
        get acl() {
            return this.ab5;
        }
        set acl(a) {
            let b = this.acl;
            if (a != b) {
                this.ab5 = a;
                this.sv("YAxisMinorStroke", b, this.acl);
            }
        }
        get xm() {
            return this.wk;
        }
        set xm(a) {
            let b = this.xm;
            if (a != b) {
                this.wk = a;
                this.sv("XAxisLabelAngle", b, this.xm);
            }
        }
        get x3() {
            return this.w1;
        }
        set x3(a) {
            let b = this.x3;
            if (a != b) {
                this.w1 = a;
                this.sv("YAxisLabelAngle", b, this.x3);
            }
        }
        get xl() {
            return this.wj;
        }
        set xl(a) {
            let b = this.xl;
            if (a != b) {
                this.wj = a;
                this.sv("XAxisExtent", b, this.xl);
            }
        }
        get x2() {
            return this.w0;
        }
        set x2(a) {
            let b = this.x2;
            if (a != b) {
                this.w0 = a;
                this.sv("YAxisExtent", b, this.x2);
            }
        }
        get xw() {
            return this.wu;
        }
        set xw(a) {
            let b = this.xw;
            if (a != b) {
                this.wu = a;
                this.sv("XAxisTitleAngle", b, this.xw);
            }
        }
        get yd() {
            return this.xb;
        }
        set yd(a) {
            let b = this.yd;
            if (a != b) {
                this.xb = a;
                this.sv("YAxisTitleAngle", b, this.yd);
            }
        }
        get wh() {
            return this.wf;
        }
        set wh(a) {
            let b = this.wh;
            if (a != b) {
                this.wf = a;
                this.sv("XAxisInverted", b, this.wh);
            }
        }
        get wi() {
            return this.wg;
        }
        set wi(a) {
            let b = this.wi;
            if (a != b) {
                this.wg = a;
                this.sv("YAxisInverted", b, this.wi);
            }
        }
        get abs() {
            return this.abp;
        }
        set abs(a) {
            let b = this.abs;
            if (a != b) {
                this.abp = a;
                this.sv("XAxisTitleAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.abs));
            }
        }
        get acv() {
            return this.acs;
        }
        set acv(a) {
            let b = this.acv;
            if (a != b) {
                this.acs = a;
                this.sv("YAxisTitleAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.acv));
            }
        }
        get abr() {
            return this.abo;
        }
        set abr(a) {
            let b = this.abr;
            if (a != b) {
                this.abo = a;
                this.sv("XAxisLabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.abr));
            }
        }
        get_abt() {
            return this.abq;
        }
        set_abt(a) {
            let b = this.abt;
            if (a != b) {
                this.abq = a;
                this.sv("YAxisLabelHorizontalAlignment", enumGetBox(HorizontalAlignment_$type, b), enumGetBox(HorizontalAlignment_$type, this.abt));
            }
        }
        get abt() {
            return this.get_abt();
        }
        set abt(a) {
            this.set_abt(a);
        }
        get act() {
            return this.acq;
        }
        set act(a) {
            let b = this.act;
            if (a != b) {
                this.acq = a;
                this.sv("XAxisLabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.act));
            }
        }
        get acu() {
            return this.acr;
        }
        set acu(a) {
            let b = this.acu;
            if (a != b) {
                this.acr = a;
                this.sv("YAxisLabelVerticalAlignment", enumGetBox(VerticalAlignment_$type, b), enumGetBox(VerticalAlignment_$type, this.acu));
            }
        }
        get acy() {
            return this.acw;
        }
        set acy(a) {
            let b = this.acy;
            if (a != b) {
                this.acw = a;
                this.sv("XAxisLabelVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.acy));
            }
        }
        get acz() {
            return this.acx;
        }
        set acz(a) {
            let b = this.acz;
            if (a != b) {
                this.acx = a;
                this.sv("YAxisLabelVisibility", enumGetBox(Visibility_$type, b), enumGetBox(Visibility_$type, this.acz));
            }
        }
        get_we() {
            return this.wd;
        }
        set_we(a) {
            let b = this.we;
            if (a != b) {
                this.wd = a;
                this.sv("YAxisLabelLocation", enumGetBox(YAxisLabelLocation_$type, b), enumGetBox(YAxisLabelLocation_$type, this.we));
            }
        }
        get we() {
            return this.get_we();
        }
        set we(a) {
            this.set_we(a);
        }
        get_wc() {
            return this.wb;
        }
        set_wc(a) {
            let b = this.wc;
            if (a != b) {
                this.wb = a;
                this.sv("XAxisLabelLocation", enumGetBox(XAxisLabelLocation_$type, b), enumGetBox(XAxisLabelLocation_$type, this.wc));
            }
        }
        get wc() {
            return this.get_wc();
        }
        set wc(a) {
            this.set_wc(a);
        }
        get y3() {
            return this.yn;
        }
        set y3(a) {
            let b = this.yn;
            if (a != b) {
                this.yn = a;
                this.sv("XAxisLabelFormat", b, this.yn);
            }
        }
        get v1() {
            return this.vz;
        }
        set v1(a) {
            let b = this.vz;
            if (a != b) {
                this.vz = a;
                this.sv("XAxisLabelFormatSpecifiers", b, this.vz);
            }
        }
        get z8() {
            return this.yr;
        }
        set z8(a) {
            let b = this.yr;
            if (a != b) {
                this.yr = a;
                this.sv("YAxisLabelFormat", b, this.yr);
            }
        }
        get v2() {
            return this.v0;
        }
        set v2(a) {
            let b = this.v0;
            if (a != b) {
                this.v0 = a;
                this.sv("YAxisLabelFormatSpecifiers", b, this.v0);
            }
        }
    }
    XYChart.$t = /*@__PURE__*/ markType(XYChart, 'XYChart', DomainChart.$);
    return XYChart;
})();
