/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { ShapeSeriesBase } from "./ShapeSeriesBase";
import { ShapeAxisInfoCache } from "./ShapeAxisInfoCache";
import { StyleSelector } from "./StyleSelector";
import { DependencyProperty } from "igniteui-react-core";
import { Style } from "igniteui-react-core";
import { MarkerType_$type } from "./MarkerType";
import { DataTemplate } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
import { CollisionAvoidanceType_$type } from "./CollisionAvoidanceType";
import { MarkerOutlineMode_$type } from "./MarkerOutlineMode";
import { MarkerFillMode_$type } from "./MarkerFillMode";
import { Rect } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { Base, runOn, enumGetBox, Number_$type, typeCast, fromEnum, markType, markDep, PointUtil } from "igniteui-react-core";
import { Dictionary$2 } from "igniteui-react-core";
import { OwnedPoint } from "./OwnedPoint";
import { ShapeSeriesViewBase } from "./ShapeSeriesViewBase";
import { Marker } from "./Marker";
import { MarkerSeries } from "./MarkerSeries";
import { BrushUtil } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { HashPool$2 } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { SeriesPointOfInterest } from "./SeriesPointOfInterest";
import { RectUtil } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { NumericMarkerManager } from "./NumericMarkerManager";
import { DataTemplateMeasureInfo } from "igniteui-react-core";
import { Size } from "igniteui-react-core";
import { Defaults } from "./Defaults";
import { DataTemplatePassInfo } from "igniteui-react-core";
import { DataTemplateRenderInfo } from "igniteui-react-core";
import { MarkerVisualData } from "./MarkerVisualData";
import { stringIsNullOrEmpty } from "igniteui-react-core";
/**
 * @hidden
 */
export let ScatterPolygonSeries = /*@__PURE__*/ (() => {
    class ScatterPolygonSeries extends ShapeSeriesBase {
        get_ea() {
            return true;
        }
        get_d5() {
            return true;
        }
        constructor() {
            super();
            this.td = null;
            this.ta = new ScalerParams(1, ScatterPolygonSeries.uj, ScatterPolygonSeries.uj, false);
            this.tb = new ScalerParams(1, ScatterPolygonSeries.uj, ScatterPolygonSeries.uj, false);
            this.tz = null;
            this.s5 = 1;
            this.s1 = 1;
            this.ab = ScatterPolygonSeries.$;
        }
        rk() {
            return this.tf();
        }
        sj(a) {
            let b = a;
            b.cv(this.ul);
            b.cw(this.te);
            super.sj(a);
            if (this.cy(a)) {
                return;
            }
            let c, d;
            let e = a.getViewInfo(c, d);
            c = e.p0;
            d = e.p1;
            let f = this.getEffectiveViewport1(a);
            this.ta = new ScalerParams(1, d, c, this.qt.cg);
            this.ta.c = f;
            this.tb = new ScalerParams(1, d, c, this.qv.cg);
            this.tb.c = f;
            if (c.width < 1 || c.height < 1) {
                return;
            }
            this.td = ((() => {
                let $ret = new ShapeAxisInfoCache();
                $ret.a = this.qt;
                $ret.b = this.qv;
                $ret.e = this.qt.cg;
                $ret.f = this.qv.cg;
                $ret.d = this.cl;
                $ret.c = this.q3;
                return $ret;
            })());
            if (this.tf()) {
                let g = new Dictionary$2(Base.$, OwnedPoint.$, 0);
                b.dd.l(g, 400, d, c, this.fx);
                b.dd.j(g, false);
                if (this.ri()) {
                    this.tw(a);
                }
            }
        }
        tw(a) {
            a.dh = true;
            this.q0.ay(this, this.ri(), runOn(this, this.qi));
            let b = this.q0.d;
            let c = b != null;
            let d = this.getEffectiveViewport1(a);
            let e = this.cl == null ? 0 : this.cl.count;
            a.dt((f) => {
                if (f._visibility == 0) {
                    let g = f.ak;
                    let h = f.content;
                    if (h == null) {
                        h = new DataContext();
                        f.content = h;
                    }
                    if (c) {
                        this.se(g, e, a.q);
                    }
                    this.q0.ac(f, h);
                }
            });
        }
        tf() {
            return this.tz != null && ((this.s9 != 1 && this.s9 != 0) || this.t0 != null);
        }
        by() {
            return new ScatterPolygonSeriesView(this);
        }
        l4(a) {
            super.l4(a);
            this.tc = a;
        }
        get_hasMarkers() {
            return true;
        }
        pc() {
            return this.uf;
        }
        pd() {
            return this.ug;
        }
        nj() {
            return this.ty;
        }
        i2() {
            return this.i3(this, this.tz);
        }
        f6() {
            return this.th;
        }
        get s6() {
            return this.s5;
        }
        set s6(a) {
            this.s5 = a;
        }
        s8() {
            if (this.s7 == 0) {
                return 1;
            }
            return this.s7;
        }
        m5(a) {
            super.m5(a);
            this.s7 = a;
        }
        get s2() {
            return this.s1;
        }
        set s2(a) {
            this.s1 = a;
        }
        s4() {
            if (this.s3 == 0) {
                return 2;
            }
            return this.s3;
        }
        m4(a) {
            super.m4(a);
            this.s3 = a;
        }
        m6(a) {
            super.m6(a);
            this.th = a;
        }
        m1() {
            super.m1();
            if (this.index < 0) {
                return;
            }
            if (this.t0 != null) {
                this.tc.ds();
                this.tc.dp();
            }
            else {
                let a = MarkerSeries.qm(this, this.s9);
                let b = MarkerSeries.qu(a);
                if (b == null) {
                    this.ty = MarkerSeries.q8;
                }
                else {
                    this.tc.dl(b);
                }
            }
            if (this.uh != null && this.s9 != 13) {
                this.tc.dq();
                this.tc.dm();
            }
            else {
                if (this.s9 == 13) {
                    this.uf = this.b1.bq();
                }
                else {
                    if (this.s2 != 2) {
                        if (this.ce != null) {
                            let c = this.ce.sl(this.index);
                            if (!isNaN_(this.fw) && this.fw != 1) {
                                c = BrushUtil.p(c, this.fw);
                            }
                            this.uf = c;
                        }
                        else {
                            this.uf = null;
                        }
                    }
                }
            }
            if (this.ui != null) {
                this.tc.dr();
                this.tc.dn();
            }
            else {
                if (this.s9 == 13) {
                    this.ug = this.b1.bq();
                }
                else {
                    if (this.s7 == 2) {
                        this.ug = this.uf;
                    }
                    else {
                        this.ug = this.ce == null ? null : this.ce.sm(this.index);
                    }
                }
            }
            if (this.s2 == 2 && this.uh == null && this.s9 != 13) {
                if (this.ug != null) {
                    let d = this.ug;
                    if (!isNaN_(this.fw) && this.fw != 1) {
                        d = BrushUtil.p(d, this.fw);
                    }
                    this.uf = d;
                }
                else {
                    this.uf = null;
                }
            }
        }
        lz() {
            super.lz();
            this.s6 = this.s8();
            this.s2 = this.s4();
        }
        l9(a, b, c, d) {
            super.l9(a, b, c, d);
            switch (b) {
                case ScatterPolygonSeries.$$p[3]:
                case ScatterPolygonSeries.$$p[11]:
                case ScatterPolygonSeries.$$p[7]:
                case ScatterPolygonSeries.$$p[9]:
                case ScatterPolygonSeries.$$p[10]:
                    this.m1();
                    this.l6();
                    break;
                case ScatterPolygonSeries.$$p[6]:
                    this.s6 = this.s8();
                    this.m1();
                    this.l6();
                    break;
                case ScatterPolygonSeries.$$p[5]:
                    this.s2 = this.s4();
                    this.m1();
                    this.l6();
                    break;
                case ScatterPolygonSeries.$$p[2]:
                    this.tz = d;
                    if (c == MarkerSeries.q8 || d == MarkerSeries.q8 || (c == null || d != null)) {
                        this.tc.du();
                        this.mn(false);
                    }
                    this.b1.bj();
                    if (this.toolTip != null && this.d2) {
                        this.a7.a$aj(this, this.toolTip);
                    }
                    this.mn(false);
                    this.lu();
                    break;
                case ScatterPolygonSeries.$$p[12]:
                    this.tc.cv(this.ul);
                    this.mn(false);
                    this.lu();
                    break;
                case ScatterPolygonSeries.$$p[13]:
                    this.tc.cw(this.te);
                    this.mn(false);
                    this.lu();
                    break;
                case ScatterPolygonSeries.$$p[4]:
                    this.mn(false);
                    this.lu();
                    break;
                case ScatterPolygonSeries.$$p[0]:
                case ScatterPolygonSeries.$$p[1]:
                    if (this.tf()) {
                        this.mn(false);
                    }
                    break;
            }
        }
        au(a, b) {
            let c = this.tc.b1(a);
            let d = null;
            if (c != null) {
                d = c.content;
            }
            if (d != null) {
                return d;
            }
            return super.au(a, b);
        }
        tx(a, b) {
            let c = new List$1(Base.$, 0);
            for (let d of fromEnum(b.c)) {
                if (!a.containsKey(d)) {
                    c.add1(d);
                }
            }
            for (let e of fromEnum(c)) {
                b.h(e);
            }
        }
        c2(a, b, c, d) {
            if (!this.hasMarkers) {
                return false;
            }
            let e = this.qt;
            let f = new ScalerParams(1, this.ce.ta, this.p7, e.cg);
            f.c = this.getEffectiveViewport1(this.b1);
            let g = this.qv;
            let h = new ScalerParams(1, this.ce.ta, this.p7, g.cg);
            h.c = this.getEffectiveViewport1(this.b1);
            a.clear();
            this.tc.dt((i) => {
                if (i._visibility == 0) {
                    let j = new SeriesPointOfInterest();
                    let k = i.n;
                    let l = i.o;
                    if (k < this.p7.left || k > this.p7.right || l < this.p7.top || l > this.p7.bottom) {
                        return;
                    }
                    j.b = e.el(k, f);
                    j.c = g.el(l, h);
                    j.a = i.content;
                    a.add(j);
                }
            });
            return true;
        }
        sz(a, b, c, d, e) {
            if (c == null || c.length != this.td.d.count) {
                c = new Array(this.td.d.count);
                for (let f = 0; f < this.td.d.count; f++) {
                    c[f] = PointUtil.create();
                }
            }
            let g = ((() => {
                let $ret = new ScalerParams(1, d, e, this.qt.cg);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let h = ((() => {
                let $ret = new ScalerParams(1, d, e, this.qv.cg);
                $ret.c = this.getEffectiveViewport1(a);
                return $ret;
            })());
            let i = this.pz(a);
            let j = this.td.a.el(i.left, g);
            let k = this.td.a.el(i.right, g);
            let l = this.td.b.el(i.bottom, h);
            let m = this.td.b.el(i.top, h);
            if (this.td.e) {
                let n = j;
                j = k;
                k = n;
            }
            if (this.td.f) {
                let o = l;
                l = m;
                m = o;
            }
            let p = this.td;
            let q = p.a;
            let r = p.b;
            let s;
            let t;
            let u = g.d.left;
            let v = g.d.right;
            let w = h.d.top;
            let x = h.d.bottom;
            for (let y = 0; y < this.td.d.count; y++) {
                s = 0;
                t = 0;
                let z = null;
                let aa = a.b9.tryGetValue(y, z);
                z = aa.p1;
                if (z == null) {
                    c[y].x = NaN;
                    c[y].y = NaN;
                }
                else {
                    let ab = z.c;
                    let ac = RectUtil.l(ab);
                    s = ac.x;
                    t = ac.y;
                    if (s >= u && s <= v && t >= w && t <= x) {
                        c[y].x = s;
                        c[y].y = t;
                    }
                    else {
                        c[y].x = NaN;
                        c[y].y = NaN;
                    }
                }
            }
            return c;
        }
        tg(a, b) {
            if (b == null) {
                b = new List$1(Number_$type, 2, a.e);
            }
            else {
                b.clear();
            }
            let c = 0;
            let d = this.cl;
            for (let e of fromEnum(a.c)) {
                b.add(d.indexOf(e));
                c++;
            }
            return b;
        }
    }
    ScatterPolygonSeries.$t = /*@__PURE__*/ markType(ScatterPolygonSeries, 'ScatterPolygonSeries', ShapeSeriesBase.$);
    ScatterPolygonSeries.uj = /*@__PURE__*/ new Rect(0, 0, 0, 1, 1);
    ScatterPolygonSeries.$$p = /*@__PURE__*/ markDep(DependencyProperty, PropertyMetadata, ScatterPolygonSeries, 'raisePropertyChanged', ['ActualMarkerBrush:uf:t1', [Brush.$], 'ActualMarkerOutline:ug:t2', [Brush.$], 'ActualMarkerTemplate:ty:t3', [DataTemplate.$, null], 'MarkerBrush:uh:t4', [Brush.$], 'MarkerCollisionAvoidance:s0:t5', [CollisionAvoidanceType_$type, /*@__PURE__*/ enumGetBox(CollisionAvoidanceType_$type, 0)], 'MarkerFillMode:s3:t6', [MarkerFillMode_$type, /*@__PURE__*/ enumGetBox(MarkerFillMode_$type, 0)], 'MarkerOutlineMode:s7:t7', [MarkerOutlineMode_$type, /*@__PURE__*/ enumGetBox(MarkerOutlineMode_$type, 0)], 'MarkerOutline:ui:t8', [Brush.$], 'MarkerStyle:uk:t9', [Style.$], 'MarkerTemplate:t0:ua', [DataTemplate.$, null], 'MarkerThickness:th:ub', [1, /*@__PURE__*/ DeviceUtils.g(2)], 'MarkerType:s9:uc', [MarkerType_$type, /*@__PURE__*/ enumGetBox(MarkerType_$type, 1)], 'ShapeStyle:ul:ud', [Style.$, null], 'ShapeStyleSelector:te:ue', [StyleSelector.$, null]]);
    return ScatterPolygonSeries;
})();
/**
 * @hidden
 */
export let ScatterPolygonSeriesView = /*@__PURE__*/ (() => {
    class ScatterPolygonSeriesView extends ShapeSeriesViewBase {
        constructor(a) {
            super(a);
            this.dh = false;
            this.c8 = null;
            this.dj = null;
            this.de = null;
            this.dc = null;
            this.dg = false;
            this.df = null;
            this.dk = null;
            this.c9 = new Marker();
            this.d1 = null;
            this.c9 = new Marker();
            this.c9.content = new DataContext();
            this.de = a;
            this.df = new HashPool$2(Base.$, Marker.$);
            this.dk = new List$1(Marker.$, 0);
            this.dv(this.df);
            this.dc = new NumericMarkerManager(1, (b) => this.df.item(b), (b) => this.de.td.d.item(b), runOn(this, this.dz), runOn(this, this.c7), runOn(this, this.di), () => this.de.s0);
            this.dc.q = runOn(this, this.d2);
        }
        as() {
            super.as();
            if (!this.q) {
                this.de.ui = Defaults.am;
                this.de.g4 = Defaults.z;
                this.de.th = Defaults.y;
                this.de.s9 = Defaults.f;
                this.de.s3 = Defaults.b;
            }
        }
        get dd() {
            return this.dc;
        }
        dz(a) {
            this.de.tx(a, this.df);
        }
        c7() {
            this.c8 = this.de.sz(this, this.df, this.c8, this.bv, this.bu);
            return this.c8;
        }
        di() {
            this.dj = this.de.tg(this.df, this.dj);
            return this.dj;
        }
        c2(a, b) {
            return this.c3(a, b, true);
        }
        cj(a, b, c) {
            super.cj(a, b, c);
            ShapeSeriesViewBase.ci(this, a, b);
        }
        ch(a, b) {
            let c = a;
            if (c == null) {
                return;
            }
            c.an = b;
        }
        dt(a) {
            this.df.f(a);
        }
        dv(a) {
            a.create = runOn(this, this.db);
            a.destroy = runOn(this, this.dx);
            a.activate = runOn(this, this.dw);
            a.disactivate = runOn(this, this.dy);
        }
        db() {
            let a = new Marker();
            if (!this.dg) {
                a.content = ((() => {
                    let $ret = new DataContext();
                    $ret.series = this.e;
                    return $ret;
                })());
            }
            a.ah = this.e.ty;
            this.dk.add(a);
            return a;
        }
        b1(a) {
            let b = this.da(a, 0);
            if (b == null) {
                b = this.da(a, 3);
            }
            return b;
        }
        da(a, b) {
            let c;
            let d;
            let e;
            let f;
            for (let g = this.dk.count - 1; g >= 0; g--) {
                let h = this.dk._inner[g];
                if (h._visibility == 1 || h._opacity == 0) {
                    continue;
                }
                c = (h.m / 2) + b;
                d = (h.l / 2) + b;
                e = h.ai;
                f = h.aj;
                if ((h.n + e) - c <= a.x && (h.n + e) + c >= a.x && (h.o + f) - d <= a.y && (h.o + f) + d >= a.y) {
                    return h;
                }
            }
            return null;
        }
        dx(a) {
            a.content = null;
            this.dk.remove(a);
        }
        dw(a) {
            a._visibility = 0;
        }
        dy(a) {
            if (a.content != null) {
                (typeCast(DataContext.$, a.content)).item = null;
            }
            a._visibility = 1;
        }
        d0(a) {
            this.dg = a;
        }
        bh(a, b) {
            super.bh(a, b);
            if (!this.dh) {
                let c = a;
                let d = c.content;
                if (d != null) {
                    if (this.de.uf != null) {
                        d.actualItemBrush = this.de.uf;
                    }
                    else {
                        d.actualItemBrush = this.b3.o5;
                    }
                    if (this.de.uf != null) {
                        d.outline = this.de.ug;
                    }
                    else {
                        d.outline = this.b3.o8;
                    }
                    d.thickness = this.de.th;
                }
            }
        }
        bi(a, b) {
            super.bi(a, b);
            let c = a;
            this.c9._visibility = c._visibility;
            this.c9.ah = c.ah;
            this.c9.width = c.width;
            this.c9.height = c.height;
            this.c9.m = c.m;
            this.c9.l = c.l;
            this.c9.n = c.n;
            this.c9.o = c.o;
            let d = this.bp(b);
            let e = this.c9.content;
            let f = c.content;
            e.item = f.item;
            e.series = f.series;
            e.thickness = f.thickness;
            if (e != null) {
                e.actualItemBrush = d;
                e.outline = d;
                e.thickness = this.de.th + 3;
            }
        }
        a5(a, b) {
            super.a5(a, b);
            let c = new DataTemplatePassInfo();
            c.isHitTestRender = b;
            c.context = a.h();
            c.viewportTop = this.bu.top;
            c.viewportLeft = this.bu.left;
            c.viewportWidth = this.bu.width;
            c.viewportHeight = this.bu.height;
            c.passID = "Markers";
            let d = new DataTemplateRenderInfo();
            d.passInfo = c;
            d.isHitTestRender = b;
            let e = new DataTemplateMeasureInfo();
            e.passInfo = c;
            let f = false;
            let g = a.h();
            e.context = g;
            d.context = g;
            let h = 0;
            let i = 0;
            if (this.de.ty != null && this.de.ty.passStarting != null) {
                this.de.ty.passStarting(c);
            }
            for (let j = 0; j < this.dk.count; j++) {
                let k = this.dk._inner[j];
                if (k._visibility == 1) {
                    continue;
                }
                this.bg(k, j, b);
                if (b) {
                    k = this.c9;
                }
                if (!f) {
                    e.width = k.width;
                    e.height = k.height;
                    e.renderOffsetX = 0;
                    e.renderOffsetY = 0;
                    e.renderContext = a;
                    let l = k.ah;
                    if (l.measure != null) {
                        e.data = k.content;
                        l.measure(e);
                        f = e.isConstant;
                        if (f) {
                            h = e.width;
                            i = e.height;
                        }
                    }
                    d.availableWidth = e.width;
                    d.availableHeight = e.height;
                    d.renderOffsetX = e.renderOffsetX;
                    d.renderOffsetY = e.renderOffsetY;
                    d.renderContext = a;
                }
                else {
                    d.availableWidth = h;
                    d.availableHeight = i;
                }
                if (!isNaN_(k.width) && !isInfinity(k.width)) {
                    d.availableWidth = k.width;
                }
                if (!isNaN_(k.height) && !isInfinity(k.height)) {
                    d.availableHeight = k.height;
                }
                a.q(d, k);
                k.m = d.availableWidth;
                k.l = d.availableHeight;
                k.ai = d.renderOffsetX;
                k.aj = d.renderOffsetY;
            }
            if (this.de.ty != null && this.de.ty.passCompleted != null) {
                this.de.ty.passCompleted(c);
            }
        }
        ds() {
            this.de.ty = null;
        }
        dp() {
            this.de.ty = null;
            this.de.ty = this.de.t0;
        }
        dq() {
            this.de.uf = null;
        }
        dm() {
            this.de.uf = null;
            if (!isNaN_(this.e.fw) && this.e.fw != 1) {
                let a = BrushUtil.p(this.de.uh, this.e.fw);
                this.de.uf = a;
            }
            else {
                this.de.uf = this.de.uh;
            }
        }
        dr() {
            this.de.ug = null;
        }
        dn() {
            this.de.ug = null;
            this.de.ug = this.de.ui;
        }
        dl(a) {
            switch (a) {
                case "CircleMarkerTemplate":
                    this.de.ty = this.de.ce.pm;
                    break;
                case "TriangleMarkerTemplate":
                    this.de.ty = this.de.ce.pv;
                    break;
                case "PyramidMarkerTemplate":
                    this.de.ty = this.de.ce.ps;
                    break;
                case "SquareMarkerTemplate":
                    this.de.ty = this.de.ce.pt;
                    break;
                case "DiamondMarkerTemplate":
                    this.de.ty = this.de.ce.pn;
                    break;
                case "PentagonMarkerTemplate":
                    this.de.ty = this.de.ce.pq;
                    break;
                case "HexagonMarkerTemplate":
                    this.de.ty = this.de.ce.po;
                    break;
                case "TetragramMarkerTemplate":
                    this.de.ty = this.de.ce.pq;
                    break;
                case "PentagramMarkerTemplate":
                    this.de.ty = this.de.ce.pr;
                    break;
                case "HexagramMarkerTemplate":
                    this.de.ty = this.de.ce.pp;
                    break;
            }
        }
        du() {
            for (let a of fromEnum(this.dk)) {
                a.ah = this.de.ty;
            }
            this.aq();
        }
        d2(a) {
            if (this.d1 == null) {
                this.d1 = new DataTemplateMeasureInfo();
                this.d1.context = this.k.h();
            }
            this.d1.width = a.width;
            this.d1.height = a.height;
            this.d1.data = a.content;
            let b = a.ah;
            if (b.measure != null) {
                b.measure(this.d1);
            }
            return new Size(1, this.d1.width, this.d1.height);
        }
        al(a) {
            let b = a;
            super.al(b);
            for (let c of fromEnum(this.df.c)) {
                let d = this.df.item(c);
                if (d._visibility != 1) {
                    let e = typeCast(ScatterPolygonSeries.$, this.e);
                    let f = this.e.a9.getMarkerVisualData(e, d, e.ty);
                    b.markerShapes.add(typeCast(MarkerVisualData.$, f));
                }
            }
        }
        getDefaultTooltipTemplate() {
            let a = "<div class='ui-chart-default-tooltip-content'><span";
            let b = this.e.a7.a$r(this.e);
            if (!stringIsNullOrEmpty(b)) {
                a += " style='color:" + b + "'";
            }
            a += ">" + this.de.title + "</span><br/>";
            a += "</div>";
            return a;
        }
    }
    ScatterPolygonSeriesView.$t = /*@__PURE__*/ markType(ScatterPolygonSeriesView, 'ScatterPolygonSeriesView', ShapeSeriesViewBase.$);
    return ScatterPolygonSeriesView;
})();
