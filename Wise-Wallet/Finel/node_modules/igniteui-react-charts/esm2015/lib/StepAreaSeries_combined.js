/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { HorizontalAnchoredCategorySeries } from "./HorizontalAnchoredCategorySeries";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { typeCast, Array_$type, runOn, markType } from "igniteui-react-core";
import { ISortingAxis_$type } from "./ISortingAxis";
import { List$1 } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { intDivide, isNaN_ } from "igniteui-react-core";
import { AnchoredCategorySeriesView } from "./AnchoredCategorySeriesView";
import { Defaults } from "./Defaults";
/**
 * @hidden
 */
export let StepAreaSeries = /*@__PURE__*/ (() => {
    class StepAreaSeries extends HorizontalAnchoredCategorySeries {
        by() {
            return new StepAreaSeriesView(this);
        }
        l4(a) {
            super.l4(a);
            this.vk = a;
        }
        get_dg() {
            return true;
        }
        get_df() {
            return true;
        }
        get_ek() {
            return true;
        }
        get_d5() {
            return true;
        }
        b4() {
            if (this.b5 == 0) {
                return 2;
            }
            return super.b4();
        }
        constructor() {
            super();
            this.vj = null;
            this.vj = new CategoryLineRasterizer();
            this.ab = StepAreaSeries.$;
        }
        preferredCategoryMode(a) {
            return typeCast(ISortingAxis_$type, a) !== null ? 0 : 1;
        }
        k2(a, b) {
            super.k2(a, b);
            let c = b;
            c.db();
        }
        vl(a, b, c, d, e) {
            if (b) {
                if (e) {
                    if ((a & 1) == 0 || ((intDivide(a, 2)) + 1) >= c.f.count) {
                        return c.f._inner[(intDivide(a, 2))][0];
                    }
                    return c.f._inner[(intDivide(a, 2)) + 1][0];
                }
                return c.f._inner[(intDivide(a, 2))][0] + ((a & 1) == 1 ? -d : d);
            }
            if (e) {
                if ((a & 1) == 0 || ((intDivide(a, 2)) + 1) >= c.f.count) {
                    return c.f._inner[(intDivide(a, 2))][0];
                }
                return c.f._inner[(intDivide(a, 2)) + 1][0];
            }
            return c.f._inner[(intDivide(a, 2))][0] + ((a & 1) == 0 ? -d : d);
        }
        r7() {
            return 1;
        }
        gd(a, b, c, d, e, f, g, h) {
            let i = NaN;
            if (c >= 0 && c < b.count) {
                i = b.item(c);
            }
            let j = NaN;
            if (d >= 0 && d < b.count) {
                j = b.item(d);
            }
            if (f == 0) {
                return j;
            }
            if (e == b.count - 1) {
                return i;
            }
            if (isNaN_(j) && g != 0 && a <= 0.5 && !h) {
                return i;
            }
            if (isNaN_(i) && g != 0 && a >= 0.5 && !h) {
                return j;
            }
            if (a > 0.5) {
                return j;
            }
            return i;
        }
        bq() {
            if (this.br == 0) {
                return 2;
            }
            else {
                return super.bq();
            }
        }
        tf(a, b) {
            super.tf(a, b);
            let c = b.bv;
            let d = b.bu;
            let e = this.getEffectiveViewport1(b);
            let f = typeCast(ISortingAxis_$type, this.u0) != null;
            let g = this.u0 != null ? 0.5 * this.u0.getCategorySize(c, d, e) : 0;
            if (this.u0 != null && this.u0.cg) {
                g = -g;
            }
            let h = a.f.count * 2;
            let i = new List$1(Array_$type, 2, h);
            this.r5.a2(this, this.sp(), runOn(this, this.rq), this.sx(b), this.sy(b));
            let j = false;
            let k = this.r5.b;
            if (k != null) {
                j = true;
            }
            for (let l = 0; l < h; l++) {
                let m = new Array(4);
                m[0] = this.vl(l, false, a, g, f);
                m[1] = a.f._inner[(intDivide(l, 2))][1];
                m[2] = this.vl(l, true, a, g, f);
                m[3] = a.f._inner[(intDivide(l, 2))][2];
                i.add(m);
            }
            let n = this.r6.cr.d;
            if (j) {
                let o = new ScalerParams(0, b.bv, b.bu, this.u0.cg, e);
                this.tb(i, -1, this.valueColumn.count, this.u0, o, b.q);
            }
            let p = typeCast(StepAreaSeriesView.$, b);
            let q = p.dp;
            let r = p.dq;
            let s = p.dm;
            let t = p.dn;
            this.r5.ad(q, true, false, true, true);
            this.r5.ad(r, true, false, true, true);
            this.r5.ad(s, false, true, false, false);
            this.r5.ad(t, false, true, false, false);
            if (b.cv(a)) {
                p.dd(h, i, false, n, this.fx, (u, v, w, x, y) => this.uh(u, 2 * a.f.count, b), 1, this.to(i, i.count - 1, b.bu, b.bv, true));
                b.cy(a);
            }
            let u = this.fetchYAxis();
            p.dm._opacity = this.r5.j * this.fu;
            p.dn._opacity = 0.5 * this.r5.j * this.fu;
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    StepAreaSeries.$t = /*@__PURE__*/ markType(StepAreaSeries, 'StepAreaSeries', HorizontalAnchoredCategorySeries.$);
    return StepAreaSeries;
})();
/**
 * @hidden
 */
export let StepAreaSeriesView = /*@__PURE__*/ (() => {
    class StepAreaSeriesView extends AnchoredCategorySeriesView {
        constructor(a) {
            super(a);
            this.da = null;
            this.di = new Path();
            this.dk = new Path();
            this.dj = new Path();
            this.dl = new Path();
            this.de = new Path();
            this.dg = new Path();
            this.df = new Path();
            this.dh = new Path();
            this.da = a;
        }
        as() {
            super.as();
            if (!this.q) {
                this.da.ql = Defaults.c;
            }
        }
        get dm() {
            return this.di;
        }
        get dp() {
            return this.dk;
        }
        get dn() {
            return this.dj;
        }
        get dq() {
            return this.dl;
        }
        db() {
            this.di.an = null;
            this.dj.an = null;
            this.dk.an = null;
            this.dl.an = null;
            this.aq();
        }
        dc(a, b, c, d, e, f, g) {
            this.dc(a, b, c, d, e, f, g);
        }
        dd(a, b, c, d, e, f, g, h) {
            this.da.vj.a = typeCast(ISortingAxis_$type, this.ct.fetchXAxis()) !== null ? true : false;
            this.da.vj.j(this.di, this.dk, this.dj, this.dl, a, b, c, d, e, f, g, h);
            this.aq();
        }
        bc() {
            super.bc();
            this.de.an = this.di.an;
            this.dg.an = this.dk.an;
            this.df.an = this.dj.an;
            this.dh.an = this.dl.an;
            let a = this.bo();
            this.de._fill = a;
            this.de._opacity = 1;
            this.df._fill = a;
            this.df._opacity = 1;
            this.dg._stroke = a;
            this.dg.ad = this.e.fy + 3;
            this.dh._stroke = a;
            this.dh.ad = this.e.fy + 3;
        }
        a6(a, b) {
            super.a6(a, b);
            if (b) {
                a.t(this.de);
                a.t(this.df);
                a.t(this.dg);
                a.t(this.dh);
            }
            else {
                a.t(this.di);
                a.t(this.dj);
                a.t(this.dk);
                a.t(this.dl);
            }
        }
        al(a) {
            super.al(a);
            this.e.a9.exportPathData(a, this.dk, "lowerShape", ["Lower"]);
            this.e.a9.exportPathData(a, this.dl, "upperShape", ["Upper", "Main"]);
            this.e.a9.exportPathData(a, this.dj, "translucentShape", ["Translucent"]);
            this.e.a9.exportPathData(a, this.di, "fillShape", ["Fill"]);
        }
    }
    StepAreaSeriesView.$t = /*@__PURE__*/ markType(StepAreaSeriesView, 'StepAreaSeriesView', AnchoredCategorySeriesView.$);
    return StepAreaSeriesView;
})();
