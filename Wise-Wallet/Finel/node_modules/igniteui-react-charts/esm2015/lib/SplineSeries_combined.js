/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { SplineSeriesBase } from "./SplineSeriesBase";
import { CategoryLineRasterizer } from "./CategoryLineRasterizer";
import { typeCast, runOn, markType } from "igniteui-react-core";
import { Path } from "igniteui-react-core";
import { ScalerParams } from "./ScalerParams";
import { SplineSeriesBaseView } from "./SplineSeriesBaseView";
import { Defaults } from "./Defaults";
import { ISortingAxis_$type } from "./ISortingAxis";
/**
 * @hidden
 */
export let SplineSeries = /*@__PURE__*/ (() => {
    class SplineSeries extends SplineSeriesBase {
        get_ej() {
            return true;
        }
        by() {
            return new SplineSeriesView(this);
        }
        l4(a) {
            super.l4(a);
            this.v4 = a;
        }
        constructor() {
            super();
            this.v3 = null;
            this.v3 = new CategoryLineRasterizer();
            this.ab = SplineSeries.$;
        }
        preferredCategoryMode(a) {
            return 0;
        }
        k2(a, b) {
            super.k2(a, b);
            let c = b;
            c.dd();
        }
        tf(a, b) {
            super.tf(a, b);
            let c = b;
            let d = c.cr.d;
            let e = typeCast(SplineSeriesView.$, b);
            let f = a.f;
            let g = this.getEffectiveViewport1(b);
            this.r5.a2(this, this.sp(), runOn(this, this.rq), this.sx(b), this.sy(b));
            let h = false;
            let i = this.r5.b;
            if (i != null) {
                h = true;
            }
            if (h) {
                let j = new ScalerParams(0, b.bv, b.bu, this.u0.cg, g);
                this.tb(f, -1, this.valueColumn.count, this.u0, j, b.q);
            }
            let k = e.dj;
            let l = e.dk;
            let m = e.di;
            this.r5.ad(k, true, false, true, false);
            this.r5.ad(l, true, false, true, false);
            this.r5.ad(m, false, true, false, false);
            m._opacity = 0.75 * this.r5.j;
            if (b.cv(a)) {
                e.de(f.count, f, true, 1, this.tn(f, f.count - 1, b.bu, b.bv), d, this.fx);
                b.cy(a);
            }
        }
        get useHighMarkerFidelity() {
            return this.ss;
        }
    }
    SplineSeries.$t = /*@__PURE__*/ markType(SplineSeries, 'SplineSeries', SplineSeriesBase.$);
    return SplineSeries;
})();
/**
 * @hidden
 */
export let SplineSeriesView = /*@__PURE__*/ (() => {
    class SplineSeriesView extends SplineSeriesBaseView {
        constructor(a) {
            super(a);
            this.dc = null;
            this.dm = new Path();
            this.dl = new Path();
            this.dn = new Path();
            this.dh = new Path();
            this.dg = new Path();
            this.df = new Path();
            this.dc = a;
        }
        as() {
            super.as();
            if (!this.q) {
                this.dc.ql = Defaults.e;
            }
        }
        get dj() {
            return this.dm;
        }
        get dk() {
            return this.dn;
        }
        get di() {
            return this.dl;
        }
        dd() {
            this.dl.an = null;
            this.dm.an = null;
            this.dn.an = null;
            this.aq();
        }
        de(a, b, c, d, e, f, g) {
            this.dc.v3.a = typeCast(ISortingAxis_$type, this.ct.fetchXAxis()) !== null ? true : false;
            this.dc.v3.m(this.dm, this.dl, this.dn, a, b, c, d, e, f, g);
            this.aq();
        }
        bc() {
            super.bc();
            this.dg.an = this.dm.an;
            this.dh.an = this.dn.an;
            this.df.an = this.dl.an;
            let a = this.bo();
            this.dg._stroke = a;
            this.dg.ad = this.e.fy + 3;
            this.dh._stroke = a;
            this.dh.ad = this.e.fy + 3;
            this.df._fill = a;
            this.df._opacity = 1;
        }
        a6(a, b) {
            super.a6(a, b);
            if (a.d) {
                if (b) {
                    a.t(this.df);
                    a.t(this.dg);
                    a.t(this.dh);
                }
                else {
                    a.t(this.dl);
                    a.t(this.dm);
                    a.t(this.dn);
                }
            }
        }
        al(a) {
            super.al(a);
            this.e.a9.exportPathData(a, this.dm, "lowerShape", ["Lower", "Main"]);
            this.e.a9.exportPathData(a, this.dn, "upperShape", ["Upper"]);
            this.e.a9.exportPathData(a, this.dl, "translucentShape", ["Translucent"]);
        }
    }
    SplineSeriesView.$t = /*@__PURE__*/ markType(SplineSeriesView, 'SplineSeriesView', SplineSeriesBaseView.$);
    return SplineSeriesView;
})();
