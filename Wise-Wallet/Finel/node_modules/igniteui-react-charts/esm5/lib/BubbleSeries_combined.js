/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __values } from "tslib";
import { ScatterBase } from "./ScatterBase";
import { IScaleLegendSeries_$type } from "igniteui-react-core";
import { ISupportsSizeScale_$type } from "./ISupportsSizeScale";
import { ISupportsFillScale_$type } from "./ISupportsFillScale";
import { List$1 } from "igniteui-react-core";
import { UIElement } from "igniteui-react-core";
import { Base, typeCast, Point_$type, fromEnum, markType, markDep, enumGetBox, runOn } from "igniteui-react-core";
import { ActualRange } from "./ActualRange";
import { DependencyProperty } from "igniteui-react-core";
import { SizeScale } from "./SizeScale";
import { BrushScale } from "./BrushScale";
import { ScatterFrame } from "./ScatterFrame";
import { IChartLegend_$type } from "igniteui-react-core";
import { ValueBrushScale } from "./ValueBrushScale";
import { IFastItemsSource_$type } from "igniteui-react-core";
import { ScatterBaseView } from "./ScatterBaseView";
import { ScalerParams } from "./ScalerParams";
import { OwnedPoint } from "./OwnedPoint";
import { Dictionary$2 } from "igniteui-react-core";
import { BubbleMarkerManager } from "./BubbleMarkerManager";
import { IChartItemLegend_$type } from "igniteui-react-core";
import { IChartScaleLegend_$type } from "igniteui-react-core";
import { ContentControl } from "igniteui-react-core";
import { DataContext } from "igniteui-react-core";
import { DeviceUtils } from "igniteui-react-core";
import { BrushUtil } from "igniteui-react-core";
import { DataLegendSeriesValueInfo } from "igniteui-react-core";
import { DataLegendSeriesContext } from "igniteui-react-core";
import { PropertyMetadata } from "igniteui-react-core";
import { isNaN_, isInfinity, logBase } from "igniteui-react-core";
import { stringIsNullOrEmpty } from "igniteui-react-core";
import { BrushSelectionMode_$type } from "./BrushSelectionMode";
import { ScatterTrendLineManager } from "./ScatterTrendLineManager";
import { Defaults } from "./Defaults";
/**
 * @hidden
 */
var BubbleSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BubbleSeries, _super);
    function BubbleSeries() {
        var _this = _super.call(this) || this;
        _this.w9 = null;
        _this.w8 = null;
        _this.vw = null;
        _this.vo = null;
        _this.vn = null;
        _this.vm = null;
        _this.vk = null;
        _this.ab = BubbleSeries.$;
        _this.sb = new ScatterFrame();
        _this.sd = new ScatterFrame();
        _this.r9 = new ScatterFrame();
        return _this;
    }
    BubbleSeries.prototype.get_c5 = function () {
        return true;
    };
    BubbleSeries.prototype.by = function () {
        return new BubbleSeriesView(this);
    };
    BubbleSeries.prototype.l4 = function (a) {
        _super.prototype.l4.call(this, a);
        this.vj = a;
    };
    BubbleSeries.prototype.g0 = function () {
        return 0.7;
    };
    BubbleSeries.prototype.qf = function () {
        if (this.qe == 0) {
            return 2;
        }
        return _super.prototype.qf.call(this);
    };
    BubbleSeries.prototype.isAttachedTo = function (a) {
        return this.a2 == a;
    };
    BubbleSeries.prototype.c4 = function () {
        return true;
    };
    BubbleSeries.prototype.le = function (a) {
        _super.prototype.le.call(this, a);
        if (this.vr != null && this.vw != null && this.vw.count > 0) {
            for (var b = 0; b < this.vw.count; b++) {
                a(this.vw._inner[b]);
            }
        }
    };
    Object.defineProperty(BubbleSeries.prototype, "vq", {
        get: function () {
            return this.vs;
        },
        enumerable: false,
        configurable: true
    });
    BubbleSeries.prototype.w7 = function (a) {
        var b = typeCast(CustomPaletteBrushScale.$, this.vi);
        var c = typeCast(ValueBrushScale.$, this.vi);
        var d = this.vi;
        if (b != null && this.cl != null) {
            return b.getBrush1(a, this.cl.count);
        }
        else if (c != null) {
            return c.getBrushByIndex(a, this.vp);
        }
        else if (d != null) {
            return d.getBrush(a);
        }
        return null;
    };
    Object.defineProperty(BubbleSeries.prototype, "legendReady", {
        get: function () {
            return this.vs != null && this.vs.count != 0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "minScaleText", {
        get: function () {
            var a = this.vh(this.vl).b;
            return (Math.round(a * 1000) / 1000).toString();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "maxScaleText", {
        get: function () {
            var a = this.vh(this.vl).a;
            return (Math.round(a * 1000) / 1000).toString();
        },
        enumerable: false,
        configurable: true
    });
    BubbleSeries.prototype.forScaleColors = function (a) {
        for (var b = 0; b < this.vs.count; b++) {
            if (this.vi == null || !this.vi.isReady) {
                return false;
            }
            var c = NaN;
            if (this.vp != null) {
                c = (this.vp.item(b) - this.vp.minimum) / (this.vp.maximum - this.vp.minimum);
            }
            var d = (this.vs.item(b) - this.vs.minimum) / (this.vs.maximum - this.vs.minimum);
            if (isNaN_(c)) {
                c = 0;
            }
            if (isNaN_(d)) {
                d = c;
            }
            var e = this.rl;
            var f = this.w7(b);
            var g = f != null ? f : e;
            a(g, d);
        }
        return true;
    };
    BubbleSeries.prototype.h1 = function (a, b) {
        var c = this.jv(b);
        if (c == BubbleSeries.$$p[5]) {
            return this.h2(a, b, this.wb);
        }
        if (c == BubbleSeries.$$p[11]) {
            return this.h2(a, b, this.wl);
        }
        if (c == ScatterBase.$$p[10]) {
            return this.h2(a, b, this.tr);
        }
        if (c == ScatterBase.$$p[14]) {
            return this.h2(a, b, this.tz);
        }
        if (c == BubbleSeries.$$p[2]) {
            return this.h2(a, b, this.v6);
        }
        return _super.prototype.h1.call(this, a, b);
    };
    Object.defineProperty(BubbleSeries.prototype, "vs", {
        get: function () {
            return this.vo;
        },
        set: function (a) {
            if (this.vo != a) {
                var b = this.vs;
                this.vo = a;
                this.raisePropertyChanged("RadiusColumn", b, this.vs);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "vr", {
        get: function () {
            return this.vn;
        },
        set: function (a) {
            if (this.vn != a) {
                var b = this.vr;
                this.vn = a;
                this.raisePropertyChanged("LabelColumn", b, this.vr);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BubbleSeries.prototype, "vp", {
        get: function () {
            return this.vm;
        },
        set: function (a) {
            if (this.vm != a) {
                var b = this.vp;
                this.vm = a;
                this.raisePropertyChanged("FillColumn", b, this.vp);
            }
        },
        enumerable: false,
        configurable: true
    });
    BubbleSeries.prototype.t2 = function (a, b, c, d, e) {
        if (c <= this.tb) {
            b.g = new Dictionary$2(Base.$, OwnedPoint.$, 1, c);
        }
        var f = this.tb;
        var g = this.cl;
        var h;
        var i;
        var j = this.getEffectiveViewport1(a);
        var k = new ScalerParams(0, d, e, this.r5.d, j);
        var l = new ScalerParams(0, d, e, this.r5.e, j);
        var m = false;
        var n = 0;
        if (this.ce != null) {
            if (this.ce.e8()) {
                var o = this.ce.li(d, k);
                m = o.c;
                n = o.d;
            }
        }
        var _loop_1 = function (p) {
            h = this_1.sl.item(p);
            i = this_1.sm.item(p);
            var q = { $type: Point_$type, x: this_1.r5.a.ei(h, k), y: this_1.r5.b.ei(i, l) };
            if (m) {
                if (q.x < e.left || q.x > e.right) {
                    if (q.x + n >= e.left && q.x + n <= e.right) {
                        q = { $type: Point_$type, x: q.x + n, y: i };
                    }
                }
            }
            if (!isInfinity(q.x) && !isInfinity(q.y)) {
                var r_1 = g.item(p);
                if (c <= f) {
                    if (!b.g.containsKey(r_1)) {
                        var s_1 = { $type: Point_$type, x: h, y: i };
                        b.g.addItem(r_1, ((function () {
                            var $ret = new OwnedPoint();
                            $ret.a = r_1;
                            $ret.b = s_1;
                            $ret.c = q;
                            return $ret;
                        })()));
                    }
                }
            }
        };
        var this_1 = this;
        for (var p = 0; p < c; p++) {
            _loop_1(p);
        }
    };
    BubbleSeries.prototype.ua = function (a, b) {
        var c = typeCast(BubbleSeriesView.$, b);
        var d = c.cv;
        d.m = this.vs;
        _super.prototype.ua.call(this, a, b);
        var e = Math.min(this.sl != null ? this.sl.count : 0, this.sm != null ? this.sm.count : 0);
        if (e < 1) {
            return;
        }
        c.dh();
        c.di();
    };
    BubbleSeries.prototype.wq = function () {
        if (this.ce == null) {
            return;
        }
        if (this.a2 == null) {
            return;
        }
        if (this.a2.isItemwise) {
            var a = this.a2;
            this.a2.clearLegendItemsForSeries(this);
            this.wp();
            a.renderItemwiseContent(this);
        }
        if (this.a2.isScale) {
            var b = this.a2;
            b.restoreOriginalState();
            b.initializeLegend(this);
        }
    };
    BubbleSeries.vx = function (a, b, c, d, e) {
        if (e <= a || isNaN_(e) || isInfinity(e)) {
            return c;
        }
        if (e >= b) {
            return d;
        }
        var f = c + ((d - c) / (b - a)) * (e - a);
        return f;
    };
    BubbleSeries.vy = function (a, b, c, d, logBase_, e) {
        var f = logBase(e, logBase_);
        var g = logBase(a, logBase_);
        var h = logBase(b, logBase_);
        return BubbleSeries.vx(g, h, c, d, f);
    };
    BubbleSeries.prototype.fd = function (a, b, c) {
        var d = _super.prototype.fd.call(this, a, b, c);
        if (this.vs == null || this.cl == null || this.vs.count == 0 || this.cl.count != this.vs.count) {
            d = false;
        }
        return d;
    };
    BubbleSeries.prototype.sv = function (a, b) {
        if (b != 3) {
            return true;
        }
        if (a == null) {
            return true;
        }
        if (this.tr == a || this.tz == a || this.wl == a) {
            return true;
        }
        return false;
    };
    BubbleSeries.prototype.wp = function () {
        var _this = this;
        var a = typeCast(IChartLegend_$type, this.a2);
        if (a == null || this.cl == null) {
            return;
        }
        this.vw = new List$1(UIElement.$, 0);
        var b = typeCast(CustomPaletteBrushScale.$, this.vi);
        var c = typeCast(ValueBrushScale.$, this.vi);
        var d = this.vi;
        var e = this.vg();
        var f = e.b;
        var g = e.a;
        var h = this.cl;
        var _loop_2 = function (i) {
            var j = null;
            if (c != null && this_2.vp != null) {
                var k = this_2.vp.item(i);
                j = c.getBrushByRange(k, f, g);
            }
            else if (b != null) {
                j = b.getBrush1(i, h.count);
            }
            else if (d != null) {
                j = d.getBrush(i);
            }
            var l = new ContentControl();
            var m = this_2.vr != null && this_2.vr.item(i) != null ? this_2.vr.item(i).toString() : "";
            l.content = ((function () {
                var $ret = new DataContext();
                $ret.series = _this;
                $ret.item = h.item(i);
                $ret.itemBrush = j;
                $ret.itemLabel = m;
                return $ret;
            })());
            var n = this_2.nh;
            if (n == null) {
                n = this_2.b1.bl(this_2.b6);
            }
            l.ah = n;
            this_2.vw.add(l);
        };
        var this_2 = this;
        for (var i = 0; i < h.count; i++) {
            _loop_2(i);
        }
    };
    BubbleSeries.prototype.k5 = function (a, b, c, d) {
        _super.prototype.k5.call(this, a, b, c, d);
        if (this.vl != null) {
            this.vl.aa();
        }
        if (this.vi != null) {
            this.vi.x();
        }
        this.wq();
    };
    BubbleSeries.prototype.ln = function () {
        _super.prototype.ln.call(this);
        this.wq();
    };
    BubbleSeries.prototype.lt = function () {
        _super.prototype.lt.call(this);
        this.wq();
    };
    BubbleSeries.prototype.l9 = function (a, b, c, d) {
        var e_1, _a;
        _super.prototype.l9.call(this, a, b, c, d);
        switch (b) {
            case "FastItemsSource":
                if (this.vl != null) {
                    this.vl.aa();
                }
                if (this.vi != null) {
                    this.vi.x();
                }
                if (typeCast(IFastItemsSource_$type, c) != null) {
                    c.deregisterColumn(this.vs);
                    c.deregisterColumn(this.vp);
                    c.deregisterColumn(this.vr);
                    this.vs = null;
                    this.vp = null;
                    this.vr = null;
                }
                if (typeCast(IFastItemsSource_$type, d) != null) {
                    this.vs = this.ci(this.wl);
                    if (!stringIsNullOrEmpty(this.v6)) {
                        this.vp = this.ci(this.v6);
                    }
                    this.vr = this.ck(this.wb);
                }
                this.mn(false);
                this.wq();
                break;
            case BubbleSeries.$$p[11]:
                if (this.vl != null) {
                    this.vl.aa();
                }
                if (this.cl != null) {
                    this.cl.deregisterColumn(this.vs);
                    this.vs = this.ci(this.wl);
                    this.wq();
                }
                break;
            case "RadiusColumn":
                if (this.vl != null) {
                    this.vl.aa();
                }
                this.r6.cx.g$i();
                this.mn(false);
                this.lv();
                break;
            case BubbleSeries.$$p[12]:
                if (c != null) {
                    c.l.remove(this);
                    c.aa();
                }
                if (d != null) {
                    d.l.add(this);
                    d.aa();
                }
                this.mn(false);
                this.lu();
                break;
            case BubbleSeries.$$p[13]:
                this.mn(false);
                this.lu();
                break;
            case "DiscreteLegendItemTemplate":
                this.wq();
                break;
            case BubbleSeries.$$p[3]:
                if (c != null) {
                    c.o.remove(this);
                    c.x();
                }
                if (d != null) {
                    d.o.add(this);
                    d.x();
                }
                this.mn(false);
                this.wq();
                this.lu();
                break;
            case BubbleSeries.$$p[4]:
            case BubbleSeries.$$p[8]:
            case BubbleSeries.$$p[7]:
            case BubbleSeries.$$p[6]:
                this.mn(false);
                this.wq();
                this.lu();
                break;
            case "FillColumn":
                this.mn(false);
                this.lu();
                break;
            case BubbleSeries.$$p[2]:
                if (this.vi != null) {
                    this.vi.x();
                }
                if (this.cl != null) {
                    this.cl.deregisterColumn(this.vp);
                    this.vp = this.ci(this.v6);
                    this.wq();
                }
                break;
            case BubbleSeries.$$p[5]:
                if (this.cl != null) {
                    this.cl.deregisterColumn(this.vr);
                    this.vr = this.ck(this.wb);
                    this.wq();
                }
                break;
            case "ActualLegend":
                var e = typeCast(IChartLegend_$type, c);
                if (e != null && e.isItemwise) {
                    var f = typeCast(IChartItemLegend_$type, e);
                    f.clearLegendItemsForSeries(this);
                }
                if (e != null && e.isScale) {
                    var g = typeCast(IChartScaleLegend_$type, e);
                    var h = true;
                    var i = null;
                    if (this.ce != null) {
                        try {
                            for (var _b = __values(fromEnum(this.ce.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                                var j = _c.value;
                                if (j.legend == g) {
                                    i = j;
                                    h = false;
                                }
                            }
                        }
                        catch (e_1_1) {
                            e_1 = { error: e_1_1 };
                        }
                        finally {
                            try {
                                if (_c && !_c.done && (_a = _b.return))
                                    _a.call(_b);
                            }
                            finally {
                                if (e_1)
                                    throw e_1.error;
                            }
                        }
                    }
                    if (h) {
                        g.restoreOriginalState();
                    }
                    else {
                        g.initializeLegend(typeCast(IScaleLegendSeries_$type, i));
                    }
                }
                this.wq();
                break;
            case "SeriesViewer":
                this.wq();
                break;
        }
    };
    BubbleSeries.prototype.updateSizeScaleGlobals = function () {
        var a = new ActualRange();
        a.b = NaN;
        a.a = NaN;
        if (this.vs != null) {
            a.b = this.vs.minimum;
            a.a = this.vs.maximum;
        }
        if (this.vl != null) {
            this.vl.ab(a.b, a.a);
        }
    };
    BubbleSeries.prototype.updateFillScaleGlobals = function () {
        var a = new ActualRange();
        a.b = NaN;
        a.a = NaN;
        if (this.vp != null) {
            a.b = this.vp.minimum;
            a.a = this.vp.maximum;
        }
        if (this.vi != null) {
            this.vi.z(a.b, a.a);
        }
    };
    BubbleSeries.prototype.vh = function (a) {
        var b = new ActualRange();
        b.b = NaN;
        b.a = NaN;
        if (this.vs != null) {
            b.b = this.vs.minimum;
            b.a = this.vs.maximum;
        }
        if (a != null) {
            a.x();
            if (this.vv) {
                b.b = a.globalMinimum;
                b.a = a.globalMaximum;
            }
        }
        return b;
    };
    BubbleSeries.prototype.vg = function () {
        var a = new ActualRange();
        a.b = NaN;
        a.a = NaN;
        if (this.vp != null) {
            a.b = this.vp.minimum;
            a.a = this.vp.maximum;
        }
        var b = typeCast(ValueBrushScale.$, this.vi);
        if (b != null) {
            b.s();
            if (this.vt && this.vi.o.count > 1) {
                a.b = b.q;
                a.a = b.p;
            }
        }
        return a;
    };
    BubbleSeries.prototype.ws = function (a, b, c, d) {
        var e = c.width;
        if (!this.b1.bu.isEmpty) {
            e = this.b1.bu.width;
        }
        else if (this.ce != null && !this.ce.tp.isEmpty) {
            e = this.ce.tp.width;
        }
        var f = DeviceUtils.c(e);
        this.vk = this.vl || ((function () {
            var $ret = new SizeScale();
            $ret.minimumValue = f / 10;
            $ret.maximumValue = f / 5;
            return $ret;
        })());
        if (this.vk != null) {
            var g = this.vk.minimumValue;
            var h = this.vk.maximumValue;
            var i = this.vk.logarithmBase;
            var j = this.vh(this.vk);
            var k = j.b;
            var l = j.a;
            if (this.vk.isLogarithmic) {
                for (var m = 0; m < b.count; m++) {
                    b._inner[m] = BubbleSeries.vy(k, l, g, h, i, b._inner[m]);
                }
            }
            else {
                for (var n = 0; n < b.count; n++) {
                    b._inner[n] = BubbleSeries.vx(k, l, g, h, b._inner[n]);
                }
            }
        }
        var o = 1;
        o = DeviceUtils.d();
        var p = this.vl == null;
        if (d) {
            var q = c.width / e;
            for (var r = 0; r < b.count; r++) {
                if (p) {
                    b._inner[r] = b._inner[r] / o;
                }
                b._inner[r] = b._inner[r] * q;
            }
        }
        for (var s = 0; s < a.count; s++) {
            var t = a._inner[s];
            if (p && !d) {
                t.width = Math.max(0, b._inner[s] / o);
                t.height = Math.max(0, b._inner[s] / o);
            }
            else {
                t.width = Math.max(0, b._inner[s]);
                t.height = Math.max(0, b._inner[s]);
            }
        }
    };
    BubbleSeries.prototype.wr = function (a) {
        var b = typeCast(BubbleSeriesView.$, this.b0);
        this.vj.b3 = false;
        if (b != null) {
            b.b3 = false;
        }
        var c = typeCast(CustomPaletteBrushScale.$, this.vi);
        var d = typeCast(ValueBrushScale.$, this.vi);
        var e = this.vi;
        var f = this.vg();
        var g = f.b;
        var h = f.a;
        var i = this.vi == null || !this.vi.isReady || (d != null && this.v6 == null);
        if (i) {
            this.vj.dg();
            if (b != null) {
                b.dg();
            }
            return;
        }
        this.vj.b3 = true;
        if (b != null) {
            b.b3 = true;
        }
        var j = a.count;
        var k = this.cl;
        for (var l = 0; l < j; l++) {
            var m = a._inner[l];
            var n = typeCast(DataContext.$, m.content);
            if (n != null) {
                var o = null;
                var p = k.indexOf(n.item);
                if (c != null) {
                    o = c.getBrush1(p, k.count);
                }
                else if (d != null && this.vp != null) {
                    var q = this.vp.item(p);
                    o = d.getBrushByRange(q, g, h);
                }
                else if (e != null) {
                    o = e.getBrush(p);
                }
                else {
                    if (this.rn == null) {
                        o = this.rl;
                    }
                    else {
                        o = this.rn;
                    }
                }
                var r = null;
                if (this.ro == null) {
                    r = this.rm;
                }
                else {
                    r = this.ro;
                }
                if (this.vu && o != null) {
                    r = o;
                }
                if (r != null && !isNaN_(this.v0)) {
                    r = BrushUtil.l(r, this.v0);
                }
                if (o != null && !isNaN_(this.vz)) {
                    o = BrushUtil.l(o, this.vz);
                }
                n.itemBrush = o;
                n.actualItemBrush = o;
                n.outline = r;
            }
        }
    };
    BubbleSeries.prototype.getDataLegendSeriesContextAt = function (a, b) {
        var c = { $type: Point_$type, x: a, y: b };
        var d = this.hy(c);
        var e = d == null ? NaN : this.gf(d, "XMemberPath");
        var f = d == null ? NaN : this.gf(d, "YMemberPath");
        var g = new DataLegendSeriesValueInfo();
        g.a = 13;
        g.l = e;
        g.p = "X";
        g.q = this.tr != null ? this.tr : "X";
        g.r = this.tn != null ? this.tn : "X:";
        g.s = this.tp != null ? this.tp : "";
        var h = new DataLegendSeriesValueInfo();
        h.l = f;
        h.a = 14;
        h.p = "Y";
        h.q = this.tz != null ? this.tz : "Y";
        h.r = this.tv != null ? this.tv : "Y:";
        h.s = this.tx != null ? this.tx : "";
        var i = new DataLegendSeriesContext();
        i.f = ((function () {
            var $ret = new List$1(DataLegendSeriesValueInfo.$, 0);
            $ret.add(g);
            $ret.add(h);
            return $ret;
        })());
        i.b = this.aw();
        if (!stringIsNullOrEmpty(this.wl)) {
            var j = d == null ? NaN : this.gf(d, "RadiusMemberPath");
            var k = new DataLegendSeriesValueInfo();
            k.l = j;
            k.a = 11;
            k.p = "Radius";
            k.q = this.wl != null ? this.wl : "Radius";
            k.r = this.wh != null ? this.wh : "R:";
            k.s = this.wj != null ? this.wj : "";
            i.f.add(k);
        }
        else if (this.vk != null) {
            var l = new DataLegendSeriesValueInfo();
            l.l = this.vk.maximumValue;
            l.a = 11;
            l.p = "Radius";
            l.q = this.wl != null ? this.wl : "Radius";
            l.r = this.wh != null ? this.wh : "R:";
            l.s = this.wj != null ? this.wj : "";
            i.f.add(l);
        }
        if (!stringIsNullOrEmpty(this.v6)) {
            var m = d == null ? NaN : this.gf(d, "FillMemberPath");
            var n = new DataLegendSeriesValueInfo();
            n.l = m;
            n.a = 12;
            n.p = "Fill";
            n.q = this.v6 != null ? this.v6 : "Fill";
            n.r = this.v2 != null ? this.v2 : "F:";
            n.s = this.v4 != null ? this.v4 : "";
            i.f.add(n);
        }
        return i;
    };
    Object.defineProperty(BubbleSeries.prototype, "actualMarkerBrush", {
        get: function () {
            return this.rl;
        },
        enumerable: false,
        configurable: true
    });
    BubbleSeries.$t = markType(BubbleSeries, 'BubbleSeries', ScatterBase.$, [IScaleLegendSeries_$type, ISupportsSizeScale_$type, ISupportsFillScale_$type]);
    BubbleSeries.$$p = markDep(DependencyProperty, PropertyMetadata, BubbleSeries, 'raisePropertyChanged', ['FillMemberAsLegendLabel:v2:wt', [2, null], 'FillMemberAsLegendUnit:v4:wu', [2, null], 'FillMemberPath:v6:wv', [2], 'FillScale:vi:ww', [BrushScale.$], 'FillScaleUseGlobalValues:vt:wx', [0, false], 'LabelMemberPath:wb:wy', [2], 'MarkerBrushBrightness:vz:wz', [1, NaN], 'MarkerOutlineBrightness:v0:w0', [1, NaN], 'MarkerOutlineUsesFillScale:vu:w1', [0, false], 'RadiusMemberAsLegendLabel:wh:w2', [2, null], 'RadiusMemberAsLegendUnit:wj:w3', [2, null], 'RadiusMemberPath:wl:w4', [2, null], 'RadiusScale:vl:w5', [SizeScale.$], 'RadiusScaleUseGlobalValues:vv:w6', [0, false]]);
    return BubbleSeries;
}(ScatterBase));
export { BubbleSeries };
/**
 * @hidden
 */
var CustomPaletteBrushScale = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(CustomPaletteBrushScale, _super);
    function CustomPaletteBrushScale() {
        return _super.call(this) || this;
    }
    CustomPaletteBrushScale.prototype.getBrush1 = function (a, b) {
        if (this.brushes == null || this.brushes.count == 0) {
            return null;
        }
        if (this.brushSelectionMode == 0) {
            return _super.prototype.getBrush.call(this, a % this.brushes.count);
        }
        var c = BubbleSeries.vx(0, b - 1, 0, this.brushes.count - 1, a);
        return this.ab(c);
    };
    CustomPaletteBrushScale.prototype.get_isReady = function () {
        return this.brushes != null && this.brushes.count > 0;
    };
    CustomPaletteBrushScale.$t = markType(CustomPaletteBrushScale, 'CustomPaletteBrushScale', BrushScale.$);
    CustomPaletteBrushScale.$$p = markDep(DependencyProperty, PropertyMetadata, CustomPaletteBrushScale, 'v', ['BrushSelectionMode', [BrushSelectionMode_$type, enumGetBox(BrushSelectionMode_$type, 0)]]);
    return CustomPaletteBrushScale;
}(BrushScale));
export { CustomPaletteBrushScale };
/**
 * @hidden
 */
var BubbleSeriesView = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(BubbleSeriesView, _super);
    function BubbleSeriesView(a) {
        var _this = _super.call(this, a) || this;
        _this.df = null;
        _this.df = a;
        _this.cx = new ScatterTrendLineManager();
        return _this;
    }
    BubbleSeriesView.prototype.as = function () {
        _super.prototype.as.call(this);
        if (!this.q) {
            this.b1.ql = Defaults.e;
        }
    };
    BubbleSeriesView.prototype.cu = function () {
        var _this = this;
        return new BubbleMarkerManager(function (a) { return _this.cy.item(a); }, function (a) { return _this.cw.r5.c.item(a); }, runOn(this, this.c9), runOn(this, this.cr), runOn(this, this.cz));
    };
    BubbleSeriesView.prototype.dh = function () {
        var a = this.cv;
        this.df.ws(a.n, a.o, this.bu, this == this.e.b0);
        this.aq();
    };
    BubbleSeriesView.prototype.di = function () {
        var a = this.cv;
        this.df.wr(a.n);
    };
    BubbleSeriesView.prototype.dg = function () {
        var e_2, _a;
        var a = this.cv;
        try {
            for (var _b = __values(fromEnum(a.n)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                var c = typeCast(DataContext.$, b.content);
                if (c != null) {
                    c.itemBrush = null;
                    c.outline = null;
                }
            }
        }
        catch (e_2_1) {
            e_2 = { error: e_2_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_2)
                    throw e_2.error;
            }
        }
    };
    BubbleSeriesView.prototype.getDefaultTooltipTemplate = function () {
        var a = "<div class='ui-chart-default-tooltip-content'><span";
        var b = this.e.a7.a$r(this.e);
        if (!stringIsNullOrEmpty(b)) {
            a += " style='color:" + b + "'";
        }
        a += ">" + this.df.title + "</span><br/><span>" + "(${item." + this.df.tr + "}, ${item." + this.df.tz + "})</span>";
        if (!stringIsNullOrEmpty(this.df.wl)) {
            a += "<span>, Radius: ${item." + this.df.wl + "}</span>";
        }
        a += "</div>";
        return a;
    };
    BubbleSeriesView.$t = markType(BubbleSeriesView, 'BubbleSeriesView', ScatterBaseView.$);
    return BubbleSeriesView;
}(ScatterBaseView));
export { BubbleSeriesView };
