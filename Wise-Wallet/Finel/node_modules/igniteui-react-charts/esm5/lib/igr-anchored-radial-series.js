import { __extends } from "tslib";
import { TrendLineType_$type } from "igniteui-react-core";
import { IgrRadialBase } from "./igr-radial-base";
import { ensureEnum, brushToString, stringToBrush, toDoubleCollection, fromDoubleCollection, toPoint, fromPoint } from "igniteui-react-core";
/**
 * Represents the base class for all IgxDataChartComponent anchored radial category series.
*/
var IgrAnchoredRadialSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrAnchoredRadialSeries, _super);
    function IgrAnchoredRadialSeries(props) {
        return _super.call(this, props) || this;
    }
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "valueMemberPath", {
        /**
         * Gets or sets the item path that provides the values for the current series.
        */
        get: function () {
            return this.i.ts;
        },
        set: function (v) {
            this.i.ts = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "valueMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series value in the Data Legend.
        */
        get: function () {
            return this.i.to;
        },
        set: function (v) {
            this.i.to = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "valueMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series value in the Data Legend.
        */
        get: function () {
            return this.i.tq;
        },
        set: function (v) {
            this.i.tq = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "trendLineType", {
        /**
         * Gets or sets the trend type for the current series object.
        */
        get: function () {
            return this.i.ta;
        },
        set: function (v) {
            this.i.ta = ensureEnum(TrendLineType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "trendLineBrush", {
        /**
         * Gets or sets the brush that specifies how to the current series
         * object's Trend line is drawn.
        */
        get: function () {
            return brushToString(this.i.ub);
        },
        set: function (v) {
            this.i.ub = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "actualTrendLineBrush", {
        /**
         * Gets the effective TrendLineBrush for this series.
        */
        get: function () {
            return brushToString(this.i.ua);
        },
        set: function (v) {
            this.i.ua = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "trendLineThickness", {
        /**
         * Gets or sets the thickness of the current series object's trend line.
        */
        get: function () {
            return this.i.tk;
        },
        set: function (v) {
            this.i.tk = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "trendLineDashArray", {
        /**
         * Gets or sets a collection of double values that indicate the pattern of dashes and gaps that
         * is used to draw the trend line for the current series object.
        */
        get: function () {
            return fromDoubleCollection(this.i.uc);
        },
        set: function (v) {
            this.i.uc = toDoubleCollection(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "trendLinePeriod", {
        /**
         * Gets or sets the trend line period for the current series.
         * The typical, and initial, value for bollinger band periods is 20.
        */
        get: function () {
            return this.i.tl;
        },
        set: function (v) {
            this.i.tl = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "trendLineZIndex", {
        /**
         * Sets or Gets the Z index of the trendline.
        */
        get: function () {
            return this.i.tm;
        },
        set: function (v) {
            this.i.tm = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "hasValueAxis", {
        get: function () {
            return this.i.c7;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrAnchoredRadialSeries.prototype, "isValueAxisInverted", {
        get: function () {
            return this.i.em;
        },
        enumerable: false,
        configurable: true
    });
    IgrAnchoredRadialSeries.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.h1(item, memberPathName);
        return (iv);
    };
    IgrAnchoredRadialSeries.prototype.getPreviousOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.ho(toPoint(world), skipUnknowns);
        return (iv);
    };
    IgrAnchoredRadialSeries.prototype.getNextOrExactIndex = function (world, skipUnknowns) {
        var iv = this.i.hm(toPoint(world), skipUnknowns);
        return (iv);
    };
    IgrAnchoredRadialSeries.prototype.getSeriesValue = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.gn(toPoint(world), useInterpolation, skipUnknowns);
        return (iv);
    };
    IgrAnchoredRadialSeries.prototype.getSeriesValuePosition = function (world, useInterpolation, skipUnknowns) {
        var iv = this.i.ps(toPoint(world), useInterpolation, skipUnknowns);
        return fromPoint(iv);
    };
    /**
     * Returns the offset value for this series if grouped on a category axis.
    
    */
    IgrAnchoredRadialSeries.prototype.getOffsetValue = function () {
        var iv = this.i.getOffsetValue();
        return (iv);
    };
    /**
     * Returns the width of the category grouping this series is in.
    
    */
    IgrAnchoredRadialSeries.prototype.getCategoryWidth = function () {
        var iv = this.i.getCategoryWidth();
        return (iv);
    };
    /**
     * Scrolls the specified item into the view.
    
    * @param item  * The item to scroll into view.
    */
    IgrAnchoredRadialSeries.prototype.scrollIntoView = function (item) {
        var iv = this.i.eq(item);
        return (iv);
    };
    return IgrAnchoredRadialSeries;
}(IgrRadialBase));
export { IgrAnchoredRadialSeries };
