/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends, __read, __spreadArray, __values } from "tslib";
import { Brush } from "igniteui-react-core";
import { XYChart } from "./XYChart";
import { IndicatorPane } from "./IndicatorPane";
import { Base, BaseError, EventArgs, runOn, delegateRemove, delegateCombine, fromEnum, typeCast, EnumUtil, Number_$type, String_$type, enumGetBox, markType, TypeRegistrar, fromEn } from "igniteui-react-core";
import { List$1 } from "igniteui-react-core";
import { DataSeriesType_$type } from "igniteui-react-core";
import { IDataSeriesAdapterRule_$type } from "igniteui-react-core";
import { SimpleFinancialPriceSeriesRule } from "igniteui-react-core";
import { SubCollectionsRule } from "igniteui-react-core";
import { XamDataChart } from "./XamDataChart";
import { FinancialChartVolumeType_$type } from "./FinancialChartVolumeType";
import { FinancialChartXAxisMode_$type } from "./FinancialChartXAxisMode";
import { FinancialChartYAxisMode_$type } from "./FinancialChartYAxisMode";
import { FinancialChartType_$type } from "./FinancialChartType";
import { NumericYAxis } from "./NumericYAxis";
import { CategoryAxisBase } from "./CategoryAxisBase";
import { FinancialChartZoomSliderType_$type } from "./FinancialChartZoomSliderType";
import { BrushCollection } from "igniteui-react-core";
import { FinancialChartRangeSelectorOptionCollection } from "./FinancialChartRangeSelectorOptionCollection";
import { ObservableCollection$1 } from "igniteui-react-core";
import { TemplatedHtmlControl } from "./TemplatedHtmlControl";
import { FinancialChartContext } from "./FinancialChartContext";
import { FinancialChartToolbarContext } from "./FinancialChartToolbarContext";
import { FinancialChartViewModel } from "./FinancialChartViewModel";
import { FinancialChartToolbarViewModel } from "./FinancialChartToolbarViewModel";
import { AxisDefaults } from "./AxisDefaults";
import { Defaults } from "./Defaults";
import { BrushUtil } from "igniteui-react-core";
import { Series } from "./Series";
import { Rect } from "igniteui-react-core";
import { Axis } from "./Axis";
import { AxisLabelSettings } from "./AxisLabelSettings";
import { MarkerSeries } from "./MarkerSeries";
import { IZoomableCategoryAxis_$type } from "./IZoomableCategoryAxis";
import { SyncSettings } from "./SyncSettings";
import { SyncManager } from "./SyncManager";
import { FinancialOverlayType_$type } from "./FinancialOverlayType";
import { ArrayExtension } from "igniteui-react-core";
import { FinancialIndicatorType_$type } from "./FinancialIndicatorType";
import { IndicatorDisplayType_$type } from "./IndicatorDisplayType";
import { ITimeRangeSelectorAxis_$type } from "./ITimeRangeSelectorAxis";
import { FinancialChartVisualData } from "./FinancialChartVisualData";
import { FinancialChartCustomIndicatorArgs } from "./FinancialChartCustomIndicatorArgs";
import { ScalerParams } from "./ScalerParams";
import { stringReplace, stringJoin, stringIsNullOrEmpty } from "igniteui-react-core";
import { timeSpanFromDays } from "igniteui-react-core";
import { dateMaxValue, dateMinValue } from "igniteui-react-core";
import { isNaN_, isInfinity } from "igniteui-react-core";
import { FinancialChartTypePicker } from "./FinancialChartTypePicker";
import { FinancialChartIndicatorMenu } from "./FinancialChartIndicatorMenu";
import { TrendLineType_$type } from "igniteui-react-core";
import { FinancialChartIndicatorMenuContext } from "./FinancialChartIndicatorMenuContext";
import { FinancialChartTypePickerContext } from "./FinancialChartTypePickerContext";
import { FinancialChartRangeSelectorContext } from "./FinancialChartRangeSelectorContext";
import { FinancialChartToolbarVisualData } from "./FinancialChartToolbarVisualData";
import { FinancialChartRangeSelectorViewModel } from "./FinancialChartRangeSelectorViewModel";
import { FinancialChartRangeSelectorView } from "./FinancialChartRangeSelectorView";
/**
 * @hidden
 */
var FinancialChart = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialChart, _super);
    function FinancialChart() {
        var _this = _super.call(this) || this;
        _this.aes = null;
        _this.ahq = null;
        _this.aho = null;
        _this.ahl = null;
        _this.ahn = null;
        _this.ahp = null;
        _this.ahm = null;
        _this.ady = null;
        _this.ah8 = null;
        _this.ah9 = null;
        _this.ah5 = null;
        _this.aia = null;
        _this.aib = null;
        _this.ah6 = null;
        _this.ah7 = null;
        _this.afg = null;
        _this.agq = 40;
        _this.aem = null;
        _this.aek = null;
        _this.aeo = null;
        _this.aet = null;
        _this.aij = null;
        _this.afc = null;
        _this.af2 = false;
        _this.af1 = false;
        _this.af9 = false;
        _this.afo = false;
        _this.ahw = 10;
        _this.agx = NaN;
        _this.agz = NaN;
        _this.agy = NaN;
        _this.ag0 = 0;
        _this.ad4 = 0;
        _this.ad7 = 0;
        _this.ags = 3;
        _this.agv = NaN;
        _this.agt = NaN;
        _this.agu = NaN;
        _this.agw = NaN;
        _this.ad9 = 0;
        _this.afj = true;
        _this.ad0 = 0;
        _this.afk = false;
        _this.aee = null;
        _this.aeg = null;
        _this.agb = null;
        _this.afm = true;
        _this.afl = false;
        _this.afn = false;
        _this.afd = null;
        _this.aeb = 1;
        _this.ac2 = null;
        _this.ac3 = null;
        _this.ac4 = null;
        _this.ac5 = null;
        _this.ac7 = null;
        _this.ac6 = null;
        _this.ac1 = null;
        _this.ac0 = null;
        _this.agr = 1;
        _this.agp = 1;
        _this.ago = 2;
        _this.agn = 1;
        _this.aeq = null;
        _this.ahs = -2147483648;
        _this.agm = 2;
        _this.ahv = 3;
        _this.aht = 10;
        _this.ahr = 30;
        _this.ahu = 9;
        _this.adv = null;
        _this.adw = null;
        _this.adr = null;
        _this.applyCustomIndicators = null;
        _this.amd = null;
        _this.ag1 = 1;
        _this.afi = false;
        _this.aei = null;
        _this.agj = dateMinValue();
        _this.agi = dateMaxValue();
        _this.agg = null;
        _this.rr();
        _this.agg = new ObservableCollection$1(Base.$, 0);
        if (_this.xAxisBreaks != null) {
            var a = _this.xAxisBreaks;
            a.collectionChanged = delegateCombine(a.collectionChanged, function (a, b) { return _this.al2(); });
        }
        _this.aln();
        return _this;
    }
    FinancialChart.prototype.sz = function (a, b, c) {
        _super.prototype.sz.call(this, a, b, c);
        switch (a) {
            case "ToolbarTemplate":
            case "RangeSelectorTemplate":
                this.adz = new FinancialChartToolbar(this, this.aig);
                break;
            case "Toolbar":
                var d = b;
                if (d != null) {
                    d.chartTypeChanged = delegateRemove(d.chartTypeChanged, runOn(this, this.ala));
                    d.trendLineTypeChanged = delegateRemove(d.trendLineTypeChanged, runOn(this, this.ald));
                    d.volumeTypeChanged = delegateRemove(d.volumeTypeChanged, runOn(this, this.ale));
                    d.l(null);
                }
                if (this.adz != null) {
                    this.adz.ac = this.ad6;
                    this.adz.ai = this.dq;
                    this.adz.y = this.ad1;
                    this.adz.al = this.afz;
                    if (this.ahn != null) {
                        this.adz.l(this.ahn);
                    }
                    var e = this.adz;
                    e.chartTypeChanged = delegateCombine(e.chartTypeChanged, runOn(this, this.ala));
                    ;
                    var f = this.adz;
                    f.trendLineTypeChanged = delegateCombine(f.trendLineTypeChanged, runOn(this, this.ald));
                    var g = this.adz;
                    g.volumeTypeChanged = delegateCombine(g.volumeTypeChanged, runOn(this, this.ale));
                }
                break;
            case "ChartType":
                if (this.adz != null) {
                    this.adz.y = this.ad1;
                }
                break;
            case "VolumeType":
                if (this.adz != null) {
                    this.adz.ac = this.ad6;
                }
                break;
            case "TrendLineType":
                if (this.adz != null) {
                    this.adz.ai = this.dq;
                }
                break;
            case "IsToolbarVisible":
                if (this.adz == null) {
                    break;
                }
                this.adz.al = this.afz;
                this.setGridRows();
                break;
        }
    };
    FinancialChart.prototype.ale = function (a, b) {
        this.ad6 = this.adz.ac;
    };
    FinancialChart.prototype.ald = function (a, b) {
        this.dq = this.adz.ai;
    };
    FinancialChart.prototype.ala = function (a, b) {
        this.ad1 = this.adz.y;
    };
    FinancialChart.prototype.aln = function () {
        this.aes = new IndicatorPane();
        this.aej = TypeRegistrar.create("FinancialLegend");
    };
    FinancialChart.prototype.provideGrid = function (a) {
        this.ahq = a;
        this.al8();
        this.setGridRows();
        if (this.adz != null) {
            this.adz.bg(a);
        }
    };
    FinancialChart.prototype.onDocumentClick = function (a) {
        if (this.adz != null) {
            this.adz.bl(a);
        }
    };
    FinancialChart.prototype.getContext = function () {
        var a = this.adz.v();
        var b = new FinancialChartContext();
        b.vm = new FinancialChartViewModel();
        b.vm.toolbar = a;
        b.container = this.j8;
        b.toolbarContainer = this.ahn;
        b.legendContainer = this.ahm;
        b.indicatorsContainer = this.ahl;
        b.volumeContainer = this.aho;
        b.zoomContainer = this.ahp;
        return b;
    };
    FinancialChart.prototype.provideContainer = function (a) {
        var b = a;
        if (b != null) {
            var c = "financialChartMainGrid";
            var d = b.createElement("div");
            d.setStyleProperty("width", "100%");
            d.setStyleProperty("height", "100%");
            if (this.adz == null) {
                this.adz = new FinancialChartToolbar(this, this.aig);
            }
            this.adz.w.isIndicatorMenuVisible = this.afq && this.afr;
            this.ahn = b.getSubRenderer(d);
            this.adz.l(this.ahn);
            var e = b.createElement("div");
            e.setStyleProperty("width", "100%");
            e.setStyleProperty("height", "100%");
            var f = b.createElement("div");
            f.setStyleProperty("width", "100%");
            f.setStyleProperty("height", "100%");
            this.ahm = b.getSubRenderer(f);
            var g = b.createElement("div");
            g.setStyleProperty("width", "100%");
            g.setStyleProperty("height", "100%");
            this.ahl = b.getSubRenderer(g);
            var h = b.createElement("div");
            h.setStyleProperty("width", "100%");
            h.setStyleProperty("height", "100%");
            this.aho = b.getSubRenderer(h);
            var i = b.createElement("div");
            i.setStyleProperty("width", "100%");
            i.setStyleProperty("height", "100%");
            this.ahp = b.getSubRenderer(i);
            a = b.getSubRenderer(e);
        }
        else {
            this.ahn = null;
            if (this.adz != null) {
                this.adz.l(null);
            }
            if (this.afh != null) {
                this.afh.provideContainer(null);
                this.afh = null;
            }
            if (this.aej != null) {
                this.aej.provideContainer(null);
            }
        }
        _super.prototype.provideContainer.call(this, a);
        if (b != null) {
            if (this.volumeChart != null) {
                this.volumeChart.provideContainer(this.aho);
            }
            if (this.aes != null) {
                this.aes.h(this.ahl);
            }
            if (this.zoomSliderChart != null) {
                this.zoomSliderChart.provideContainer(this.ahp);
                if (a != null) {
                    this.aku();
                }
                else {
                    this.afh = null;
                }
            }
            if (this.aej != null) {
                this.aej.provideContainer(this.ahm);
            }
            this.setGridRows();
        }
    };
    FinancialChart.prototype.aly = function (a, b, c) {
        if (a != null) {
            a.provideContainer(null);
        }
        if (b != null) {
            b.provideContainer(c);
        }
        this.setGridRows();
    };
    FinancialChart.prototype.amc = function (a, b) {
        this.aly(a, b, this.ahp);
        if (b == null) {
            return;
        }
        this.aku();
    };
    FinancialChart.prototype.aku = function () {
        var _this = this;
        if (this.ahp == null) {
            return;
        }
        if (this.afh != null) {
            this.afh.provideContainer(null);
        }
        this.afh = TypeRegistrar.create("ZoomSlider");
        this.afh.provideContainer(this.ahp);
        var a = this.afh;
        a.windowRectChanged = delegateCombine(a.windowRectChanged, function (a, b) {
            if (_this.dataChart != null) {
                _this.dataChart.tq = new Rect(0, _this.afh.windowRect.left, _this.dataChart.ta.top, _this.afh.windowRect.width, _this.dataChart.ta.height);
            }
        });
        this.akv();
    };
    FinancialChart.prototype.ama = function (a, b) {
        this.aly(a, b, this.aho);
    };
    FinancialChart.prototype.setGridRows = function () {
        if (this.ahq == null) {
            return;
        }
        var a = new Array(6);
        a[0] = (this.afz ? this.ag7 : 0) + "px";
        a[1] = this.afv ? "min-content" : "0px";
        a[2] = "auto";
        a[3] = this.indicatorCharts == null || this.indicatorCharts.count == 0 ? "0px" : this.indicatorCharts.count * 150 + "px";
        a[4] = this.volumeChart == null ? "0px" : "100px";
        a[5] = this.zoomSliderChart == null ? "0px" : "100px";
        if (this.afh != null) {
            if (a[5] == "0px") {
                this.afh.hide();
            }
            else {
                this.afh.show();
            }
        }
        this.ahq.setStyleProperty("-ms-grid-rows", stringReplace(stringJoin.apply(void 0, __spreadArray([" "], __read(a), false)), "auto", "1fr"));
        this.ahq.setStyleProperty("grid-template-rows", stringJoin.apply(void 0, __spreadArray([" "], __read(a), false)));
        if (this.j8 == null) {
            return;
        }
        if (this.dataChart != null) {
            this.dataChart.notifyContainerResized();
        }
        if (this.aes != null) {
            this.aes.f();
        }
        if (this.volumeChart != null) {
            this.volumeChart.notifyContainerResized();
        }
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.notifyContainerResized();
        }
        if (this.afh != null) {
            this.afh.notifySizeChanged();
        }
    };
    FinancialChart.prototype.r9 = function () {
        var e_1, _a;
        _super.prototype.r9.call(this);
        this.we = 1;
        this.abt = 0;
        this.yb = 0;
        this.acn = null;
        this.acg = AxisDefaults.g;
        this.xv = AxisDefaults.e;
        this.xu = AxisDefaults.f;
        this.ach = AxisDefaults.j;
        this.acd = null;
        this.ame = AxisDefaults.h;
        this.ahk = AxisDefaults.b;
        this.ft = true;
        this.fm = true;
        this.fn = false;
        this.a9 = 0;
        this.h9 = Defaults.j;
        this.uo = Defaults.ae;
        this.uj = Defaults.af;
        this.uk = Defaults.ag;
        this.iv = NaN;
        this.im = 40;
        this.f2 = true;
        this.f9 = false;
        if (this.dataChart != null) {
            var a = this.dataChart.cu.j.e();
            this.ada = a.d;
            this.adb = a.e;
            this.ac9 = a.d;
            this.ame = this.dataChart.xv;
        }
        var b = new BrushCollection();
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#8BDC5C";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#8961A9";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#6DB1FF";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#82E9D9";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#EA3C63";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#735656";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#F8CE4F";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#A8A8B7";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#E051A9";
            return $ret;
        })()));
        b.add(((function () {
            var $ret = new Brush();
            $ret.fill = "#FF903B";
            return $ret;
        })()));
        var c = new BrushCollection();
        try {
            for (var _b = __values(fromEnum(b)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var d = _c.value;
                c.add(BrushUtil.m(d, 0.3));
            }
        }
        catch (e_1_1) {
            e_1 = { error: e_1_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_1)
                    throw e_1.error;
            }
        }
        this.adc = c;
        this.add = b;
    };
    FinancialChart.prototype.alu = function () {
        if (this.aes != null) {
            this.aes.b = null;
            this.aes.b = this.indicatorCharts;
        }
        this.setGridRows();
    };
    FinancialChart.prototype.alv = function () {
        this.setGridRows();
    };
    FinancialChart.prototype.al4 = function () {
        this.alu();
    };
    FinancialChart.prototype.akt = function () {
        if (this.afh == null || this.zoomSliderChart == null || this.dataChart == null || this.dataChart.series.count == 0) {
            return;
        }
        var a = this.j8.rootWrapper.width();
        var b = this.dataChart.tp.left + this.dataChart.tp.width;
        var c = this.dataChart.tp.left;
        var d = a - b;
        this.afh.startInset = c - this.afh.trackStartInset;
        this.afh.endInset = d - this.afh.trackEndInset;
        if (this.afh.endInset < 0) {
            var e = this.afh.endInset;
            this.afh.endInset = 0;
            this.dataChart.g2 += (e * -1);
        }
        if (this.afh.startInset < 0) {
            var f = this.afh.startInset;
            this.afh.startInset = 0;
            this.dataChart.gx += (f * -1);
        }
        this.zoomSliderChart.gx = c;
        this.zoomSliderChart.g2 = d;
        this.zoomSliderChart.gk = this.afh.barExtent;
    };
    FinancialChart.prototype.alk = function () {
        this.akt();
    };
    FinancialChart.prototype.r6 = function (a) {
        _super.prototype.r6.call(this, a);
        if (a != null) {
            a.gj = 0;
        }
    };
    FinancialChart.prototype.amf = function (a) {
        return a.s3();
    };
    FinancialChart.prototype.ami = function () {
        return this.ahm == null ? null : this.amh(this.ahm.rootWrapper);
    };
    FinancialChart.prototype.amg = function (a) {
        if (a == null || a.d == null) {
            return null;
        }
        return this.amh(a.d.rootWrapper);
    };
    FinancialChart.prototype.amh = function (a) {
        if (a == null) {
            return null;
        }
        var b = a.getOffset();
        return new Rect(0, b.left, b.top, a.width(), a.height());
    };
    FinancialChart.prototype.ag2 = function () {
        if (this.ahq == null) {
            return NaN;
        }
        var a = this.ahq.getOffset();
        return this.ahq.width() + (a == null ? 0 : a.left);
    };
    FinancialChart.prototype.sh = function (source_, a, b) {
        _super.prototype.sh.call(this, source_, a, b);
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.mh(source_, a, b);
        }
    };
    FinancialChart.prototype.si = function (source_, a, b) {
        _super.prototype.si.call(this, source_, a, b);
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.mi(source_, a, b);
        }
    };
    FinancialChart.prototype.sg = function (source_) {
        _super.prototype.sg.call(this, source_);
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.ma(source_);
        }
    };
    FinancialChart.prototype.sk = function (source_, a, b, c) {
        _super.prototype.sk.call(this, source_, a, b, c);
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.mj(source_, a, b, c);
        }
    };
    FinancialChart.prototype.sc = function (a, b) {
        _super.prototype.sc.call(this, a, b);
        if (this.afw(a)) {
            a.toolTip = null;
        }
    };
    Object.defineProperty(FinancialChart.prototype, "adz", {
        get: function () {
            return this.ady;
        },
        set: function (a) {
            var b = this.adz;
            if (a != b) {
                this.ady = a;
                this.sv("Toolbar", b, this.adz);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aif", {
        get: function () {
            return this.ah8;
        },
        set: function (a) {
            var b = this.aif;
            if (a != b) {
                this.ah8 = a;
                this.sv("RangeSelectorTemplate", b, this.aif);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aig", {
        get: function () {
            return this.ah9;
        },
        set: function (a) {
            var b = this.aig;
            if (a != b) {
                this.ah9 = a;
                this.sv("ToolbarTemplate", b, this.aig);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aic", {
        get: function () {
            return this.ah5;
        },
        set: function (a) {
            var b = this.aic;
            if (a != b) {
                this.ah5 = a;
                this.sv("ChartTypePickerTemplate", b, this.aic);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aih", {
        get: function () {
            return this.aia;
        },
        set: function (a) {
            var b = this.aih;
            if (a != b) {
                this.aia = a;
                this.sv("TrendLineTypePickerTemplate", b, this.aih);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aii", {
        get: function () {
            return this.aib;
        },
        set: function (a) {
            var b = this.aii;
            if (a != b) {
                this.aib = a;
                this.sv("VolumeTypePickerTemplate", b, this.aii);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aid", {
        get: function () {
            return this.ah6;
        },
        set: function (a) {
            var b = this.aid;
            if (a != b) {
                this.ah6 = a;
                this.sv("IndicatorMenuTemplate", b, this.aid);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aie", {
        get: function () {
            return this.ah7;
        },
        set: function (a) {
            var b = this.aie;
            if (a != b) {
                this.ah7 = a;
                this.sv("OverlayPickerTemplate", b, this.aie);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afh", {
        get: function () {
            return this.afg;
        },
        set: function (a) {
            var b = this.afh;
            if (a != b) {
                this.afg = a;
                this.sv("ZoomSlider", b, this.afh);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_im = function () {
        return _super.prototype.get_im.call(this);
    };
    FinancialChart.prototype.set_im = function (a) {
        _super.prototype.set_im.call(this, a);
    };
    FinancialChart.prototype.get_f2 = function () {
        return _super.prototype.get_f2.call(this);
    };
    FinancialChart.prototype.set_f2 = function (a) {
        _super.prototype.set_f2.call(this, a);
    };
    Object.defineProperty(FinancialChart.prototype, "ag7", {
        get: function () {
            return this.agq;
        },
        set: function (a) {
            var b = this.ag7;
            if (a != b) {
                this.agq = a;
                this.sv("ToolbarHeight", b, this.ag7);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.v3 = function () {
        return this.xAxis;
    };
    FinancialChart.prototype.v4 = function () {
        return this.yAxis;
    };
    FinancialChart.prototype.onAttachedToUI = function () {
        _super.prototype.onAttachedToUI.call(this);
        if (this.afh != null) {
            this.afh.onAttachedToUI();
        }
    };
    FinancialChart.prototype.onDetachedFromUI = function () {
        _super.prototype.onDetachedFromUI.call(this);
        if (this.afh != null) {
            this.afh.onDetachedFromUI();
        }
    };
    FinancialChart.prototype.bc = function (a) {
        return 20;
    };
    FinancialChart.prototype.get_gr = function () {
        return ((function () {
            var $ret = new List$1(DataSeriesType_$type, 0);
            $ret.add(20);
            return $ret;
        })());
    };
    Object.defineProperty(FinancialChart.prototype, "gr", {
        get: function () {
            return this.get_gr();
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_gq = function () {
        return ((function () {
            var $ret = new List$1(IDataSeriesAdapterRule_$type, 0);
            $ret.add(new SimpleFinancialPriceSeriesRule());
            $ret.add(new SubCollectionsRule());
            return $ret;
        })());
    };
    Object.defineProperty(FinancialChart.prototype, "gq", {
        get: function () {
            return this.get_gq();
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.adl = function (a) {
        return this.adm(a);
    };
    FinancialChart.prototype.aez = function (a) {
        return this.ae0(a);
    };
    FinancialChart.prototype.adk = function (a) {
        var b = this.adl(0);
        b.name = a;
        return b;
    };
    FinancialChart.prototype.rn = function () {
        this.xAxis = this.adk("xAxis");
        this.yAxis = this.aez(0);
        this.yAxis.name = "yAxis";
        this.volumeAxis = this.aez(0);
        this.volumeAxis.name = "volumeAxis";
        this.volumeXAxis = this.adk("volumeXAxis");
        this.agd = new List$1(NumericYAxis.$, 0);
        this.agf = new List$1(CategoryAxisBase.$, 0);
        this.indicatorAxis = this.aez(0);
        this.indicatorAxis.name = "indicatorAxis";
        this.indicatorXAxis = this.adk("indicatorXAxis_0");
        this.agd.add(this.indicatorAxis);
        this.agf.add(this.indicatorXAxis);
        if (this.xAxis.ay == null) {
            this.xAxis.ay = new AxisLabelSettings();
        }
        if (this.yAxis.ay == null) {
            this.yAxis.ay = new AxisLabelSettings();
        }
        if (this.volumeAxis.ay == null) {
            this.volumeAxis.ay = new AxisLabelSettings();
        }
        if (this.volumeXAxis.ay == null) {
            this.volumeAxis.ay = new AxisLabelSettings();
        }
        if (this.indicatorAxis.ay == null) {
            this.indicatorAxis.ay = new AxisLabelSettings();
        }
        if (this.indicatorXAxis.ay == null) {
            this.indicatorXAxis.ay = new AxisLabelSettings();
        }
        this.zoomSliderAxis = this.aez(0);
        this.zoomSliderAxis.name = "zoomSliderAxis";
        this.zoomSliderXAxis = this.adk("zoomSliderXAxis");
        if (this.zoomSliderAxis.ay == null) {
            this.zoomSliderAxis.ay = new AxisLabelSettings();
        }
        if (this.zoomSliderXAxis.ay == null) {
            this.zoomSliderXAxis.ay = new AxisLabelSettings();
        }
    };
    FinancialChart.prototype.rj = function (a, b) {
        var c = typeCast(MarkerSeries.$, a);
        if (c != null) {
            c.ql = this.cr(a, b);
        }
    };
    FinancialChart.prototype.cq = function (a) {
        if (a != null) {
            return 1;
        }
        return _super.prototype.cq.call(this, a);
    };
    FinancialChart.prototype.tf = function (a) {
        if (a.suggestedSecondaryAxis == 2) {
            this.yAxis.lh = true;
            this.yAxis.l8 = 10;
        }
    };
    FinancialChart.prototype.ti = function () {
        this.yAxis.lh = this.af6;
        this.yAxis.l8 = this.ah4;
    };
    FinancialChart.prototype.ad3 = function (a) {
        var b;
        if (this.ad1 == 0) {
            if (a == null || a.index > 0 || stringIsNullOrEmpty(a.getMemberPathFor(12))) {
                b = 4;
            }
            else {
                b = 2;
            }
        }
        else {
            b = this.ad1;
        }
        b = this.ad2(b);
        return b;
    };
    FinancialChart.prototype.ad2 = function (a) {
        if ((a == 1 || a == 2)) {
            if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                return a;
            }
            a = 4;
        }
        if (a == 4) {
            if (TypeRegistrar.isRegistered("LineSeries")) {
                return a;
            }
            a = 3;
        }
        if (a == 3) {
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                return a;
            }
        }
        return a;
    };
    FinancialChart.prototype.aec = function (a) {
        if ((a == 2 || a == 3)) {
            if (TypeRegistrar.isRegistered("FinancialPriceSeries")) {
                return a;
            }
            a = 5;
        }
        if (a == 5) {
            if (TypeRegistrar.isRegistered("LineSeries")) {
                return a;
            }
            a = 6;
        }
        if (a == 6) {
            if (TypeRegistrar.isRegistered("AreaSeries")) {
                return a;
            }
            a = 4;
        }
        if (a == 4) {
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                return a;
            }
        }
        return a;
    };
    FinancialChart.prototype.ad5 = function (a) {
        if (a == 2) {
            if (TypeRegistrar.isRegistered("LineSeries")) {
                return a;
            }
            a = 3;
        }
        if (a == 3) {
            if (TypeRegistrar.isRegistered("AreaSeries")) {
                return a;
            }
            a = 1;
        }
        if (a == 1) {
            if (TypeRegistrar.isRegistered("ColumnSeries")) {
                return a;
            }
        }
        return a;
    };
    FinancialChart.prototype.air = function (a) {
        var b = a.getMemberPathFor(14);
        if (stringIsNullOrEmpty(b)) {
            b = a.getMemberPathFor(11);
        }
        return b;
    };
    FinancialChart.prototype.adm = function (axisType_) {
        if ((this.externalObject)) {
            return (this.externalObject.createXAxis(axisType_).i);
        }
        else {
            var a = void 0;
            switch (axisType_) {
                case 0:
                    if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                        a = TypeRegistrar.create("OrdinalTimeXAxis");
                    }
                    else if (TypeRegistrar.isRegistered("TimeXAxis")) {
                        a = TypeRegistrar.create("TimeXAxis");
                    }
                    else {
                        throw new BaseError(1, "no valid axes loaded");
                    }
                    return a;
                case 1:
                    if (TypeRegistrar.isRegistered("TimeXAxis")) {
                        a = TypeRegistrar.create("TimeXAxis");
                    }
                    else if (TypeRegistrar.isRegistered("OrdinalTimeXAxis")) {
                        a = TypeRegistrar.create("OrdinalTimeXAxis");
                    }
                    else {
                        throw new BaseError(1, "no valid axes loaded");
                    }
                    return a;
            }
            return null;
        }
    };
    FinancialChart.prototype.ae0 = function (axisType_) {
        if ((this.externalObject)) {
            return (this.externalObject.createYAxis(axisType_).i);
        }
        else {
            var a = void 0;
            switch (axisType_) {
                case 0:
                    if (TypeRegistrar.isRegistered("NumericYAxis")) {
                        a = TypeRegistrar.create("NumericYAxis");
                    }
                    else if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                        a = TypeRegistrar.create("PercentChangeYAxis");
                    }
                    else {
                        throw new BaseError(1, "no valid axes loaded");
                    }
                    return a;
                case 1:
                    if (TypeRegistrar.isRegistered("PercentChangeYAxis")) {
                        a = TypeRegistrar.create("PercentChangeYAxis");
                    }
                    else if (TypeRegistrar.isRegistered("NumericYAxis")) {
                        a = TypeRegistrar.create("NumericYAxis");
                    }
                    else {
                        throw new BaseError(1, "no valid axes loaded");
                    }
                    return a;
            }
            return null;
        }
    };
    FinancialChart.prototype.ae6 = function () {
        return this.c3(1);
    };
    FinancialChart.prototype.ae7 = function () {
        return this.c3(0);
    };
    FinancialChart.prototype.ae5 = function () {
        return this.c3(2);
    };
    FinancialChart.prototype.ae8 = function () {
        return this.c3(20);
    };
    Object.defineProperty(FinancialChart.prototype, "afp", {
        get: function () {
            return (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aen", {
        get: function () {
            if (TypeRegistrar.isRegistered("HorizontalAnchoredCategorySeriesProxy")) {
                return TypeRegistrar.create("HorizontalAnchoredCategorySeriesProxy");
            }
            else {
                throw new BaseError(1, "horizontal series module is not loaded, but is required.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afs", {
        get: function () {
            return (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ael", {
        get: function () {
            if (TypeRegistrar.isRegistered("FinancialPriceSeriesProxy")) {
                return TypeRegistrar.create("FinancialPriceSeriesProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afq", {
        get: function () {
            return (TypeRegistrar.isRegistered("IndicatorProxy"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aep", {
        get: function () {
            if (TypeRegistrar.isRegistered("IndicatorProxy")) {
                return TypeRegistrar.create("IndicatorProxy");
            }
            else {
                throw new BaseError(1, "financial series module is not loaded, but is required.");
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afr", {
        get: function () {
            return (TypeRegistrar.isRegistered("OverlayProxy"));
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aeu", {
        get: function () {
            if (TypeRegistrar.isRegistered("OverlayProxy")) {
                return TypeRegistrar.create("OverlayProxy");
            }
            else {
                throw new BaseError(1, "overlay series module is not loaded, but is required.");
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.c1 = function (a, b) {
        var c = this.air(a);
        switch (this.ad3(a)) {
            case 3:
                var d = this.ae6();
                this.aen.setValueMemberPath(d, c);
                this.aen.setXAxis(d, this.xAxis);
                this.aen.setYAxis(d, this.yAxis);
                this.aen.setCategoryMode(d, 1);
                return d;
            case 4:
                var e = this.ae7();
                this.aen.setValueMemberPath(e, c);
                this.aen.setXAxis(e, this.xAxis);
                this.aen.setYAxis(e, this.yAxis);
                this.aen.setCategoryMode(e, 1);
                return e;
            default:
            case 1:
            case 2:
                var f = this.ae8();
                this.ael.setOpenMemberPath(f, a.getMemberPathFor(11));
                this.ael.setHighMemberPath(f, a.getMemberPathFor(12));
                this.ael.setLowMemberPath(f, a.getMemberPathFor(13));
                this.ael.setCloseMemberPath(f, a.getMemberPathFor(14));
                this.ael.setVolumeMemberPath(f, a.getMemberPathFor(15));
                this.ael.setXAxis(f, this.xAxis);
                this.ael.setYAxis(f, this.yAxis);
                this.ael.setDisplayType(f, this.ad1 == 1 ? 1 : 0);
                this.ael.setCategoryMode(f, 1);
                return f;
        }
    };
    FinancialChart.prototype.th = function () {
        _super.prototype.th.call(this);
        this.ali(this.xAxis);
        this.al6(false);
        if (this.ad6 != 0 && this.volumeChart != null) {
            this.alp();
        }
        this.ali(this.volumeXAxis);
        this.ali(this.indicatorXAxis);
        this.al3();
        this.al5();
        if (this.aed != 0) {
            this.alq();
            this.ali(this.zoomSliderXAxis);
        }
    };
    FinancialChart.prototype.abf = function (a, b) {
        var e_2, _a;
        _super.prototype.abf.call(this, a, b);
        a(this.volumeXAxis);
        if (this.agf != null) {
            try {
                for (var _b = __values(fromEnum(this.agf)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    a(c);
                }
            }
            catch (e_2_1) {
                e_2 = { error: e_2_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_2)
                        throw e_2.error;
                }
            }
        }
        var d = true;
        switch (b) {
            case "XAxisMajorStroke":
            case "XAxisMajorStrokeThickness":
                d = false;
                break;
        }
        if (d) {
            a(this.zoomSliderXAxis);
        }
    };
    FinancialChart.prototype.abk = function (a, b) {
        var e_3, _a;
        _super.prototype.abk.call(this, a, b);
        if (b) {
            a(this.volumeAxis);
            if (this.agd != null) {
                try {
                    for (var _b = __values(fromEnum(this.agd)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var c = _c.value;
                        a(c);
                    }
                }
                catch (e_3_1) {
                    e_3 = { error: e_3_1 };
                }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return))
                            _a.call(_b);
                    }
                    finally {
                        if (e_3)
                            throw e_3.error;
                    }
                }
            }
            a(this.zoomSliderAxis);
        }
    };
    FinancialChart.prototype.alm = function (a) {
        var b = typeCast(IZoomableCategoryAxis_$type, this.xAxis);
        if (b != null) {
            a(b);
        }
    };
    FinancialChart.prototype.abi = function (a) {
        _super.prototype.abi.call(this, a);
        this.aa9(this.volumeXAxis, a);
        this.aa9(this.indicatorXAxis, a);
        this.aa9(this.zoomSliderXAxis, a);
    };
    FinancialChart.prototype.abn = function (a) {
        _super.prototype.abn.call(this, a);
        this.aa9(this.volumeAxis, a);
        this.aa9(this.indicatorAxis, a);
        this.aa9(this.zoomSliderAxis, a);
    };
    FinancialChart.prototype.abl = function (a) {
        _super.prototype.abl.call(this, a);
        this.aa8(this.volumeAxis, a);
        this.aa8(this.indicatorAxis, a);
        this.aa8(this.zoomSliderAxis, a);
    };
    FinancialChart.prototype.abg = function (a) {
        _super.prototype.abg.call(this, a);
        this.aa8(this.volumeXAxis, a);
        this.aa8(this.indicatorXAxis, a);
        this.aa8(this.zoomSliderXAxis, a);
    };
    FinancialChart.prototype.r5 = function (a) {
        var _this = this;
        _super.prototype.r5.call(this, a);
        if (a == null) {
            return;
        }
        if (a == this.zoomSliderChart) {
            a.ul = a.uo = false;
            a.legend = null;
            if (this.dataChart != null) {
                a.ag = this.dataChart.ag;
                a.aj = this.dataChart.aj;
            }
        }
        else {
            SyncManager.d(a, ((function () {
                var $ret = new SyncSettings();
                $ret.syncChannel = _this.ajm();
                $ret.synchronizeHorizontally = true;
                $ret.synchronizeVertically = false;
                return $ret;
            })()));
            SyncManager.c(a);
        }
        a.ci = 2;
    };
    FinancialChart.prototype.ajm = function () {
        if (this.aij == null) {
            FinancialChart.ah3++;
            this.aij = FinancialChart.ah3.toString();
        }
        return this.aij;
    };
    FinancialChart.prototype.ak4 = function (a, b) {
        this.akq();
        this.alk();
    };
    FinancialChart.prototype.akq = function () {
        var e_4, _a;
        if (this.yAxis.b7()) {
            return;
        }
        var a = this.yAxis.av.bd;
        if (this.ad6 != 0) {
            a = Math.max(a, this.volumeAxis.av.bd);
        }
        try {
            for (var _b = __values(fromEnum(this.agd)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                a = Math.max(a, b.av.bd);
            }
        }
        catch (e_4_1) {
            e_4 = { error: e_4_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_4)
                    throw e_4.error;
            }
        }
        this.akr(a);
    };
    FinancialChart.prototype.akr = function (a) {
        var e_5, _a;
        if (this.yAxis.b7()) {
            return;
        }
        this.yAxis.er = this.volumeAxis.er = a;
        try {
            for (var _b = __values(fromEnum(this.agd)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var b = _c.value;
                b.er = a;
            }
        }
        catch (e_5_1) {
            e_5 = { error: e_5_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_5)
                    throw e_5.error;
            }
        }
        this.zoomSliderAxis.er = this.yAxis.er;
    };
    FinancialChart.prototype.akw = function (a) {
        if (this.indicatorCharts == null) {
            return;
        }
        for (var b = 0; b < this.indicatorCharts.count; b++) {
            var c = this.indicatorCharts._inner[b];
            for (var d = 0; d < c.series.count; d++) {
                var e = c.series._inner[d];
                if (!(this.afu(e))) {
                    continue;
                }
                a(c.series._inner[d], b);
            }
        }
    };
    FinancialChart.prototype.akz = function (a) {
        if (this.volumeChart == null) {
            return;
        }
        for (var b = 0; b < this.volumeChart.series.count; b++) {
            var c = this.volumeChart.series._inner[b];
            if (c.dd) {
                continue;
            }
            a(this.volumeChart.series._inner[b], b);
        }
    };
    FinancialChart.prototype.akx = function (a) {
        if (this.dataChart == null) {
            return;
        }
        for (var b = 0; b < this.dataChart.series.count; b++) {
            var c = this.dataChart.series._inner[b];
            if (!this.afw(c)) {
                continue;
            }
            a(c, b);
        }
    };
    FinancialChart.prototype.aky = function (a, b) {
        if (this.dataChart == null) {
            return;
        }
        for (var c = 0; c < this.dataChart.series.count; c++) {
            var d = this.dataChart.series._inner[c];
            if (this.afw(d)) {
                continue;
            }
            var e = this.ahx(d, c);
            a(d, e);
        }
        if (b) {
            this.ak0(a);
        }
    };
    FinancialChart.prototype.ak0 = function (a) {
        if (this.zoomSliderChart == null) {
            return;
        }
        for (var b = 0; b < this.zoomSliderChart.series.count; b++) {
            var c = this.zoomSliderChart.series._inner[b];
            if (c.dd) {
                continue;
            }
            a(this.zoomSliderChart.series._inner[b], b);
        }
    };
    FinancialChart.prototype.ahx = function (a, b) {
        if (a.cc != this.dataChart) {
            return b;
        }
        var c = this.bd == null || this.bd.dataSeries == null ? 0 : this.bd.dataSeries.count;
        var d = this.aeh == null ? 0 : this.aeh.count;
        return b - (c * d);
    };
    FinancialChart.prototype.rv = function (a) {
        _super.prototype.rv.call(this, a);
        this.akz(a);
        this.akw(a);
        this.ak0(a);
    };
    Object.defineProperty(FinancialChart.prototype, "volumeChart", {
        get: function () {
            return this.afc;
        },
        set: function (a) {
            var b = this.volumeChart;
            if (a != b) {
                this.afc = a;
                this.sv("VolumeChart", b, this.volumeChart);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.alp = function () {
        if (this.dataChart == null) {
            return;
        }
        this.volumeChart.series.clear();
        var a = new List$1(Series.$, 0);
        var b = -1;
        for (var c = 0; c < this.dataChart.series.count; c++) {
            var d = this.dataChart.series._inner[c];
            if (this.afw(d) || d.dd) {
                continue;
            }
            b++;
            var e = void 0;
            var f = this.ad6;
            f = this.ad5(f);
            switch (f) {
                case 2:
                    e = this.ae7();
                    break;
                case 3:
                    e = this.ae5();
                    break;
                default:
                case 1:
                    e = this.ae6();
                    break;
            }
            this.aen.setCategoryMode(e, 1);
            e.name = "volumeSeries_" + b;
            e.itemsSource = d.itemsSource;
            this.aen.setXAxis(e, this.volumeXAxis);
            this.aen.setYAxis(e, this.volumeAxis);
            this.aen.setValueMemberPath(e, this.bd != null && this.bd.dataSeries != null && this.bd.dataSeries.count > b ? this.bd.dataSeries._inner[b].getMemberPathFor(15) : null);
            e.title = d.title + " Volume";
            e.o9 = ArrayExtension.getModulus$1(Brush.$, this.ade, b);
            e.pe = ArrayExtension.getModulus$1(Brush.$, this.adf, b);
            e.g4 = this.ag8;
            a.add(e);
        }
        var g = this.gn("volume", false);
        if (g != null) {
            a.o(g);
        }
        for (var h = 0; h < a.count; h++) {
            var i = a._inner[h];
            this.volumeChart.series.add(i);
            this.sa(i, h);
        }
    };
    FinancialChart.prototype.aft = function (a) {
        if (!this.afp) {
            return false;
        }
        return this.aen.matchesType(a);
    };
    FinancialChart.prototype.afx = function (a) {
        if (!this.afs) {
            return false;
        }
        return this.ael.matchesType(a);
    };
    FinancialChart.prototype.afu = function (a) {
        if (!this.afq) {
            return false;
        }
        return this.aep.matchesType(a);
    };
    FinancialChart.prototype.afw = function (a) {
        if (!this.afr) {
            return false;
        }
        return this.aeu.matchesType(a);
    };
    FinancialChart.prototype.alo = function () {
        if (this.dataChart == null) {
            return;
        }
        var a = 0;
        var b = this.aef == null ? 0 : this.aef.count;
        var c = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
        var d = b + c;
        for (var e = 0; e < d; e++) {
            var f = new List$1(Series.$, 0);
            var g = this.indicatorCharts._inner[e];
            var h = e >= b;
            var i = h ? this.customIndicatorNames._inner[e - b] : EnumUtil.getName(FinancialIndicatorType_$type, this.aef._inner[e]);
            var j = -1;
            for (var k = 0; k < this.dataChart.series.count; k++) {
                var l = this.dataChart.series._inner[k];
                if (this.afw(l) || l.dd) {
                    continue;
                }
                j++;
                var m = void 0;
                if (h) {
                    var n = this.ae9("Custom");
                    this.aep.handleCustomIndicatorEvent(n, runOn(this, this.ak2));
                    m = n;
                }
                else {
                    m = this.afb(this.aef._inner[e]);
                }
                if (m == null) {
                    continue;
                }
                m.name = "indicator_" + a++;
                this.aep.setXAxis(m, this.agf._inner[e]);
                this.aep.setYAxis(m, this.agd._inner[e]);
                m.itemsSource = l.itemsSource;
                this.aep.setOpenMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(11));
                this.aep.setHighMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(12));
                this.aep.setLowMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(13));
                this.aep.setCloseMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(14));
                this.aep.setVolumeMemberPath(m, this.bd.dataSeries._inner[j].getMemberPathFor(15));
                m.title = l.title + " " + i;
                m.o9 = ArrayExtension.getModulus$1(Brush.$, this.ac8, e);
                m.g4 = this.ag4;
                if (this.afu(m)) {
                    this.aep.setNegativeBrush(m, ArrayExtension.getModulus$1(Brush.$, this.ac9, e));
                    this.aep.setDisplayType(m, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, this.aer, e));
                }
                if (this.ahz != -2147483648 && this.afu(m)) {
                    this.aep.setPeriodOverride(m, this.ahz);
                }
                if (this.afu(m)) {
                    this.aep.setSmoothingPeriod(m, this.ah2);
                }
                if (this.afu(m)) {
                    this.aep.setSignalPeriod(m, this.ah1);
                }
                if (this.afu(m)) {
                    this.aep.setShortPeriod(m, this.ah0);
                    this.aep.setLongPeriod(m, this.ahy);
                }
                this.sa(m, e);
                f.add(m);
            }
            var o = this.gn(i, false);
            for (var p = 0; p < f.count; p++) {
                var q = f._inner[p];
                g.series.add(q);
            }
            if (o != null) {
                for (var r = 0; r < o.count; r++) {
                    var s = o._inner[r];
                    g.series.add(s);
                    this.sa(s, r);
                }
            }
        }
    };
    FinancialChart.prototype.ae9 = function (indicatorName_) {
        return (this.externalObject.createIndicator(indicatorName_ + 'Indicator').i);
    };
    FinancialChart.prototype.afb = function (a) {
        return this.ae9(EnumUtil.getName(FinancialIndicatorType_$type, a));
    };
    FinancialChart.prototype.al6 = function (a) {
        if (this.adz == null) {
            return;
        }
        var b = this.xAxis;
        if (b.actualMinimumValue > b.actualMaximumValue) {
            return;
        }
        this.adz.as = b.actualMinimumValue;
        this.adz.ar = b.actualMaximumValue;
        if (a) {
            this.adz.au = b.visibleMinimum;
            this.adz.at = b.visibleMaximum;
        }
        this.adz.bn();
    };
    FinancialChart.prototype.j9 = function () {
        var e_6, _a, e_7, _b;
        var _this = this;
        var a = ((function () {
            var $ret = new FinancialChartVisualData();
            $ret.mainChart = _super.prototype.j9.call(_this);
            $ret.volumeChart = _this.volumeChart == null ? null : _this.volumeChart.vx();
            $ret.toolbar = _this.adz == null ? null : _this.adz.aj();
            $ret.zoomChart = _this.zoomSliderChart == null ? null : _this.zoomSliderChart.vx();
            return $ret;
        })());
        if (this.indicatorCharts != null) {
            a.indicatorCharts = new List$1(Base.$, 0);
            try {
                for (var _c = __values(fromEnum(this.indicatorCharts)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var b = _d.value;
                    a.indicatorCharts.add1(b.vx());
                }
            }
            catch (e_6_1) {
                e_6 = { error: e_6_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_6)
                        throw e_6.error;
                }
            }
        }
        if (this.dataChart != null) {
            a.mainChartLeft = this.amf(this.dataChart).x;
            a.mainChartTop = this.amf(this.dataChart).y;
        }
        if (this.volumeChart != null) {
            a.volumeChartLeft = this.amf(this.volumeChart).x;
            a.volumeChartTop = this.amf(this.volumeChart).y;
        }
        if (this.zoomSliderChart != null) {
            a.zoomChartLeft = this.amf(this.zoomSliderChart).x;
            a.zoomChartTop = this.amf(this.zoomSliderChart).y;
        }
        if (this.adz != null) {
            var c = this.amg(this.adz);
            a.toolbarLeft = c.left;
            a.toolbarTop = c.top;
            a.toolbarWidth = c.width;
            a.toolbarHeight = c.height;
        }
        if (this.indicatorCharts != null) {
            a.indicatorChartLefts = new List$1(Number_$type, 0);
            a.indicatorChartTops = new List$1(Number_$type, 0);
            try {
                for (var _e = __values(fromEnum(this.indicatorCharts)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var d = _f.value;
                    a.indicatorChartLefts.add(this.amf(d).x);
                    a.indicatorChartTops.add(this.amf(d).y);
                }
            }
            catch (e_7_1) {
                e_7 = { error: e_7_1 };
            }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return))
                        _b.call(_e);
                }
                finally {
                    if (e_7)
                        throw e_7.error;
                }
            }
        }
        var e = this.ami();
        a.legendLeft = e.left;
        a.legendTop = e.top;
        a.legendWidth = e.width;
        a.legendHeight = e.height;
        a.legend = this.aej == null ? null : this.aej.exportVisualData();
        return a;
    };
    FinancialChart.prototype.aio = function () {
        var a = this.j9();
        a.scaleByViewport();
        return a.serialize();
    };
    FinancialChart.prototype.afa = function (overlayName_) {
        return (this.externalObject.createOverlay(overlayName_ + 'Overlay').i);
    };
    FinancialChart.prototype.al5 = function () {
        var e_8, _a, e_9, _b;
        if (this.dataChart == null) {
            return;
        }
        var a = new List$1(Series.$, 0);
        try {
            for (var _c = __values(fromEnum(this.dataChart.series)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var b = _d.value;
                if (this.afw(b)) {
                    a.add(b);
                }
            }
        }
        catch (e_8_1) {
            e_8 = { error: e_8_1 };
        }
        finally {
            try {
                if (_d && !_d.done && (_a = _c.return))
                    _a.call(_c);
            }
            finally {
                if (e_8)
                    throw e_8.error;
            }
        }
        try {
            for (var _e = __values(fromEnum(a)), _f = _e.next(); !_f.done; _f = _e.next()) {
                var c = _f.value;
                this.dataChart.series.remove(c);
            }
        }
        catch (e_9_1) {
            e_9 = { error: e_9_1 };
        }
        finally {
            try {
                if (_f && !_f.done && (_b = _e.return))
                    _b.call(_e);
            }
            finally {
                if (e_9)
                    throw e_9.error;
            }
        }
        if (this.aeh == null) {
            return;
        }
        var d = new List$1(Series.$, 0);
        var e = -1;
        for (var f = 0; f < this.dataChart.series.count; f++) {
            var g = this.dataChart.series._inner[f];
            if (this.afw(g) || g.dd) {
                continue;
            }
            e++;
            for (var h = 0; h < this.aeh.count; h++) {
                var i = this.aeh._inner[h];
                var j = void 0;
                switch (i) {
                    case 1:
                        j = this.afa(EnumUtil.getName(FinancialOverlayType_$type, i));
                        break;
                    default:
                    case 0:
                        j = this.afa(EnumUtil.getName(FinancialOverlayType_$type, i));
                        break;
                }
                j.name = g.name + "_" + EnumUtil.getName(FinancialOverlayType_$type, i);
                this.aeu.setXAxis(j, this.xAxis);
                this.aeu.setYAxis(j, this.yAxis);
                j.itemsSource = g.itemsSource;
                var k = e * this.aeh.count + h;
                j.o9 = ArrayExtension.getModulus$1(Brush.$, this.adc, k);
                j.pe = ArrayExtension.getModulus$1(Brush.$, this.add, k);
                j.g4 = this.ag6;
                j.title = g.title + " " + EnumUtil.getName(FinancialOverlayType_$type, i);
                var l = g;
                if (l == null) {
                    continue;
                }
                var m = this.bd.dataSeries._inner[e];
                this.aeu.setOpenMemberPath(j, m.getMemberPathFor(11));
                this.aeu.setHighMemberPath(j, m.getMemberPathFor(12));
                this.aeu.setLowMemberPath(j, m.getMemberPathFor(13));
                this.aeu.setCloseMemberPath(j, m.getMemberPathFor(14));
                this.aeu.setVolumeMemberPath(j, m.getMemberPathFor(15));
                d.add(j);
            }
        }
        var n = new Array(this.dataChart.series.count);
        this.dataChart.series.copyTo(n, 0);
        this.dataChart.skipDataCleanup = true;
        this.dataChart.series.clear();
        this.dataChart.skipDataCleanup = false;
        for (var o = 0; o < n.length; o++) {
            n[o].index = -1;
        }
        d.o(n);
        for (var p = 0; p < d.count; p++) {
            var q = d._inner[p];
            this.dataChart.series.add(q);
            this.sa(q, p);
        }
    };
    FinancialChart.prototype.al3 = function () {
        var e_10, _a;
        if (this.af2) {
            return;
        }
        this.af2 = true;
        if (this.indicatorCharts != null) {
            var a = this.indicatorCharts;
            this.indicatorCharts = null;
            try {
                for (var _b = __values(fromEnum(a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var b = _c.value;
                    this.alj(b);
                }
            }
            catch (e_10_1) {
                e_10 = { error: e_10_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_10)
                        throw e_10.error;
                }
            }
        }
        if ((this.aef == null || this.aef.count == 0) && (this.customIndicatorNames == null || this.customIndicatorNames.count == 0)) {
            this.indicatorCharts = null;
            if (this.agd != null) {
                this.agd.clear();
            }
            if (this.agf != null) {
                this.agf.clear();
            }
            this.alu();
            this.al4();
            this.af2 = false;
            return;
        }
        if (this.indicatorCharts == null) {
            this.indicatorCharts = new List$1(XamDataChart.$, 0);
        }
        this.indicatorCharts.clear();
        this.agd.clear();
        this.agf.clear();
        var c = this.aef == null ? 0 : this.aef.count;
        var d = this.customIndicatorNames == null ? 0 : this.customIndicatorNames.count;
        var e = c + d;
        for (var f = 0; f < e; f++) {
            var g = new XamDataChart();
            this.indicatorCharts.add(g);
            this.alh(g);
            var h = f >= c;
            if (h) {
                g.kh = this.customIndicatorNames._inner[f - c];
            }
            else {
                g.kh = this.aiq(this.aef._inner[f]);
            }
            if (this.indicatorAxis != null) {
                var i = void 0;
                var j = void 0;
                if (f == 0) {
                    i = this.indicatorAxis;
                    j = this.indicatorXAxis;
                }
                else {
                    i = new NumericYAxis();
                    if (!this.indicatorXAxis.cd) {
                        j = this.adl(0);
                    }
                    else {
                        j = this.adl(1);
                    }
                }
                j.name = "indicatorXAxis_" + f;
                i.name = "indicatorAxis_" + f;
                g.axes.add(i);
                g.axes.add(j);
                this.agd.add(i);
                this.agf.add(j);
                if (this.fi) {
                    this.abc(i);
                }
                if (this.fi) {
                    this.aba(j);
                }
            }
        }
        this.alo();
        this.alu();
        if (this.adz != null) {
            this.adz.ae = this.aef;
        }
        this.aks();
        this.al4();
        this.af2 = false;
    };
    FinancialChart.prototype.r2 = function () {
        var e_11, _a, e_12, _b;
        _super.prototype.r2.call(this);
        this.aba(this.xAxis);
        this.aba(this.volumeXAxis);
        if (this.agf != null) {
            try {
                for (var _c = __values(fromEnum(this.agf)), _d = _c.next(); !_d.done; _d = _c.next()) {
                    var a = _d.value;
                    this.aba(a);
                }
            }
            catch (e_11_1) {
                e_11 = { error: e_11_1 };
            }
            finally {
                try {
                    if (_d && !_d.done && (_a = _c.return))
                        _a.call(_c);
                }
                finally {
                    if (e_11)
                        throw e_11.error;
                }
            }
        }
        this.abc(this.yAxis);
        this.abc(this.volumeAxis);
        if (this.agd != null) {
            try {
                for (var _e = __values(fromEnum(this.agd)), _f = _e.next(); !_f.done; _f = _e.next()) {
                    var b = _f.value;
                    this.abc(b);
                }
            }
            catch (e_12_1) {
                e_12 = { error: e_12_1 };
            }
            finally {
                try {
                    if (_f && !_f.done && (_b = _e.return))
                        _b.call(_e);
                }
                finally {
                    if (e_12)
                        throw e_12.error;
                }
            }
        }
        this.aba(this.zoomSliderXAxis);
        this.abc(this.zoomSliderAxis);
    };
    FinancialChart.prototype.get_f8 = function () {
        return !this.af0;
    };
    Object.defineProperty(FinancialChart.prototype, "af8", {
        get: function () {
            return (this.externalObject._dynamicContent);
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.amb = function (a, b) {
        this.alx(a, b);
        this.aks();
        if (this.zoomSliderChart != null) {
            this.zoomSliderChart.axes.add(this.zoomSliderAxis);
            this.zoomSliderChart.axes.add(this.zoomSliderXAxis);
        }
        this.alq();
        this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
        this.alv();
        this.amc(a, b);
    };
    FinancialChart.prototype.alq = function () {
        if (this.dataChart == null || this.zoomSliderChart == null) {
            return;
        }
        this.zoomSliderChart.series.clear();
        var a = new List$1(Series.$, 0);
        for (var b = 0; b < this.dataChart.series.count; b++) {
            var c = this.dataChart.series._inner[b];
            if (this.afw(c) || c.dd) {
                continue;
            }
            var d = void 0;
            var e = this.aed;
            e = this.aec(e);
            var f = this.ahx(c, b);
            if (e == 1) {
                switch (this.ad3(this.bd != null && this.bd.dataSeries != null && this.bd.dataSeries.count > f ? this.bd.dataSeries._inner[f] : null)) {
                    case 1:
                        e = 2;
                        break;
                    case 2:
                        e = 3;
                        break;
                    case 3:
                        e = 4;
                        break;
                    case 4:
                        e = 5;
                        break;
                }
            }
            switch (e) {
                case 2:
                    d = this.ae8();
                    this.ael.setDisplayType(d, 1);
                    break;
                case 3:
                    d = this.ae8();
                    this.ael.setDisplayType(d, 0);
                    break;
                case 5:
                    d = this.ae7();
                    break;
                case 6:
                    d = this.ae5();
                    break;
                default:
                case 4:
                    d = this.ae6();
                    break;
            }
            var g = this.bd != null && this.bd.dataSeries != null && this.bd.dataSeries.count > f ? this.bd.dataSeries._inner[f] : null;
            if (d.dj && !d.ds) {
                this.aen.setCategoryMode(d, 1);
                this.aen.setXAxis(d, this.zoomSliderXAxis);
                this.aen.setYAxis(d, this.zoomSliderAxis);
                this.aen.setValueMemberPath(d, g == null ? null : this.air(g));
            }
            else if (d.ds) {
                this.ael.setCategoryMode(d, 1);
                this.ael.setXAxis(d, this.zoomSliderXAxis);
                this.ael.setYAxis(d, this.zoomSliderAxis);
                if (g != null) {
                    this.ael.setOpenMemberPath(d, g.getMemberPathFor(11));
                    this.ael.setHighMemberPath(d, g.getMemberPathFor(12));
                    this.ael.setLowMemberPath(d, g.getMemberPathFor(13));
                    this.ael.setCloseMemberPath(d, g.getMemberPathFor(14));
                    this.ael.setVolumeMemberPath(d, g.getMemberPathFor(15));
                }
            }
            d.name = "zoomSliderSeries_" + f;
            d.itemsSource = c.itemsSource;
            d.title = c.title;
            d.g4 = this.i1;
            a.add(d);
        }
        for (var h = 0; h < a.count; h++) {
            var i = a._inner[h];
            this.zoomSliderChart.series.add(i);
            this.sa(i, h);
        }
    };
    FinancialChart.prototype.sp = function (a, b, c) {
        var e_13, _a;
        _super.prototype.sp.call(this, a, b, c);
        if (a == null || !b) {
            return;
        }
        var d = true;
        var e = true;
        switch (c) {
            case "Brushes":
            case "Outlines":
                d = e = false;
                break;
        }
        if (this.indicatorCharts != null && d) {
            try {
                for (var _b = __values(fromEnum(this.indicatorCharts)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var f = _c.value;
                    a(f);
                }
            }
            catch (e_13_1) {
                e_13 = { error: e_13_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_13)
                        throw e_13.error;
                }
            }
        }
        if (this.volumeChart != null && e) {
            a(this.volumeChart);
        }
        if (this.zoomSliderChart != null) {
            a(this.zoomSliderChart);
        }
    };
    FinancialChart.prototype.ak2 = function (a, b) {
        var c = b;
        var d = a;
        var e = -1;
        if (this.indicatorCharts != null) {
            e = this.indicatorCharts.indexOf(d.cc);
        }
        e -= this.aef == null ? 0 : this.aef.count;
        if (this.applyCustomIndicators != null) {
            this.applyCustomIndicators(this, new FinancialChartCustomIndicatorArgs(c, d, e));
        }
    };
    FinancialChart.prototype.alz = function (a, b, c) {
        if (a != null) {
            if (b != null) {
                a.axes.remove(b);
            }
            a.axes.add(c);
        }
        if (this.fi) {
            this.aba(c);
        }
    };
    Object.defineProperty(FinancialChart.prototype, "af7", {
        get: function () {
            return TypeRegistrar.isRegistered("IgxZoomSliderComponent");
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.ak3 = function (a, b) {
        this.al3();
    };
    FinancialChart.prototype.afy = function (a, b) {
        if (b <= (0)) {
            return false;
        }
        switch (a) {
            case 5: return true;
            case 4:
            case 3: return b >= timeSpanFromDays(365);
            case 2: return b >= timeSpanFromDays(180);
            case 1: return b >= timeSpanFromDays(90);
            case 0: return b >= timeSpanFromDays(30);
        }
        return false;
    };
    FinancialChart.prototype.alt = function () {
        var e_14, _a;
        var a = this.adx != null ? this.adx : new FinancialChartRangeSelectorOptionCollection(1, [5, 4, 3, 2, 1, 0]);
        var b = new FinancialChartRangeSelectorOptionCollection(0);
        var c = this.xAxis;
        var d = +(c.actualMaximumValue) - +(c.actualMinimumValue);
        try {
            for (var _b = __values(fromEnum(a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var e = _c.value;
                if (this.afy(e, d)) {
                    b.add(e);
                }
            }
        }
        catch (e_14_1) {
            e_14 = { error: e_14_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_14)
                    throw e_14.error;
            }
        }
        this.adw = b;
        if (this.adz != null) {
            this.adz.u = this.adw;
        }
    };
    FinancialChart.prototype.ak7 = function (a, b) {
        this.alt();
    };
    FinancialChart.prototype.alc = function (a, b) {
        this.aeh = this.adz.ag;
    };
    FinancialChart.prototype.alb = function (a, b) {
        this.aef = this.adz.ae;
    };
    FinancialChart.prototype.ak5 = function (a, b) {
        this.al3();
    };
    FinancialChart.prototype.ak6 = function (a, b) {
        this.al5();
    };
    FinancialChart.prototype.alg = function (a, b) {
        var c = a;
        if (c.bf == null) {
            return;
        }
        if (this.af0) {
            this.als(c.bf);
        }
    };
    FinancialChart.prototype.alj = function (a) {
        SyncManager.e(a);
        a.axes.clear();
        a.series.clear();
        a.gridAreaRectChanged = delegateRemove(a.gridAreaRectChanged, runOn(this, this.ak4));
        a.provideContainer(null);
        if (this.volumeChart == null && this.indicatorCharts == null) {
            this.yAxis.er = this.volumeAxis.er = this.indicatorAxis.er = 0;
            this.xAxis.ay.visibility = this.acy;
        }
    };
    FinancialChart.prototype.alh = function (a) {
        var b = a != this.zoomSliderChart;
        if (b) {
            if (this.dataChart != null) {
                a.tq = new Rect(0, this.dataChart.ta.x, a.tq.y, this.dataChart.ta.width, a.tq.height);
            }
            var c = ((function () {
                var $ret = new SyncSettings();
                $ret.syncChannel = "one";
                $ret.synchronizeHorizontally = true;
                $ret.synchronizeVertically = false;
                return $ret;
            })());
            SyncManager.d(a, c);
            SyncManager.c(a);
        }
        a.gridAreaRectChanged = delegateCombine(a.gridAreaRectChanged, runOn(this, this.ak4));
        this.r4(a);
    };
    FinancialChart.prototype.aks = function () {
        if (this.indicatorCharts != null || this.volumeChart != null) {
            this.aa8(this.xAxis, function (a) { return a.visibility = 1; });
        }
        var _loop_1 = function (a) {
            var b = this_1.agf._inner[a];
            var c = a < this_1.agf.count - 1 || this_1.volumeChart != null;
            this_1.aa8(b, function (d) { return d.visibility = c ? 1 : 0; });
        };
        var this_1 = this;
        for (var a = 0; a < this.agf.count; a++) {
            _loop_1(a);
        }
    };
    FinancialChart.prototype.alx = function (a, b) {
        if (a != null) {
            this.alj(a);
        }
        if (b != null) {
            this.alh(b);
        }
    };
    FinancialChart.prototype.al9 = function (a, b) {
        this.alx(a, b);
        this.aks();
        if (this.volumeChart != null) {
            if (this.volumeAxis != null) {
                this.volumeChart.axes.add(this.volumeAxis);
                this.volumeChart.axes.add(this.volumeXAxis);
            }
            this.alp();
            this.volumeXAxis.itemsSource = this.xAxis.itemsSource;
        }
        this.ama(a, b);
    };
    FinancialChart.prototype.ak8 = function (a, b) {
        this.al7();
    };
    FinancialChart.prototype.al7 = function () {
        if (this.adz == null || +(this.adz.au) == +(dateMaxValue()) || +(this.adz.at) == +(dateMinValue()) || this.dataChart == null) {
            return;
        }
        var a = this.xAxis;
        var b = a.getWindowRectForSelection(this.adz.au, this.adz.at);
        if (b.width == 0 || isNaN_(b.width) || isInfinity(b.width)) {
            return;
        }
        this.af1 = true;
        this.dataChart.tq = new Rect(0, b.left, this.dataChart.tq.top, b.width, this.dataChart.tq.height);
        if (this.afh != null) {
            this.afh.windowRect = this.dataChart.ta;
        }
        if (this.af0) {
            this.als(this.dataChart);
        }
        this.af1 = false;
    };
    FinancialChart.prototype.alf = function (a, b) {
        this.alt();
        this.al6(!this.af1);
    };
    FinancialChart.prototype.ak1 = function (a, b) {
        var _this = this;
        if (!this.af1) {
            if (this.af0) {
                this.als(a);
            }
            var c = false;
            var d = this.s2(function () { return _this.al6(true); }, c);
            c = d.p1;
            if (this.afh != null) {
                this.afh.windowRect = this.dataChart.ta;
            }
        }
    };
    FinancialChart.prototype.al1 = function (a, b, c, d) {
        var e_15, _a;
        if (a == null || b == null) {
            return;
        }
        if (c != -1) {
            this.af1 = true;
            a.tq = new Rect(0, d, a.ta.top, c, a.ta.height);
            this.af1 = false;
        }
        var e = 1.7976931348623157E+308;
        var f = -1.7976931348623157E+308;
        var g = new Rect(0, 0, 0, 1, 1);
        var h = new ScalerParams(0, g, g, this.yAxis.cg, a.te);
        try {
            for (var _b = __values(fromEnum(a.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var i = _c.value;
                h.b = i.gg();
                var j = i.ar(a.ta);
                var k = j == null || j.c == 1.7976931348623157E+308 || isNaN_(j.c);
                if (k) {
                    continue;
                }
                var l = b.ei(j.c, h);
                var m = b.ei(j.b, h);
                f = Math.max(f, l);
                e = Math.min(e, m);
            }
        }
        catch (e_15_1) {
            e_15 = { error: e_15_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_15)
                    throw e_15.error;
            }
        }
        var n = a.ta.width;
        if (c != -1) {
            n = c;
        }
        var o = a.ta.left;
        if (d != -1) {
            o = d;
        }
        if (e == 1.7976931348623157E+308 || f == -1.7976931348623157E+308 || isNaN_(e) || isNaN_(f)) {
            return;
        }
        this.af1 = true;
        var p = new Rect(0, o, e, n, f - e);
        a.tq = p;
        this.af1 = false;
    };
    FinancialChart.prototype.al0 = function (a) {
        if (a == null) {
            return;
        }
        if (a == this.dataChart) {
            this.al1(this.dataChart, this.yAxis, -1, -1);
            if (this.volumeChart != null) {
                this.al1(this.volumeChart, this.volumeAxis, this.dataChart.ta.width, this.dataChart.ta.left);
            }
        }
        else if (a == this.volumeChart) {
            this.al1(this.volumeChart, this.volumeAxis, -1, -1);
            this.al1(this.dataChart, this.yAxis, this.volumeChart.ta.width, this.volumeChart.ta.left);
        }
    };
    FinancialChart.prototype.als = function (a) {
        var _this = this;
        this.s1(function () { return _this.al0(a); });
    };
    FinancialChart.prototype.ak9 = function (a, b) {
        if (this.af0) {
            this.als(a);
        }
    };
    FinancialChart.prototype.al8 = function () {
        if (!this.af8) {
            return;
        }
        this.akv();
        if (this.aed == 0) {
            this.zoomSliderChart = null;
        }
        else if (this.zoomSliderChart == null) {
            this.zoomSliderChart = ((function () {
                var $ret = new XamDataChart();
                $ret.name = "ZoomSliderChart";
                return $ret;
            })());
        }
        else {
            this.alq();
        }
    };
    FinancialChart.prototype.akv = function () {
        var container_ = this.ahp.rootWrapper.getNativeElement();
        var containerParent_ = container_.parentElement;
        if (this.afh != null && containerParent_ != null && !this.af9) {
            this.af9 = true;
            if (TypeRegistrar.isRegistered("IgxZoomSliderComponent")) {
                var z_ = this.afh;
                var f_ = this.externalObject;
                var sliderComponent_ = TypeRegistrar.get("IgxZoomSliderComponent");
                var sliderInstance_ = TypeRegistrar.create("IgxZoomSliderComponent");
                sliderInstance_._implementation = z_;
                sliderComponent_._staticStyling(container_, sliderInstance_, f_);
            }
        }
    };
    FinancialChart.prototype.al2 = function () {
        var _this = this;
        if (this.ad8 != 1) {
            return;
        }
        this.abe(function (a) {
            var e_16, _a;
            var b;
            b = a.breaks;
            b.clear();
            if (_this.xAxisBreaks == null) {
                return;
            }
            try {
                for (var _b = __values(fromEnum(_this.xAxisBreaks)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    b.add(c);
                }
            }
            catch (e_16_1) {
                e_16 = { error: e_16_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_16)
                        throw e_16.error;
                }
            }
        });
    };
    FinancialChart.prototype.tn = function (a, b, c) {
        _super.prototype.tn.call(this, a, b, c);
        if (this.bd.dataSeries.count > 0) {
            if (this.ad8 == 1 && stringIsNullOrEmpty(this.lm)) {
                this.b3.setXMemberPath(a, c.getMemberPathFor(17));
            }
            if (stringIsNullOrEmpty(this.lo)) {
                this.b3.setYMemberPath(a, this.air(c));
            }
            if (stringIsNullOrEmpty(this.li)) {
                this.b3.setLabelMemberPath(a, this.air(c));
            }
            if (stringIsNullOrEmpty(this.lf)) {
                this.b3.setContentMemberPath(a, this.air(c));
            }
        }
    };
    FinancialChart.prototype.aiq = function (a) {
        switch (a) {
            case 0: return "Absolute Volume Oscillator";
            case 1: return "Accumulation/Distribution Indicator";
            case 2: return "Average Directional Index";
            case 3: return "Average True Range Indicator";
            case 4: return "Bollinger Bandwidth";
            case 5: return "Chaikin Oscillator";
            case 6: return "Chaikin Volatility Indicator";
            case 7: return "Commodity Channel Index";
            case 8: return "Detrended Price Oscillator";
            case 9: return "Ease of Movement Indicator";
            case 10: return "Fast Stochastic Oscillator";
            case 11: return "Force Index Indicator";
            case 12: return "Full Stochastic Oscillator";
            case 13: return "Market Facilitation Index";
            case 14: return "Mass Index Indicator";
            case 15: return "Median Price Indicator";
            case 16: return "Money Flow Index";
            case 17: return "MACD Indicator";
            case 18: return "Negative Volume Index";
            case 19: return "On Balance Volume Indicator";
            case 20: return "Percentage Price Oscillator";
            case 21: return "Percentage Volume Oscillator";
            case 22: return "Positive Volume Index";
            case 23: return "Price Volume Trend";
            case 24: return "ROC - Rate of Change Indicator";
            case 25: return "RSI - Relative Strength Index";
            case 26: return "Slow Stochastic Oscillator";
            case 27: return "Standard Deviation Indicator";
            case 28: return "Stoch RSI";
            case 29: return "TRIX Indicator";
            case 30: return "Typical Price Indicator";
            case 31: return "Ultimate Oscillator";
            case 32: return "Weighted Close Indicator";
            case 33: return "Williams %R Indicator";
            default: return "Unknown";
        }
    };
    FinancialChart.prototype.aba = function (a) {
        var e_17, _a;
        var _this = this;
        _super.prototype.aba.call(this, a);
        var b = a;
        this.ali(b);
        if (a.bf != null) {
            try {
                for (var _b = __values(fromEnum(a.bf.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var c = _c.value;
                    if (this.aft(c)) {
                        this.aen.setXAxis(c, b);
                    }
                    else if (this.afx(c)) {
                        this.ael.setXAxis(c, b);
                    }
                    else if (this.afu(c)) {
                        this.aep.setXAxis(c, b);
                    }
                    else if (this.afw(c)) {
                        this.aeu.setXAxis(c, b);
                    }
                }
            }
            catch (e_17_1) {
                e_17 = { error: e_17_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_17)
                        throw e_17.error;
                }
            }
        }
        this.alm(function (d) {
            d.zoomMaximumCategoryRange = _this.ag9;
            d.zoomMaximumItemSpan = _this.aha;
            d.zoomToCategoryRange = _this.ahb;
            d.zoomToCategoryStart = _this.ahc;
            d.zoomToItemSpan = _this.ahd;
        });
        var d = a == this.zoomSliderXAxis;
        if (d) {
            a.jv = this.ame;
            a.eq = this.ahk;
            this.aa8(a, function (e) { return e.visibility = 1; });
        }
        var e = a;
        e.minimumValue = this.agl;
        e.maximumValue = this.agk;
        a.b0 = this.af3;
    };
    FinancialChart.prototype.abc = function (a) {
        var e_18, _a;
        _super.prototype.abc.call(this, a);
        if (a.bf != null && a == this.yAxis) {
            try {
                for (var _b = __values(fromEnum(a.bf.series)), _c = _b.next(); !_c.done; _c = _b.next()) {
                    var b = _c.value;
                    if (this.aft(b)) {
                        this.aen.setYAxis(b, this.yAxis);
                    }
                    else if (this.afx(b)) {
                        this.ael.setYAxis(b, this.yAxis);
                    }
                    else if (this.afu(b)) {
                        this.aep.setYAxis(b, this.yAxis);
                    }
                    else if (this.afw(b)) {
                        this.aeu.setYAxis(b, this.yAxis);
                    }
                }
            }
            catch (e_18_1) {
                e_18 = { error: e_18_1 };
            }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return))
                        _a.call(_b);
                }
                finally {
                    if (e_18)
                        throw e_18.error;
                }
            }
        }
        a.k9 = this.af4;
        a.l4 = this.ahi;
        a.l3 = this.ahh;
        if (a == this.yAxis) {
            a.l0 = this.ahg;
        }
        var c = a == this.zoomSliderAxis;
        if (c) {
            this.aa8(a, function (d) { return d.visibility = 1; });
        }
        a.b0 = this.af5;
    };
    FinancialChart.prototype.ali = function (a) {
        a.itemsSource = this.dataChart != null && this.dataChart.series.count > 0 ? this.dataChart.series._inner[0].itemsSource : null;
        a.fz = XYChart.yx(a, this.bd.dataSeries);
        if (this.bd.dataSeries.count > 0) {
            var b = this.bd.dataSeries._inner[0].getMemberPathFor(17);
            a.hx(b);
        }
    };
    FinancialChart.prototype.sa = function (a, b) {
        _super.prototype.sa.call(this, a, b);
        if (a == null) {
            return;
        }
        var c = this.zoomSliderChart == a.cc;
        var d = this.dataChart != null && this.dataChart.series.contains(a);
        if ((d || c) && a.d6) {
            a.ms(this.ada != null ? ArrayExtension.getModulus$1(Brush.$, this.ada, b) : null, this.adb != null ? ArrayExtension.getModulus$1(Brush.$, this.adb, b) : null);
        }
        var e = this.afu(a);
        if (this.afw(a)) {
            a.o9 = this.adc != null ? ArrayExtension.getModulus$1(Brush.$, this.adc, b) : null;
            a.pe = this.add != null ? ArrayExtension.getModulus$1(Brush.$, this.add, b) : null;
            a.g4 = this.ag6;
        }
        else if (e) {
            a.o9 = this.ac8 != null ? ArrayExtension.getModulus$1(Brush.$, this.ac8, b) : null;
            a.g4 = this.ag4;
        }
        else if (!a.dd && (d || c)) {
            a.o9 = this.ab != null ? ArrayExtension.getModulus$1(Brush.$, this.ab, b) : null;
            a.pe = this.af != null ? ArrayExtension.getModulus$1(Brush.$, this.af, b) : null;
        }
        var f = this.volumeChart != null && this.volumeChart == a.cc;
        if (f) {
            a.g4 = this.ag8;
        }
        a.legend = c || f || e || !a.isUsableInLegend ? null : this.legend != null ? this.legend : this.afv ? this.aej : null;
    };
    FinancialChart.prototype.sv = function (a, b, c) {
        var e_19, _a, e_20, _b;
        var _this = this;
        _super.prototype.sv.call(this, a, b, c);
        switch (a) {
            case "YAxisIsLogarithmic":
                this.yAxis.lh = this.af6;
                if (this.volumeAxis != null) {
                    this.volumeAxis.lh = this.af6;
                }
                if (this.zoomSliderAxis != null) {
                    this.zoomSliderAxis.lh = this.af6;
                }
                break;
            case "YAxisLogarithmBase":
                this.yAxis.l8 = this.ah4;
                if (this.volumeAxis != null) {
                    this.volumeAxis.l8 = this.ah4;
                }
                if (this.zoomSliderAxis != null) {
                    this.zoomSliderAxis.l8 = this.ah4;
                }
                break;
            case "VolumeType":
                var d = EnumUtil.getEnumValue(FinancialChartVolumeType_$type, b);
                if (this.ad6 == 0) {
                    this.volumeChart = null;
                }
                else if (this.volumeChart == null) {
                    this.volumeChart = ((function () {
                        var $ret = new XamDataChart();
                        $ret.name = "VolumeChart";
                        return $ret;
                    })());
                }
                else {
                    this.alp();
                }
                break;
            case "VolumeChart":
                this.al9(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                break;
            case "DataChart":
                if (typeCast(XamDataChart.$, b) !== null) {
                    var e = b;
                    e.gridAreaRectChanged = delegateRemove(e.gridAreaRectChanged, runOn(this, this.ak4));
                    e.actualWindowRectChanged = delegateRemove(e.actualWindowRectChanged, runOn(this, this.ak1));
                    e.seriesDataUpdated = delegateRemove(e.seriesDataUpdated, runOn(this, this.ak9));
                }
                if (this.dataChart != null) {
                    var f = this.dataChart;
                    f.gridAreaRectChanged = delegateCombine(f.gridAreaRectChanged, runOn(this, this.ak4));
                    var g = this.dataChart;
                    g.actualWindowRectChanged = delegateCombine(g.actualWindowRectChanged, runOn(this, this.ak1));
                    var h = this.dataChart;
                    h.seriesDataUpdated = delegateCombine(h.seriesDataUpdated, runOn(this, this.ak9));
                }
                this.al8();
                break;
            case "XAxisMode":
                this.xAxis = this.adl(this.ad8);
                this.xAxis.name = "xAxis";
                this.volumeXAxis = this.adl(this.ad8);
                this.volumeXAxis.name = "volumeXAxis";
                this.indicatorXAxis = this.adl(this.ad8);
                this.indicatorXAxis.name = "indicatorXAxis_0";
                this.zoomSliderXAxis = this.adl(this.ad8);
                this.zoomSliderXAxis.name = "zoomSliderXAxis";
                this.aa8(this.zoomSliderXAxis, function (i) { return i.visibility = 1; });
                this.aks();
                if (this.ad8 == 1) {
                    this.al2();
                }
                break;
            case "YAxisMode":
                this.yAxis = this.aez(this.aea);
                this.yAxis.name = "yAxis";
                this.zoomSliderAxis = this.aez(this.aea);
                this.zoomSliderAxis.name = "zoomSliderAxis";
                this.volumeAxis = this.aez(this.aea);
                this.volumeAxis.name = "volumeAxis";
                break;
            case "Toolbar":
                var i = typeCast(FinancialChartToolbar.$, b);
                if (i != null) {
                    i.rangeChanged = delegateRemove(i.rangeChanged, runOn(this, this.ak8));
                    i.indicatorTypesChanged = delegateRemove(i.indicatorTypesChanged, runOn(this, this.alb));
                    i.overlayTypesChanged = delegateRemove(i.overlayTypesChanged, runOn(this, this.alc));
                }
                if (this.adz != null) {
                    this.adz.ae = this.aef;
                    this.adz.ag = this.aeh;
                    this.adz.u = this.adw;
                    this.al6(true);
                    var j = this.adz;
                    j.rangeChanged = delegateCombine(j.rangeChanged, runOn(this, this.ak8));
                    var k = this.adz;
                    k.indicatorTypesChanged = delegateCombine(k.indicatorTypesChanged, runOn(this, this.alb));
                    var l = this.adz;
                    l.overlayTypesChanged = delegateCombine(l.overlayTypesChanged, runOn(this, this.alc));
                }
                break;
            case "XAxis":
                var m = typeCast(CategoryAxisBase.$, b);
                if (m != null) {
                    if (this.dataChart != null) {
                        this.dataChart.axes.remove(m);
                    }
                }
                var n = typeCast(ITimeRangeSelectorAxis_$type, b);
                if (n != null) {
                    n.visibleRangeChanged = delegateRemove(n.visibleRangeChanged, runOn(this, this.alf));
                }
                if (this.dataChart != null) {
                    this.dataChart.axes.add(this.xAxis);
                }
                if (this.fi) {
                    this.aba(this.xAxis);
                    this.rs();
                }
                this.al6(false);
                this.al7();
                this.alt();
                var o = this.xAxis;
                o.visibleRangeChanged = delegateCombine(o.visibleRangeChanged, runOn(this, this.alf));
                break;
            case "XAxisZoomMaximumCategoryRange":
                this.alm(function (p) { return p.zoomMaximumCategoryRange = _this.ag9; });
                break;
            case "XAxisZoomMaximumItemSpan":
                this.alm(function (p) { return p.zoomMaximumItemSpan = _this.aha; });
                break;
            case "XAxisZoomToCategoryRange":
                this.alm(function (p) { return p.zoomToCategoryRange = _this.ahb; });
                break;
            case "XAxisZoomToCategoryStart":
                this.alm(function (p) { return p.zoomToCategoryStart = _this.ahc; });
                break;
            case "XAxisZoomToItemSpan":
                this.alm(function (p) { return p.zoomToItemSpan = _this.ahd; });
                break;
            case "ChartType":
                this.th();
                break;
            case "VolumeXAxis":
                this.alz(this.volumeChart, typeCast(Axis.$, b), this.volumeXAxis);
                break;
            case "ZoomSliderXAxis":
                this.alz(this.zoomSliderChart, typeCast(Axis.$, b), this.zoomSliderXAxis);
                break;
            case "IndicatorXAxis":
                this.al3();
                break;
            case "YAxis":
                var p = typeCast(NumericYAxis.$, b);
                if (p != null) {
                    if (this.dataChart != null) {
                        this.dataChart.axes.remove(p);
                    }
                }
                if (this.dataChart != null) {
                    this.dataChart.axes.add(this.yAxis);
                }
                if (this.fi) {
                    this.abc(this.yAxis);
                    this.abc(this.yAxis);
                }
                var q = this.yAxis;
                q.rangeChanged = delegateCombine(q.rangeChanged, runOn(this, this.alg));
                break;
            case "VolumeAxis":
                var r = typeCast(Axis.$, b);
                if (this.volumeChart != null && r != null) {
                    this.volumeChart.axes.remove(r);
                }
                if (this.volumeChart != null && this.volumeAxis != null) {
                    this.volumeChart.axes.add(this.volumeAxis);
                    this.alp();
                }
                if (this.fi) {
                    this.abc(this.volumeAxis);
                }
                var s = this.volumeAxis;
                s.rangeChanged = delegateCombine(s.rangeChanged, runOn(this, this.alg));
                break;
            case "IndicatorAxis":
                if (this.indicatorCharts != null) {
                    for (var t = 0; t < this.indicatorCharts.count; t++) {
                        var u = this.indicatorCharts._inner[t];
                        var v = new List$1(Axis.$, 0);
                        try {
                            for (var _c = (e_19 = void 0, __values(fromEnum(u.axes))), _d = _c.next(); !_d.done; _d = _c.next()) {
                                var w = _d.value;
                                if (typeCast(NumericYAxis.$, w) !== null) {
                                    v.add(w);
                                }
                            }
                        }
                        catch (e_19_1) {
                            e_19 = { error: e_19_1 };
                        }
                        finally {
                            try {
                                if (_d && !_d.done && (_a = _c.return))
                                    _a.call(_c);
                            }
                            finally {
                                if (e_19)
                                    throw e_19.error;
                            }
                        }
                        try {
                            for (var _e = (e_20 = void 0, __values(fromEnum(v))), _f = _e.next(); !_f.done; _f = _e.next()) {
                                var x = _f.value;
                                u.axes.remove(x);
                            }
                        }
                        catch (e_20_1) {
                            e_20 = { error: e_20_1 };
                        }
                        finally {
                            try {
                                if (_f && !_f.done && (_b = _e.return))
                                    _b.call(_e);
                            }
                            finally {
                                if (e_20)
                                    throw e_20.error;
                            }
                        }
                        var y = null;
                        if (t == 0) {
                            y = this.indicatorAxis;
                        }
                        else if (this.aea == 1) {
                            y = this.aez(this.aea);
                        }
                        else if (typeCast(NumericYAxis.$, this.indicatorAxis) !== null) {
                            y = new NumericYAxis();
                        }
                        if (y != null) {
                            u.axes.add(y);
                        }
                        if (this.fi) {
                            this.abc(y);
                        }
                    }
                }
                break;
            case "IsWindowSyncedToVisibleRange":
                if (this.dataChart != null) {
                    this.dataChart.uo = this.f9 && this.f8;
                }
                if (this.volumeChart != null) {
                    this.volumeChart.uo = this.f9 && this.f8;
                }
                if (this.af0) {
                    this.al0(this.dataChart);
                }
                else {
                    this.volumeChart.vv = 1;
                }
                break;
            case "IndicatorTypes":
                var z = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), b);
                if (z != null) {
                    z.collectionChanged = delegateRemove(z.collectionChanged, runOn(this, this.ak5));
                }
                var aa = typeCast(ObservableCollection$1.$.specialize(FinancialIndicatorType_$type), c);
                if (aa != null) {
                    aa.collectionChanged = delegateCombine(aa.collectionChanged, runOn(this, this.ak5));
                }
                this.al3();
                break;
            case "OverlayTypes":
                var ab = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), b);
                if (ab != null) {
                    ab.collectionChanged = delegateRemove(ab.collectionChanged, runOn(this, this.ak6));
                }
                var ac = typeCast(ObservableCollection$1.$.specialize(FinancialOverlayType_$type), c);
                if (ac != null) {
                    ac.collectionChanged = delegateCombine(ac.collectionChanged, runOn(this, this.ak6));
                }
                this.al5();
                break;
            case "YAxisAbbreviateLargeNumbers":
                this.abj(function (ad) { return ad.k9 = _this.af4; });
                break;
            case "YAxisMinimumValue":
                this.abk(function (ad) { return ad.l4 = _this.ahi; }, false);
                break;
            case "YAxisMaximumValue":
                this.abk(function (ad) { return ad.l3 = _this.ahh; }, false);
                break;
            case "YAxisInterval":
                this.abk(function (ad) { return ad.l0 = _this.ahg; }, false);
                break;
            case "Thickness":
            case "ZoomSliderType":
                this.al8();
                break;
            case "ZoomSliderChart":
                if (!this.af7) {
                    return;
                }
                this.amb(typeCast(XamDataChart.$, b), typeCast(XamDataChart.$, c));
                break;
            case "NegativeBrushes":
            case "NegativeOutlines":
                this.aky(function (ad, ae) {
                    if (ad.d6) {
                        ad.ms(_this.ada != null ? ArrayExtension.getModulus$1(Brush.$, _this.ada, ae) : null, _this.adb != null ? ArrayExtension.getModulus$1(Brush.$, _this.adb, ae) : null);
                    }
                }, true);
                break;
            case "OverlayBrushes":
                this.akx(function (ad, ae) { return ad.o9 = _this.adc != null ? ArrayExtension.getModulus$1(Brush.$, _this.adc, ae) : null; });
                break;
            case "OverlayOutlines":
                this.akx(function (ad, ae) { return ad.pe = _this.add != null ? ArrayExtension.getModulus$1(Brush.$, _this.add, ae) : null; });
                break;
            case "OverlayThickness":
                this.akx(function (ad, ae) { return ad.g4 = _this.ag6; });
                break;
            case "OverlayMultiplier":
                this.akx(function (ad, ae) { return _this.aeu.setMultiplier(ad, _this.ag5); });
                break;
            case "VolumeBrushes":
                this.akz(function (ad, ae) { return ad.o9 = ArrayExtension.getModulus$1(Brush.$, _this.ade, ae); });
                break;
            case "VolumeOutlines":
                this.akz(function (ad, ae) { return ad.pe = ArrayExtension.getModulus$1(Brush.$, _this.adf, ae); });
                break;
            case "VolumeThickness":
                this.akz(function (ad, ae) { return ad.g4 = _this.ag8; });
                break;
            case "IndicatorNegativeBrushes":
                this.akw(function (ad, ae) { return _this.aep.setNegativeBrush(ad, ArrayExtension.getModulus$1(Brush.$, _this.ac9, ae)); });
                break;
            case "IndicatorBrushes":
                this.akw(function (ad, ae) { return ad.o9 = ArrayExtension.getModulus$1(Brush.$, _this.ac8, ae); });
                break;
            case "IndicatorThickness":
                this.akw(function (ad, ae) { return ad.g4 = _this.ag4; });
                break;
            case "IndicatorDisplayTypes":
                this.akw(function (ad, ae) { return _this.aep.setDisplayType(ad, ArrayExtension.getModulus$1(IndicatorDisplayType_$type, _this.aer, ae)); });
                break;
            case "IndicatorPeriod":
                this.akw(function (ad, ae) {
                    if (_this.ahz == -2147483648) {
                        return;
                    }
                    _this.aep.setPeriodOverride(ad, _this.ahz);
                });
                break;
            case "IndicatorMultiplier":
                this.akw(function (ad, ae) { return _this.aep.setMultiplier(ad, _this.ag3); });
                break;
            case "IndicatorSmoothingPeriod":
                this.akw(function (ad, ae) { return _this.aep.setSmoothingPeriod(ad, _this.ah2); });
                break;
            case "IndicatorShortPeriod":
                this.akw(function (ad, ae) { return _this.aep.setShortPeriod(ad, _this.ah0); });
                break;
            case "IndicatorLongPeriod":
                this.akw(function (ad, ae) { return _this.aep.setLongPeriod(ad, _this.ahy); });
                break;
            case "IndicatorSignalPeriod":
                this.akw(function (ad, ae) { return _this.aep.setSignalPeriod(ad, _this.ah1); });
                break;
            case "RangeSelectorOptions":
                var ad = typeCast(FinancialChartRangeSelectorOptionCollection.$, b);
                if (ad != null) {
                    ad.collectionChanged = delegateRemove(ad.collectionChanged, runOn(this, this.ak7));
                }
                if (this.adx != null) {
                    var ae = this.adx;
                    ae.collectionChanged = delegateCombine(ae.collectionChanged, runOn(this, this.ak7));
                }
                this.alt();
                break;
            case "CustomIndicatorNames":
                var af = typeCast(ObservableCollection$1.$.specialize(String_$type), b);
                if (af != null) {
                    af.collectionChanged = delegateRemove(af.collectionChanged, runOn(this, this.ak3));
                }
                if (this.customIndicatorNames != null) {
                    var ag = this.customIndicatorNames;
                    ag.collectionChanged = delegateCombine(ag.collectionChanged, runOn(this, this.ak3));
                }
                this.al3();
                break;
            case "Legend":
                if (this.zoomSliderChart != null) {
                    this.zoomSliderChart.legend = null;
                }
                break;
            case "Brushes":
                this.aky(function (ah, ai) { return ah.o9 = _this.ab != null ? ArrayExtension.getModulus$1(Brush.$, _this.ab, ai) : null; }, true);
                break;
            case "Outlines":
                this.aky(function (ah, ai) { return ah.pe = _this.af != null ? ArrayExtension.getModulus$1(Brush.$, _this.af, ai) : null; }, true);
                break;
            case "XAxisLabelVisibility":
                if (this.acy == 0 && this.zoomSliderXAxis != null) {
                    this.aa8(this.zoomSliderXAxis, function (ah) { return ah.visibility = 1; });
                }
                this.aks();
                break;
            case "YAxisLabelVisibility":
                if (this.acz != 0 || this.zoomSliderAxis == null) {
                    break;
                }
                this.aa8(this.zoomSliderAxis, function (ah) { return ah.visibility = 1; });
                break;
            case "ZoomSliderXAxisMajorStroke":
                this.zoomSliderXAxis.jv = this.ame;
                break;
            case "ZoomSliderXAxisMajorStrokeThickness":
                this.zoomSliderXAxis.eq = this.ahk;
                break;
            case "FinancialChartLegend":
            case "IsLegendVisible":
                var ah_1 = this.afv && this.legend == null;
                {
                    var ai = function (aj, ak) {
                        if (aj.isUsableInLegend) {
                            aj.legend = ah_1 ? _this.aej : null;
                        }
                    };
                    this.aky(ai, false);
                    this.akx(ai);
                }
                break;
            case "ZoomSliderAxis":
                var aj = typeCast(Axis.$, b);
                if (aj != null && this.zoomSliderChart != null) {
                    this.zoomSliderChart.axes.remove(aj);
                }
                if (this.zoomSliderAxis != null) {
                    if (this.zoomSliderChart != null) {
                        this.zoomSliderChart.axes.add(this.zoomSliderAxis);
                        this.alq();
                        this.zoomSliderXAxis.itemsSource = this.xAxis.itemsSource;
                    }
                    if (this.fi) {
                        this.abc(this.zoomSliderAxis);
                    }
                    this.aa8(this.zoomSliderAxis, function (ak) { return ak.visibility = 1; });
                }
                break;
            case "XAxisMinimumValue":
                this.abe(function (ak) {
                    var al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                    if (al != null) {
                        al.minimumValue = _this.agl;
                    }
                });
                break;
            case "XAxisMaximumValue":
                this.abe(function (ak) {
                    var al = typeCast(ITimeRangeSelectorAxis_$type, ak);
                    if (al != null) {
                        al.maximumValue = _this.agk;
                    }
                });
                break;
            case FinancialChart.ajz:
                this.abf(function (ak) { return ak.b0 = _this.af3; }, a);
                break;
            case FinancialChart.aka:
                this.abj(function (ak) { return ak.b0 = _this.af5; });
                break;
        }
    };
    FinancialChart.prototype.get_b1 = function () {
        return 1;
    };
    Object.defineProperty(FinancialChart.prototype, "b1", {
        get: function () {
            return this.get_b1();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "af6", {
        get: function () {
            return this.afo;
        },
        set: function (a) {
            var b = this.af6;
            if (a != b) {
                this.afo = a;
                this.sv("YAxisIsLogarithmic", b, this.af6);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ah4", {
        get: function () {
            return this.ahw;
        },
        set: function (a) {
            var b = this.ah4;
            if (a != b) {
                this.ahw = a;
                this.sv("YAxisLogarithmBase", b, this.ah4);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahg", {
        get: function () {
            return this.agx;
        },
        set: function (a) {
            var b = this.ahg;
            if (a != b) {
                this.agx = a;
                this.sv("YAxisInterval", b, this.ahg);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahi", {
        get: function () {
            return this.agz;
        },
        set: function (a) {
            var b = this.ahi;
            if (a != b) {
                this.agz = a;
                this.sv("YAxisMinimumValue", b, this.ahi);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahh", {
        get: function () {
            return this.agy;
        },
        set: function (a) {
            var b = this.ahh;
            if (a != b) {
                this.agy = a;
                this.sv("YAxisMaximumValue", b, this.ahh);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahj", {
        get: function () {
            return this.ag0;
        },
        set: function (a) {
            var b = this.ahj;
            if (a != b) {
                this.ag0 = a;
                this.sv("YAxisMinorInterval", b, this.ahj);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahf", {
        get: function () {
            return this.yAxis.lw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahe", {
        get: function () {
            return this.yAxis.lv;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ad6", {
        get: function () {
            return this.ad4;
        },
        set: function (a) {
            var b = this.ad6;
            if (a != b) {
                this.ad4 = a;
                this.sv("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ad6));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ad8", {
        get: function () {
            return this.ad7;
        },
        set: function (a) {
            var b = this.ad8;
            if (a != b) {
                this.ad7 = a;
                this.sv("XAxisMode", enumGetBox(FinancialChartXAxisMode_$type, b), enumGetBox(FinancialChartXAxisMode_$type, this.ad8));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ag9", {
        get: function () {
            return this.ags;
        },
        set: function (a) {
            var b = this.ag9;
            if (a != b) {
                this.ags = a;
                this.sv("XAxisZoomMaximumCategoryRange", b, this.ag9);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahc", {
        get: function () {
            return this.agv;
        },
        set: function (a) {
            var b = this.ahc;
            if (a != b) {
                this.agv = a;
                this.sv("XAxisZoomToCategoryStart", b, this.ahc);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aha", {
        get: function () {
            return this.agt;
        },
        set: function (a) {
            var b = this.aha;
            if (a != b) {
                this.agt = a;
                this.sv("XAxisZoomMaximumItemSpan", b, this.aha);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahb", {
        get: function () {
            return this.agu;
        },
        set: function (a) {
            var b = this.ahb;
            if (a != b) {
                this.agu = a;
                this.sv("XAxisZoomToCategoryRange", b, this.ahb);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahd", {
        get: function () {
            return this.agw;
        },
        set: function (a) {
            var b = this.ahd;
            if (a != b) {
                this.agw = a;
                this.sv("XAxisZoomToItemSpan", b, this.ahd);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aea", {
        get: function () {
            return this.ad9;
        },
        set: function (a) {
            var b = this.aea;
            if (a != b) {
                this.ad9 = a;
                this.sv("YAxisMode", enumGetBox(FinancialChartYAxisMode_$type, b), enumGetBox(FinancialChartYAxisMode_$type, this.aea));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afz", {
        get: function () {
            return this.afj;
        },
        set: function (a) {
            var b = this.afz;
            if (a != b) {
                this.afj = a;
                this.sv("IsToolbarVisible", b, this.afz);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ad1", {
        get: function () {
            return this.ad0;
        },
        set: function (a) {
            var b = this.ad1;
            if (a != b) {
                this.ad0 = a;
                this.sv("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.ad1));
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_abt = function () {
        return _super.prototype.get_abt.call(this);
    };
    FinancialChart.prototype.set_abt = function (a) {
        _super.prototype.set_abt.call(this, a);
    };
    Object.defineProperty(FinancialChart.prototype, "af0", {
        get: function () {
            return this.afk;
        },
        set: function (a) {
            var b = this.af0;
            if (a != b) {
                this.afk = a;
                this.sv("IsWindowSyncedToVisibleRange", b, this.af0);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aef", {
        get: function () {
            return this.aee;
        },
        set: function (a) {
            var b = this.aef;
            if (a != b) {
                this.aee = a;
                this.sv("IndicatorTypes", b, this.aef);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aeh", {
        get: function () {
            return this.aeg;
        },
        set: function (a) {
            var b = this.aeh;
            if (a != b) {
                this.aeg = a;
                this.sv("OverlayTypes", b, this.aeh);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "indicatorCharts", {
        get: function () {
            return this.agb;
        },
        set: function (a) {
            var b = this.indicatorCharts;
            if (a != b) {
                this.agb = a;
                this.sv("IndicatorCharts", b, this.indicatorCharts);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "af4", {
        get: function () {
            return this.afm;
        },
        set: function (a) {
            var b = this.af4;
            if (a != b) {
                this.afm = a;
                this.sv("YAxisAbbreviateLargeNumbers", b, this.af4);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_iv = function () {
        return _super.prototype.get_iv.call(this);
    };
    FinancialChart.prototype.set_iv = function (a) {
        _super.prototype.set_iv.call(this, a);
    };
    Object.defineProperty(FinancialChart.prototype, "af3", {
        get: function () {
            return this.afl;
        },
        set: function (a) {
            var b = this.af3;
            if (a != b) {
                this.afl = a;
                this.sv(FinancialChart.ajz, b, this.af3);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "af5", {
        get: function () {
            return this.afn;
        },
        set: function (a) {
            var b = this.af5;
            if (a != b) {
                this.afn = a;
                this.sv(FinancialChart.aka, b, this.af5);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "zoomSliderChart", {
        get: function () {
            return this.afd;
        },
        set: function (a) {
            var b = this.zoomSliderChart;
            if (a != b) {
                this.afd = a;
                this.sv("ZoomSliderChart", b, this.zoomSliderChart);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "zoomSliderAxis", {
        get: function () {
            return this.aey;
        },
        set: function (a) {
            var b = this.zoomSliderAxis;
            if (a != b) {
                this.aey = a;
                this.sv("ZoomSliderAxis", b, this.zoomSliderAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "zoomSliderXAxis", {
        get: function () {
            return this.adj;
        },
        set: function (a) {
            var b = this.zoomSliderXAxis;
            if (a != b) {
                this.adj = a;
                this.sv("ZoomSliderXAxis", b, this.zoomSliderXAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aed", {
        get: function () {
            return this.aeb;
        },
        set: function (a) {
            var b = this.aed;
            if (a != b) {
                this.aeb = a;
                this.sv("ZoomSliderType", enumGetBox(FinancialChartZoomSliderType_$type, b), enumGetBox(FinancialChartZoomSliderType_$type, this.aed));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ada", {
        get: function () {
            return this.ac2;
        },
        set: function (a) {
            var b = this.ada;
            if (a != b) {
                this.ac2 = a;
                this.sv("NegativeBrushes", b, this.ada);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adb", {
        get: function () {
            return this.ac3;
        },
        set: function (a) {
            var b = this.adb;
            if (a != b) {
                this.ac3 = a;
                this.sv("NegativeOutlines", b, this.adb);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adc", {
        get: function () {
            return this.ac4;
        },
        set: function (a) {
            var b = this.adc;
            if (a != b) {
                this.ac4 = a;
                this.sv("OverlayBrushes", b, this.adc);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "add", {
        get: function () {
            return this.ac5;
        },
        set: function (a) {
            var b = this.add;
            if (a != b) {
                this.ac5 = a;
                this.sv("OverlayOutlines", b, this.add);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adf", {
        get: function () {
            return this.ac7;
        },
        set: function (a) {
            var b = this.adf;
            if (a != b) {
                this.ac7 = a;
                this.sv("VolumeOutlines", b, this.adf);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ade", {
        get: function () {
            return this.ac6;
        },
        set: function (a) {
            var b = this.ade;
            if (a != b) {
                this.ac6 = a;
                this.sv("VolumeBrushes", b, this.ade);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ac9", {
        get: function () {
            return this.ac1;
        },
        set: function (a) {
            var b = this.ac9;
            if (a != b) {
                this.ac1 = a;
                this.sv("IndicatorNegativeBrushes", b, this.ac9);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ac8", {
        get: function () {
            return this.ac0;
        },
        set: function (a) {
            var b = this.ac8;
            if (a != b) {
                this.ac0 = a;
                this.sv("IndicatorBrushes", b, this.ac8);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ag8", {
        get: function () {
            return this.agr;
        },
        set: function (a) {
            var b = this.ag8;
            if (a != b) {
                this.agr = a;
                this.sv("VolumeThickness", b, this.ag8);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ag6", {
        get: function () {
            return this.agp;
        },
        set: function (a) {
            var b = this.ag6;
            if (a != b) {
                this.agp = a;
                this.sv("OverlayThickness", b, this.ag6);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ag5", {
        get: function () {
            return this.ago;
        },
        set: function (a) {
            var b = this.ag5;
            if (a != b) {
                this.ago = a;
                this.sv("OverlayMultiplier", b, this.ag5);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ag4", {
        get: function () {
            return this.agn;
        },
        set: function (a) {
            var b = this.ag4;
            if (a != b) {
                this.agn = a;
                this.sv("IndicatorThickness", b, this.ag4);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aer", {
        get: function () {
            return this.aeq;
        },
        set: function (a) {
            var b = this.aer;
            if (a != b) {
                this.aeq = a;
                this.sv("IndicatorDisplayTypes", b, this.aer);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahz", {
        get: function () {
            return this.ahs;
        },
        set: function (a) {
            var b = this.ahz;
            if (a != b) {
                this.ahs = a;
                this.sv("IndicatorPeriod", b, this.ahz);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ag3", {
        get: function () {
            return this.agm;
        },
        set: function (a) {
            var b = this.ag3;
            if (a != b) {
                this.agm = a;
                this.sv("IndicatorMultiplier", b, this.ag3);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ah2", {
        get: function () {
            return this.ahv;
        },
        set: function (a) {
            var b = this.ah2;
            if (a != b) {
                this.ahv = a;
                this.sv("IndicatorSmoothingPeriod", b, this.ah2);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ah0", {
        get: function () {
            return this.aht;
        },
        set: function (a) {
            var b = this.ah0;
            if (a != b) {
                this.aht = a;
                this.sv("IndicatorShortPeriod", b, this.ah0);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahy", {
        get: function () {
            return this.ahr;
        },
        set: function (a) {
            var b = this.ahy;
            if (a != b) {
                this.ahr = a;
                this.sv("IndicatorLongPeriod", b, this.ahy);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ah1", {
        get: function () {
            return this.ahu;
        },
        set: function (a) {
            var b = this.ah1;
            if (a != b) {
                this.ahu = a;
                this.sv("IndicatorSignalPeriod", b, this.ah1);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "adx", {
        get: function () {
            return this.adv;
        },
        set: function (a) {
            var b = this.adx;
            if (a != b) {
                this.adv = a;
                this.sv("RangeSelectorOptions", b, this.adx);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "customIndicatorNames", {
        get: function () {
            return this.adr;
        },
        set: function (a) {
            var b = this.adr;
            if (a != b) {
                this.adr = a;
                this.sv("CustomIndicatorNames", b, this.customIndicatorNames);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.prototype.get_f9 = function () {
        return _super.prototype.get_f9.call(this);
    };
    FinancialChart.prototype.set_f9 = function (a) {
        _super.prototype.set_f9.call(this, a);
    };
    Object.defineProperty(FinancialChart.prototype, "ame", {
        get: function () {
            return this.amd;
        },
        set: function (a) {
            var b = this.ame;
            if (a != b) {
                this.amd = a;
                this.sv("ZoomSliderXAxisMajorStroke", b, this.ame);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "ahk", {
        get: function () {
            return this.ag1;
        },
        set: function (a) {
            var b = this.ahk;
            if (a != b) {
                this.ag1 = a;
                this.sv("ZoomSliderXAxisMajorStrokeThickness", b, this.ahk);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "afv", {
        get: function () {
            return this.afi;
        },
        set: function (a) {
            var b = this.afv;
            if (a != b) {
                this.afi = a;
                this.sv("IsLegendVisible", b, this.afv);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "aej", {
        get: function () {
            return this.aei;
        },
        set: function (a) {
            var b = this.aej;
            if (a != b) {
                this.aei = a;
                this.sv("FinancialChartLegend", b, this.aej);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "xAxis", {
        get: function () {
            return this.adi;
        },
        set: function (a) {
            var b = this.xAxis;
            if (a != b) {
                this.adi = a;
                this.sv("XAxis", b, this.xAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "yAxis", {
        get: function () {
            return this.aex;
        },
        set: function (a) {
            var b = this.yAxis;
            if (a != b) {
                this.aex = a;
                this.sv("YAxis", b, this.yAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "volumeAxis", {
        get: function () {
            return this.aew;
        },
        set: function (a) {
            var b = this.volumeAxis;
            if (a != b) {
                this.aew = a;
                this.sv("VolumeAxis", b, this.volumeAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "volumeXAxis", {
        get: function () {
            return this.adh;
        },
        set: function (a) {
            var b = this.volumeXAxis;
            if (a != b) {
                this.adh = a;
                this.sv("VolumeXAxis", b, this.volumeXAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "indicatorAxis", {
        get: function () {
            return this.aev;
        },
        set: function (a) {
            var b = this.indicatorAxis;
            if (a != b) {
                this.aev = a;
                this.sv("IndicatorAxis", b, this.indicatorAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "indicatorXAxis", {
        get: function () {
            return this.adg;
        },
        set: function (a) {
            var b = this.indicatorXAxis;
            if (a != b) {
                this.adg = a;
                this.sv("IndicatorXAxis", b, this.indicatorXAxis);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agd", {
        get: function () {
            return this.aga;
        },
        set: function (a) {
            var b = this.agd;
            if (a != b) {
                this.aga = a;
                this.sv("IndicatorAxes", b, this.agd);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agf", {
        get: function () {
            return this.agc;
        },
        set: function (a) {
            var b = this.agf;
            if (a != b) {
                this.agc = a;
                this.sv("IndicatorXAxes", b, this.agf);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agl", {
        get: function () {
            return this.agj;
        },
        set: function (a) {
            var b = this.agl;
            if (+a != +b) {
                this.agj = a;
                this.sv("XAxisMinimumValue", b, this.agl);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "agk", {
        get: function () {
            return this.agi;
        },
        set: function (a) {
            var b = this.agk;
            if (+a != +b) {
                this.agi = a;
                this.sv("XAxisMaximumValue", b, this.agk);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChart.prototype, "xAxisBreaks", {
        get: function () {
            return this.agg;
        },
        enumerable: false,
        configurable: true
    });
    FinancialChart.$t = markType(FinancialChart, 'FinancialChart', XYChart.$);
    FinancialChart.ah3 = 0;
    FinancialChart.ajz = "XAxisEnhancedIntervalPreferMoreCategoryLabels";
    FinancialChart.aka = "YAxisEnhancedIntervalPreferMoreCategoryLabels";
    return FinancialChart;
}(XYChart));
export { FinancialChart };
/**
 * @hidden
 */
var FinancialChartToolbar = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialChartToolbar, _super);
    function FinancialChartToolbar(a, b) {
        var _this = _super.call(this, "financialChartToolbar", b, "") || this;
        _this.o = null;
        _this.r = null;
        _this.z = null;
        _this.p = null;
        _this.w = null;
        _this.aq = dateMaxValue();
        _this.ap = dateMinValue();
        _this.ao = dateMaxValue();
        _this.an = dateMinValue();
        _this.rangeChanged = null;
        _this.chartTypeChanged = null;
        _this.trendLineTypeChanged = null;
        _this.volumeTypeChanged = null;
        _this.indicatorTypesChanged = null;
        _this.overlayTypesChanged = null;
        _this.x = 0;
        _this.ah = 0;
        _this.ab = 0;
        _this.ad = null;
        _this.af = null;
        _this.t = null;
        _this.ak = false;
        _this.o = a;
        _this.w = new FinancialChartToolbarViewModel();
        _this.s = new FinancialChartRangeSelector(a != null ? a.aif : null);
        _this.aa = new FinancialChartTypePicker(a != null ? a.aic : null);
        _this.q = new FinancialChartIndicatorMenu(1, a != null ? a.aid : null);
        return _this;
    }
    FinancialChartToolbar.prototype.bg = function (a) {
        var b = a.querySelectorAll(".financialChartToolbarArea");
        if (b != null && b.length > 0) {
            this.g = b[0];
            if (!this.al) {
                this.g.hide();
            }
        }
        var c = a.querySelectorAll(".financialChartIndicatorMenu");
        if (c != null && c.length > 0) {
            this.q.g = c[0];
        }
        var d = a.querySelectorAll(".financialChartRangeSelector");
        if (d != null && d.length > 0) {
            this.s.g = d[0];
        }
        var e = a.querySelectorAll(".financialChartTypePicker");
        if (e != null && e.length > 0) {
            this.aa.g = e[0];
        }
    };
    FinancialChartToolbar.prototype.bl = function (a) {
        this.q.u(a);
        this.aa.u(a);
    };
    Object.defineProperty(FinancialChartToolbar.prototype, "s", {
        get: function () {
            return this.r;
        },
        set: function (a) {
            var b = this.s;
            if (a != b) {
                this.r = a;
                this.bm("RangeSelector", b, this.s);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "aa", {
        get: function () {
            return this.z;
        },
        set: function (a) {
            var b = this.aa;
            if (a != b) {
                this.z = a;
                this.bm("ChartTypePicker", b, this.aa);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "q", {
        get: function () {
            return this.p;
        },
        set: function (a) {
            var b = this.q;
            if (a != b) {
                this.p = a;
                this.bm("IndicatorMenu", b, this.q);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartToolbar.prototype.bm = function (a, b, c) {
        switch (a) {
            case "RangeStart":
                if (this.s != null) {
                    this.s.t = this.as;
                }
                break;
            case "RangeEnd":
                if (this.s != null) {
                    this.s.s = this.ar;
                }
                break;
            case "SelectionStart":
                if (this.s != null) {
                    this.s.v = this.au;
                }
                break;
            case "SelectionEnd":
                if (this.s != null) {
                    this.s.u = this.at;
                }
                break;
            case "RangeSelector":
                var d = b;
                if (d != null) {
                    d.rangeChanged = delegateRemove(d.rangeChanged, runOn(this, this.bj));
                }
                if (this.s != null) {
                    this.s.t = this.as;
                    this.s.s = this.ar;
                    this.s.o = this.u;
                    this.s.v = this.au;
                    this.s.u = this.at;
                    var e = this.s;
                    e.rangeChanged = delegateCombine(e.rangeChanged, runOn(this, this.bj));
                }
                break;
            case "ChartTypePicker":
                var f = b;
                if (f != null) {
                    f.selectionChanged = delegateRemove(f.selectionChanged, runOn(this, this.bi));
                }
                if (this.aa != null) {
                    this.aa.w = this.y;
                    var g = this.aa;
                    g.selectionChanged = delegateCombine(g.selectionChanged, runOn(this, this.bi));
                }
                break;
            case "ChartType":
                if (this.aa != null) {
                    this.aa.w = this.y;
                }
                break;
            case "RangeSelectorOptions":
                if (this.s != null) {
                    this.s.o = this.u;
                }
                break;
            case "IsToolbarVisible":
                if (this.g == null) {
                    break;
                }
                if (this.al) {
                    this.g.show();
                }
                else {
                    this.g.hide();
                }
                break;
            case "IndicatorMenu":
                var h = typeCast(FinancialChartIndicatorMenu.$, b);
                if (h != null) {
                    h.selectionChanged = delegateRemove(h.selectionChanged, runOn(this, this.bh));
                }
                if (this.q != null) {
                    var i = this.q;
                    i.selectionChanged = delegateCombine(i.selectionChanged, runOn(this, this.bh));
                }
                break;
            case "IndicatorTypes":
                if (this.indicatorTypesChanged != null) {
                    this.indicatorTypesChanged(this, EventArgs.empty);
                }
                break;
            case "OverlayTypes":
                if (this.overlayTypesChanged != null) {
                    this.overlayTypesChanged(this, EventArgs.empty);
                }
                break;
            case "TrendLineType":
                if (this.trendLineTypeChanged != null) {
                    this.trendLineTypeChanged(this, EventArgs.empty);
                }
                break;
            case "VolumeType":
                if (this.volumeTypeChanged != null) {
                    this.volumeTypeChanged(this, EventArgs.empty);
                }
                break;
        }
    };
    FinancialChartToolbar.prototype.bh = function (a, b) {
        this.ag = this.q.z;
        this.ae = this.q.y;
        this.ai = this.q.aa;
        this.ac = this.q.x;
    };
    FinancialChartToolbar.prototype.bi = function (a, b) {
        this.y = this.aa.w;
        if (this.chartTypeChanged != null) {
            this.chartTypeChanged(this, b);
        }
    };
    FinancialChartToolbar.prototype.bj = function (a, b) {
        this.au = this.s.v;
        this.at = this.s.u;
        if (this.rangeChanged != null) {
            this.rangeChanged(this, b);
        }
    };
    FinancialChartToolbar.prototype.v = function () {
        var _this = this;
        var a = new FinancialChartToolbarContext();
        a.container = this.d;
        a.vm = this.w;
        a.vm.financialChartIndicatorMenu = ((function () {
            var $ret = new FinancialChartIndicatorMenuContext();
            $ret.vm = _this.q.p;
            return $ret;
        })());
        a.vm.financialChartTypePicker = ((function () {
            var $ret = new FinancialChartTypePickerContext();
            $ret.vm = _this.aa.p;
            return $ret;
        })());
        a.vm.financialChartRangeSelector = ((function () {
            var $ret = new FinancialChartRangeSelectorContext();
            $ret.vm = _this.s.q;
            return $ret;
        })());
        return a;
    };
    FinancialChartToolbar.prototype.l = function (a) {
        _super.prototype.l.call(this, a);
        if (a == null) {
            return;
        }
        this.s.l(a);
        this.aa.l(a);
        this.q.l(a);
        this.bk();
    };
    FinancialChartToolbar.prototype.bk = function () {
    };
    Object.defineProperty(FinancialChartToolbar.prototype, "au", {
        get: function () {
            return this.aq;
        },
        set: function (a) {
            var b = this.au;
            if (+a != +b) {
                this.aq = a;
                this.bm("SelectionStart", b, this.au);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "at", {
        get: function () {
            return this.ap;
        },
        set: function (a) {
            var b = this.at;
            if (+a != +b) {
                this.ap = a;
                this.bm("SelectionEnd", b, this.at);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "as", {
        get: function () {
            return this.ao;
        },
        set: function (a) {
            var b = this.as;
            if (+a != +b) {
                this.ao = a;
                this.bm("RangeStart", b, this.as);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ar", {
        get: function () {
            return this.an;
        },
        set: function (a) {
            var b = this.ar;
            if (+a != +b) {
                this.an = a;
                this.bm("RangeEnd", b, this.ar);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartToolbar.prototype.bn = function () {
        if (this.s != null) {
            this.s.ab();
        }
    };
    Object.defineProperty(FinancialChartToolbar.prototype, "y", {
        get: function () {
            return this.x;
        },
        set: function (a) {
            var b = this.y;
            if (a != b) {
                this.x = a;
                this.bm("ChartType", enumGetBox(FinancialChartType_$type, b), enumGetBox(FinancialChartType_$type, this.y));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ai", {
        get: function () {
            return this.ah;
        },
        set: function (a) {
            var b = this.ai;
            if (a != b) {
                this.ah = a;
                this.bm("TrendLineType", enumGetBox(TrendLineType_$type, b), enumGetBox(TrendLineType_$type, this.ai));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ac", {
        get: function () {
            return this.ab;
        },
        set: function (a) {
            var b = this.ac;
            if (a != b) {
                this.ab = a;
                this.bm("VolumeType", enumGetBox(FinancialChartVolumeType_$type, b), enumGetBox(FinancialChartVolumeType_$type, this.ac));
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ae", {
        get: function () {
            return this.ad;
        },
        set: function (a) {
            var b = this.ae;
            if (!FinancialChartToolbar.am(b, a)) {
                this.ad = a;
                this.bm("IndicatorTypes", b, this.ae);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "ag", {
        get: function () {
            return this.af;
        },
        set: function (a) {
            var b = this.ag;
            if (!FinancialChartToolbar.am(b, a)) {
                this.af = a;
                this.bm("OverlayTypes", b, this.ag);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartToolbar.am = function (a, b) {
        var e_21, _a;
        if (a == b) {
            return true;
        }
        if ((a == null && b != null) || (a != null && b == null)) {
            return false;
        }
        if (a.count != b.count) {
            return false;
        }
        try {
            for (var _b = __values(fromEn(a)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var c = _c.value;
                if (!b.contains(c)) {
                    return false;
                }
            }
        }
        catch (e_21_1) {
            e_21 = { error: e_21_1 };
        }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return))
                    _a.call(_b);
            }
            finally {
                if (e_21)
                    throw e_21.error;
            }
        }
        return true;
    };
    FinancialChartToolbar.prototype.aj = function () {
        var _this = this;
        return ((function () {
            var $ret = new FinancialChartToolbarVisualData();
            $ret.rangeSelector = _this.s == null ? null : _this.s.r();
            return $ret;
        })());
    };
    Object.defineProperty(FinancialChartToolbar.prototype, "u", {
        get: function () {
            return this.t;
        },
        set: function (a) {
            var b = this.u;
            if (a != b) {
                this.t = a;
                this.bm("RangeSelectorOptions", b, this.u);
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartToolbar.prototype, "al", {
        get: function () {
            return this.ak;
        },
        set: function (a) {
            var b = this.al;
            if (a != b) {
                this.ak = a;
                this.bm("IsToolbarVisible", b, this.al);
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartToolbar.$t = markType(FinancialChartToolbar, 'FinancialChartToolbar', TemplatedHtmlControl.$);
    return FinancialChartToolbar;
}(TemplatedHtmlControl));
export { FinancialChartToolbar };
/**
 * @hidden
 */
var FinancialChartRangeSelector = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(FinancialChartRangeSelector, _super);
    function FinancialChartRangeSelector(a) {
        var _this = _super.call(this, "financialChartRangeSelector", a, "") || this;
        _this.q = null;
        _this.rangeChanged = null;
        _this.p = null;
        _this.p = new FinancialChartRangeSelectorView();
        _this.q = new FinancialChartRangeSelectorViewModel();
        _this.q.onRangeChanged = runOn(_this, _this.z);
        _this.p.c = _this.q;
        return _this;
    }
    Object.defineProperty(FinancialChartRangeSelector.prototype, "v", {
        get: function () {
            return this.q.selectionStart;
        },
        set: function (a) {
            this.q.selectionStart = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartRangeSelector.prototype, "u", {
        get: function () {
            return this.q.selectionEnd;
        },
        set: function (a) {
            this.q.selectionEnd = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartRangeSelector.prototype, "t", {
        get: function () {
            return this.q.rangeStart;
        },
        set: function (a) {
            this.q.rangeStart = a;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FinancialChartRangeSelector.prototype, "s", {
        get: function () {
            return this.q.rangeEnd;
        },
        set: function (a) {
            this.q.rangeEnd = a;
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartRangeSelector.prototype.ab = function () {
        if (this.q.onPropertiesChanged()) {
            this.p.g(this.q);
        }
    };
    FinancialChartRangeSelector.prototype.l = function (a) {
        _super.prototype.l.call(this, a);
        this.p.f(this.d, this.q);
    };
    FinancialChartRangeSelector.prototype.z = function () {
        if (this.rangeChanged != null) {
            this.rangeChanged(this, EventArgs.empty);
        }
    };
    FinancialChartRangeSelector.prototype.r = function () {
        return this.p.d(this.g);
    };
    Object.defineProperty(FinancialChartRangeSelector.prototype, "o", {
        get: function () {
            return this.q.options;
        },
        set: function (a) {
            var b = !FinancialChartToolbar.am(this.q.options, a);
            if (b) {
                this.q.options = a;
                this.aa();
            }
        },
        enumerable: false,
        configurable: true
    });
    FinancialChartRangeSelector.prototype.aa = function () {
        if (this.q != null) {
            this.q.ao();
        }
        if (this.p != null) {
            this.p.i(this.o);
        }
    };
    FinancialChartRangeSelector.$t = markType(FinancialChartRangeSelector, 'FinancialChartRangeSelector', TemplatedHtmlControl.$);
    FinancialChartRangeSelector.x = 0;
    return FinancialChartRangeSelector;
}(TemplatedHtmlControl));
export { FinancialChartRangeSelector };
