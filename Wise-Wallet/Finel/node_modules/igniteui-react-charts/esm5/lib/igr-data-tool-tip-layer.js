import { __extends } from "tslib";
import { IgrAxis } from "./igr-axis";
import { DataToolTipLayerGroupingMode_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionX_$type } from "igniteui-react-core";
import { DataTooltipGroupedPositionY_$type } from "igniteui-react-core";
import { DataAbbreviationMode_$type } from "igniteui-react-core";
import { DataLegendValueMode_$type } from "igniteui-react-core";
import { DataLegendHeaderDateMode_$type } from "igniteui-react-core";
import { DataLegendHeaderTimeMode_$type } from "igniteui-react-core";
import { DataLegendSummaryType_$type } from "igniteui-react-core";
import { LegendItemBadgeShape_$type } from "igniteui-react-core";
import { DataLegendUnitsMode_$type } from "igniteui-react-core";
import { DataLegendLabelMode_$type } from "igniteui-react-core";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { DataToolTipLayer } from "./DataToolTipLayer";
import { ensureBool, ensureEnum, brushToString, stringToBrush, arrayFindByName } from "igniteui-react-core";
import { Thickness } from "igniteui-react-core";
import { FontInfo } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays grouped tooltips with summaries for series.
*/
var IgrDataToolTipLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrDataToolTipLayer, _super);
    function IgrDataToolTipLayer(props) {
        return _super.call(this, props) || this;
    }
    IgrDataToolTipLayer.prototype.createImplementation = function () {
        return new DataToolTipLayer();
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "isAnnotationHoverLayer", {
        /**
         * Gets whether the series is an annotation layer displayed only when hovering over the chart.
        */
        get: function () {
            return this.i.dc;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "isDefaultTooltipBehaviorDisabled", {
        /**
         * Gets whether the default tooltip behaviors for the chart are disabled if this layer is present.
        */
        get: function () {
            return this.i.dn;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "targetAxis", {
        /**
         * Gets or sets the Axis to target this annotation to. If null, this annotation layer will not render content.
        */
        get: function () {
            var r = this.i.tk;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrAxis._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.tk = null : this.i.tk = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "useInterpolation", {
        /**
         * Gets or sets whether to use value interpolation when drawing the tooltips.
        */
        get: function () {
            return this.i.uy;
        },
        set: function (v) {
            this.i.uy = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupingMode", {
        /**
         * Gets or sets the grouping mode to apply to use for the tooltip layer.
        */
        get: function () {
            return this.i.t2;
        },
        set: function (v) {
            this.i.t2 = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "actualGroupingMode", {
        /**
         * Gets the actual resolved tooltip layer grouping mode.
        */
        get: function () {
            return this.i.t1;
        },
        set: function (v) {
            this.i.t1 = ensureEnum(DataToolTipLayerGroupingMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "positionOffsetX", {
        /**
         * Gets or sets the offset of the tooltip layer on the X axis.
        */
        get: function () {
            return this.i.u7;
        },
        set: function (v) {
            this.i.u7 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "positionOffsetY", {
        /**
         * Gets or sets the offset of the tooltip layer on the Y axis.
        */
        get: function () {
            return this.i.u8;
        },
        set: function (v) {
            this.i.u8 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "defaultPositionOffsetX", {
        /**
         * Gets or sets the default offset of the tooltip layer on the X axis.
        */
        get: function () {
            return this.i.u5;
        },
        set: function (v) {
            this.i.u5 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "defaultPositionOffsetY", {
        /**
         * Gets or sets the default offset of the tooltip layer on the Y axis.
        */
        get: function () {
            return this.i.u6;
        },
        set: function (v) {
            this.i.u6 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupedPositionModeX", {
        /**
         * Gets or sets the tooltip position mode on the X axis for grouped series.
        */
        get: function () {
            return this.i.tu;
        },
        set: function (v) {
            this.i.tu = ensureEnum(DataTooltipGroupedPositionX_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "actualGroupedPositionModeX", {
        /**
         * Gets the actual resolved tooltip position mode on the X axis for grouped series.
        */
        get: function () {
            return this.i.tt;
        },
        set: function (v) {
            this.i.tt = ensureEnum(DataTooltipGroupedPositionX_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "groupedPositionModeY", {
        /**
         * Gets or sets the tooltip position mode on the Y axis for grouped series.
        */
        get: function () {
            return this.i.ty;
        },
        set: function (v) {
            this.i.ty = ensureEnum(DataTooltipGroupedPositionY_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "actualGroupedPositionModeY", {
        /**
         * Gets the actual resolved tooltip position mode on the Y axis for grouped series.
        */
        get: function () {
            return this.i.tx;
        },
        set: function (v) {
            this.i.tx = ensureEnum(DataTooltipGroupedPositionY_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "shouldUpdateWhenSeriesDataChanges", {
        /**
         * Gets or sets whether the data legend should update when the series data is mutated.
        */
        get: function () {
            return this.i.ux;
        },
        set: function (v) {
            this.i.ux = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "includedSeries", {
        /**
         * Gets or sets indexes or names of series to include in displaying in the data legend, e.g. "0, 1"
        */
        get: function () {
            return this.i.th;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.th = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "excludedSeries", {
        /**
         * Gets or sets indexes or names of series to exclude from displaying in the data legend, e.g. "0, 1"
         * The ExcludedSeries property takes precedences over values of IncludedSeries property
        */
        get: function () {
            return this.i.tc;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.tc = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "includedColumns", {
        /**
         * Gets or sets names of data columns or their labels to include in displaying in the data legend, e.g. "High, Low" or "H, L"
         * The ExcludedColumns property takes precedences over values of IncludedColumns property
        */
        get: function () {
            return this.i.tg;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.tg = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "excludedColumns", {
        /**
         * Gets or sets names of data columns or their labels to exclude from displaying in the data legend, e.g. "High, Low" or "H, L"
         * The ExcludedColumns property takes precedences over values of IncludedColumns property
        */
        get: function () {
            return this.i.tb;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.tb = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatAbbreviation", {
        /**
         * Gets or sets mode for abbreviating large numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.tl;
        },
        set: function (v) {
            this.i.tl = ensureEnum(DataAbbreviationMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatMaxFractions", {
        /**
         * Gets or sets maximum digits for formating numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.v7;
        },
        set: function (v) {
            this.i.v7 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatMinFractions", {
        /**
         * Gets or sets minimum digits for formating numbers displayed in the legend
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.v8;
        },
        set: function (v) {
            this.i.v8 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatMode", {
        /**
         * Gets or sets the mode for displaying values in the data legend, e.g. Currency ($500.25), Decimal (500.25), Integer (500)
        */
        get: function () {
            return this.i.tr;
        },
        set: function (v) {
            this.i.tr = ensureEnum(DataLegendValueMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatCulture", {
        /**
         * Gets or sets globalization culture when displaying values as currencies, e.g. use "en-GB" to display British pound symbol when the ValueFormatMode property is set to 'Currency' mode
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.x2;
        },
        set: function (v) {
            this.i.x2 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatUseGrouping", {
        /**
         * Gets or sets whether or not use grouping separator, e.g, 15,000 for 15000
         * This property is ignored when setting ValueFormatSpecifiers or ValueFormatString properties
        */
        get: function () {
            return this.i.uz;
        },
        set: function (v) {
            this.i.uz = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatString", {
        /**
         * Gets or sets the format string for values displayed in the data legend.
        */
        get: function () {
            return this.i.x8;
        },
        set: function (v) {
            this.i.x8 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the ValueFormatString string.
        */
        get: function () {
            return this.i.ti;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.ti = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginBottom", {
        get: function () {
            return this.i.aaz ? this.i.aaz.bottom : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.aaz.bottom = +v;
            this.i.aaz = this.i.aaz;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginLeft", {
        get: function () {
            return this.i.aaz ? this.i.aaz.left : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.aaz.left = +v;
            this.i.aaz = this.i.aaz;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginRight", {
        get: function () {
            return this.i.aaz ? this.i.aaz.right : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.aaz.right = +v;
            this.i.aaz = this.i.aaz;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowMarginTop", {
        get: function () {
            return this.i.aaz ? this.i.aaz.top : NaN;
        },
        set: function (v) {
            this.ensureValueRowMargin();
            this.i.aaz.top = +v;
            this.i.aaz = this.i.aaz;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureValueRowMargin = function () {
        if (this.i.aaz) {
            return;
        }
        this.i.aaz = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueRowVisible", {
        /**
         * Gets or sets whether to show series rows.
        */
        get: function () {
            return this.i.u0;
        },
        set: function (v) {
            this.i.u0 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextWhenMissingData", {
        /**
         * Gets or sets text displayed when data column is missing a value, e.g. "no data"
        */
        get: function () {
            return this.i.yh;
        },
        set: function (v) {
            this.i.yh = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextUseSeriesColors", {
        /**
         * Gets or sets whether to use series colors when displaying values in the legend
        */
        get: function () {
            return this.i.u1;
        },
        set: function (v) {
            this.i.u1 = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginBottom", {
        get: function () {
            return this.i.aa0 ? this.i.aa0.bottom : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.aa0.bottom = +v;
            this.i.aa0 = this.i.aa0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginLeft", {
        get: function () {
            return this.i.aa0 ? this.i.aa0.left : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.aa0.left = +v;
            this.i.aa0 = this.i.aa0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginRight", {
        get: function () {
            return this.i.aa0 ? this.i.aa0.right : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.aa0.right = +v;
            this.i.aa0 = this.i.aa0;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextMarginTop", {
        get: function () {
            return this.i.aa0 ? this.i.aa0.top : NaN;
        },
        set: function (v) {
            this.ensureValueTextMargin();
            this.i.aa0.top = +v;
            this.i.aa0 = this.i.aa0;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureValueTextMargin = function () {
        if (this.i.aa0) {
            return;
        }
        this.i.aa0 = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.aak);
        },
        set: function (v) {
            this.i.aak = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "valueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.uo == null) {
                return null;
            }
            return this.i.uo.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.uo = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatString", {
        /**
         * Gets or sets the format string for header text displayed in the data legend.
        */
        get: function () {
            return this.i.wq;
        },
        set: function (v) {
            this.i.wq = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatSpecifiers", {
        /**
         * Gets or sets the format specifiers to use with the HeaderFormatString string.
        */
        get: function () {
            return this.i.tf;
        },
        set: function (v) {
            if (v && !Array.isArray(v) && typeof (v) == "string") {
                var re = /\s*(?:,|\s|$)\s*/gm;
                v = v.split(re);
            }
            this.i.tf = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatCulture", {
        /**
         * Gets or sets globalization culture when displaying header as date time
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.wm;
        },
        set: function (v) {
            this.i.wm = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatDate", {
        /**
         * Gets or sets date format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.tm;
        },
        set: function (v) {
            this.i.tm = ensureEnum(DataLegendHeaderDateMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerFormatTime", {
        /**
         * Gets or sets time format for the header
         * This property is ignored when setting HeaderFormatSpecifiers or HeaderFormatString properties
        */
        get: function () {
            return this.i.tn;
        },
        set: function (v) {
            this.i.tn = ensureEnum(DataLegendHeaderTimeMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerText", {
        /**
         * Gets or sets the HeaderText for the data legend.
        */
        get: function () {
            return this.i.wv;
        },
        set: function (v) {
            this.i.wv = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextColor", {
        /**
         * Gets or sets the header text color.
        */
        get: function () {
            return brushToString(this.i.aac);
        },
        set: function (v) {
            this.i.aac = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginBottom", {
        get: function () {
            return this.i.aat ? this.i.aat.bottom : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.aat.bottom = +v;
            this.i.aat = this.i.aat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginLeft", {
        get: function () {
            return this.i.aat ? this.i.aat.left : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.aat.left = +v;
            this.i.aat = this.i.aat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginRight", {
        get: function () {
            return this.i.aat ? this.i.aat.right : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.aat.right = +v;
            this.i.aat = this.i.aat;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextMarginTop", {
        get: function () {
            return this.i.aat ? this.i.aat.top : NaN;
        },
        set: function (v) {
            this.ensureHeaderTextMargin();
            this.i.aat.top = +v;
            this.i.aat = this.i.aat;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureHeaderTextMargin = function () {
        if (this.i.aat) {
            return;
        }
        this.i.aat = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginBottom", {
        get: function () {
            return this.i.aas ? this.i.aas.bottom : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.aas.bottom = +v;
            this.i.aas = this.i.aas;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginLeft", {
        get: function () {
            return this.i.aas ? this.i.aas.left : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.aas.left = +v;
            this.i.aas = this.i.aas;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginRight", {
        get: function () {
            return this.i.aas ? this.i.aas.right : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.aas.right = +v;
            this.i.aas = this.i.aas;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowMarginTop", {
        get: function () {
            return this.i.aas ? this.i.aas.top : NaN;
        },
        set: function (v) {
            this.ensureHeaderRowMargin();
            this.i.aas.top = +v;
            this.i.aas = this.i.aas;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureHeaderRowMargin = function () {
        if (this.i.aas) {
            return;
        }
        this.i.aas = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerRowVisible", {
        /**
         * Gets or sets whether to show Header row.
        */
        get: function () {
            return this.i.uq;
        },
        set: function (v) {
            this.i.uq = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "headerTextStyle", {
        /**
         * Gets or Sets the style to use for the header text.
        */
        get: function () {
            if (this.i.ug == null) {
                return null;
            }
            return this.i.ug.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.ug = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextColor", {
        /**
         * Gets or sets the summary text color.
        */
        get: function () {
            return brushToString(this.i.aaf);
        },
        set: function (v) {
            this.i.aaf = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextStyle", {
        /**
         * Gets or Sets the style to use for the summary text.
        */
        get: function () {
            if (this.i.uj == null) {
                return null;
            }
            return this.i.uj.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.uj = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryType", {
        /**
         * Gets or sets the SummaryType for the data legend.
        */
        get: function () {
            return this.i.tp;
        },
        set: function (v) {
            this.i.tp = ensureEnum(DataLegendSummaryType_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleText", {
        /**
         * Gets or sets the SummaryTitleText for the data legend.
        */
        get: function () {
            return this.i.xe;
        },
        set: function (v) {
            this.i.xe = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginBottom", {
        get: function () {
            return this.i.aaw ? this.i.aaw.bottom : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.aaw.bottom = +v;
            this.i.aaw = this.i.aaw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginLeft", {
        get: function () {
            return this.i.aaw ? this.i.aaw.left : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.aaw.left = +v;
            this.i.aaw = this.i.aaw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginRight", {
        get: function () {
            return this.i.aaw ? this.i.aaw.right : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.aaw.right = +v;
            this.i.aaw = this.i.aaw;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryTitleTextMarginTop", {
        get: function () {
            return this.i.aaw ? this.i.aaw.top : NaN;
        },
        set: function (v) {
            this.ensureSummaryTitleTextMargin();
            this.i.aaw.top = +v;
            this.i.aaw = this.i.aaw;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureSummaryTitleTextMargin = function () {
        if (this.i.aaw) {
            return;
        }
        this.i.aaw = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginBottom", {
        get: function () {
            return this.i.aav ? this.i.aav.bottom : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.aav.bottom = +v;
            this.i.aav = this.i.aav;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginLeft", {
        get: function () {
            return this.i.aav ? this.i.aav.left : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.aav.left = +v;
            this.i.aav = this.i.aav;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginRight", {
        get: function () {
            return this.i.aav ? this.i.aav.right : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.aav.right = +v;
            this.i.aav = this.i.aav;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryRowMarginTop", {
        get: function () {
            return this.i.aav ? this.i.aav.top : NaN;
        },
        set: function (v) {
            this.ensureSummaryRowMargin();
            this.i.aav.top = +v;
            this.i.aav = this.i.aav;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureSummaryRowMargin = function () {
        if (this.i.aav) {
            return;
        }
        this.i.aav = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryValueTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.aah);
        },
        set: function (v) {
            this.i.aah = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryValueTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.ul == null) {
                return null;
            }
            return this.i.ul.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.ul = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryLabelText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.w9;
        },
        set: function (v) {
            this.i.w9 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryLabelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.aae);
        },
        set: function (v) {
            this.i.aae = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryLabelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.ui == null) {
                return null;
            }
            return this.i.ui.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.ui = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryUnitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.xk;
        },
        set: function (v) {
            this.i.xk = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryUnitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.aag);
        },
        set: function (v) {
            this.i.aag = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "summaryUnitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.uk == null) {
                return null;
            }
            return this.i.uk.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.uk = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginBottom", {
        get: function () {
            return this.i.aar ? this.i.aar.bottom : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.aar.bottom = +v;
            this.i.aar = this.i.aar;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginLeft", {
        get: function () {
            return this.i.aar ? this.i.aar.left : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.aar.left = +v;
            this.i.aar = this.i.aar;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginRight", {
        get: function () {
            return this.i.aar ? this.i.aar.right : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.aar.right = +v;
            this.i.aar = this.i.aar;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeMarginTop", {
        get: function () {
            return this.i.aar ? this.i.aar.top : NaN;
        },
        set: function (v) {
            this.ensureBadgeMargin();
            this.i.aar.top = +v;
            this.i.aar = this.i.aar;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureBadgeMargin = function () {
        if (this.i.aar) {
            return;
        }
        this.i.aar = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "badgeShape", {
        /**
         * Gets or sets the BadgeShape for the data legend.
        */
        get: function () {
            return this.i.t6;
        },
        set: function (v) {
            this.i.t6 = ensureEnum(LegendItemBadgeShape_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsDisplayMode", {
        /**
         * Gets or sets the UnitsMode for the data legend.
        */
        get: function () {
            return this.i.tq;
        },
        set: function (v) {
            this.i.tq = ensureEnum(DataLegendUnitsMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsText", {
        /**
         * Gets or sets the units text for the data legend.
        */
        get: function () {
            return this.i.xv;
        },
        set: function (v) {
            this.i.xv = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.aaj);
        },
        set: function (v) {
            this.i.aaj = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginBottom", {
        get: function () {
            return this.i.aay ? this.i.aay.bottom : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.aay.bottom = +v;
            this.i.aay = this.i.aay;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginLeft", {
        get: function () {
            return this.i.aay ? this.i.aay.left : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.aay.left = +v;
            this.i.aay = this.i.aay;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginRight", {
        get: function () {
            return this.i.aay ? this.i.aay.right : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.aay.right = +v;
            this.i.aay = this.i.aay;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextMarginTop", {
        get: function () {
            return this.i.aay ? this.i.aay.top : NaN;
        },
        set: function (v) {
            this.ensureUnitsTextMargin();
            this.i.aay.top = +v;
            this.i.aay = this.i.aay;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureUnitsTextMargin = function () {
        if (this.i.aay) {
            return;
        }
        this.i.aay = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "unitsTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.un == null) {
                return null;
            }
            return this.i.un.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.un = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginBottom", {
        get: function () {
            return this.i.aax ? this.i.aax.bottom : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.aax.bottom = +v;
            this.i.aax = this.i.aax;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginLeft", {
        get: function () {
            return this.i.aax ? this.i.aax.left : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.aax.left = +v;
            this.i.aax = this.i.aax;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginRight", {
        get: function () {
            return this.i.aax ? this.i.aax.right : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.aax.right = +v;
            this.i.aax = this.i.aax;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextMarginTop", {
        get: function () {
            return this.i.aax ? this.i.aax.top : NaN;
        },
        set: function (v) {
            this.ensureTitleTextMargin();
            this.i.aax.top = +v;
            this.i.aax = this.i.aax;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureTitleTextMargin = function () {
        if (this.i.aax) {
            return;
        }
        this.i.aax = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextColor", {
        /**
         * Gets or sets the display text color.
        */
        get: function () {
            return brushToString(this.i.aai);
        },
        set: function (v) {
            this.i.aai = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "titleTextStyle", {
        /**
         * Gets or Sets the style to use for the display text.
        */
        get: function () {
            if (this.i.um == null) {
                return null;
            }
            return this.i.um.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.um = fi;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelDisplayMode", {
        /**
         * Gets or sets the mode for displaying labels before series values in the data legend, e.g. O: H: L: C: for financial series
        */
        get: function () {
            return this.i.to;
        },
        set: function (v) {
            this.i.to = ensureEnum(DataLegendLabelMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextColor", {
        /**
         * Gets or sets the units text color.
        */
        get: function () {
            return brushToString(this.i.aad);
        },
        set: function (v) {
            this.i.aad = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginBottom", {
        get: function () {
            return this.i.aau ? this.i.aau.bottom : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.aau.bottom = +v;
            this.i.aau = this.i.aau;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginLeft", {
        get: function () {
            return this.i.aau ? this.i.aau.left : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.aau.left = +v;
            this.i.aau = this.i.aau;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginRight", {
        get: function () {
            return this.i.aau ? this.i.aau.right : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.aau.right = +v;
            this.i.aau = this.i.aau;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextMarginTop", {
        get: function () {
            return this.i.aau ? this.i.aau.top : NaN;
        },
        set: function (v) {
            this.ensureLabelTextMargin();
            this.i.aau.top = +v;
            this.i.aau = this.i.aau;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.ensureLabelTextMargin = function () {
        if (this.i.aau) {
            return;
        }
        this.i.aau = new Thickness(2);
    };
    Object.defineProperty(IgrDataToolTipLayer.prototype, "labelTextStyle", {
        /**
         * Gets or Sets the style to use for the units text.
        */
        get: function () {
            if (this.i.uh == null) {
                return null;
            }
            return this.i.uh.fontString;
        },
        set: function (v) {
            var fi = new FontInfo();
            fi.fontString = v;
            this.i.uh = fi;
        },
        enumerable: false,
        configurable: true
    });
    IgrDataToolTipLayer.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
            return this.targetAxis;
        }
        if (this.valueFormatSpecifiers != null && arrayFindByName(this.valueFormatSpecifiers, name)) {
            return arrayFindByName(this.valueFormatSpecifiers, name);
        }
        if (this.headerFormatSpecifiers != null && arrayFindByName(this.headerFormatSpecifiers, name)) {
            return arrayFindByName(this.headerFormatSpecifiers, name);
        }
        return null;
    };
    IgrDataToolTipLayer.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.targetAxis && this.targetAxis._styling) {
            this.targetAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    IgrDataToolTipLayer.prototype.hideToolTips = function () {
        this.i.li();
    };
    /**
     * Hides any tooltips presented by the layer, if any.
    
    */
    IgrDataToolTipLayer.prototype.hideToolTipsImmediate = function () {
        this.i.lj();
    };
    return IgrDataToolTipLayer;
}(IgrAnnotationLayer));
export { IgrDataToolTipLayer };
