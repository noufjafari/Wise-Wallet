import { __extends } from "tslib";
import { IgrValueBrushScale } from "./igr-value-brush-scale";
import { IgrContourValueResolver } from "./igr-contour-value-resolver";
import { IgrScatterTriangulationSeries } from "./igr-scatter-triangulation-series";
import { ScatterContourSeries } from "./ScatterContourSeries";
/**
 * Series class for rendering isarithmic contours based on a triangulation of X+Y+Value points in the ItemsSource.
*/
var IgrScatterContourSeries = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrScatterContourSeries, _super);
    function IgrScatterContourSeries(props) {
        return _super.call(this, props) || this;
    }
    IgrScatterContourSeries.prototype.createImplementation = function () {
        return new ScatterContourSeries();
    };
    Object.defineProperty(IgrScatterContourSeries.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterContourSeries.prototype, "isLineContour", {
        /**
         * Gets whether the current series shows a line contour shape.
        */
        get: function () {
            return this.i.d3;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterContourSeries.prototype, "valueMemberPath", {
        /**
         * Gets or set the name of the property from which to retrieve the numeric values from the ItemsSource items.
        */
        get: function () {
            return this.i.sj;
        },
        set: function (v) {
            this.i.sj = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterContourSeries.prototype, "valueMemberAsLegendLabel", {
        /**
         * Gets or sets the label displayed before series value in the Data Legend.
        */
        get: function () {
            return this.i.sf;
        },
        set: function (v) {
            this.i.sf = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterContourSeries.prototype, "valueMemberAsLegendUnit", {
        /**
         * Gets or sets the unit displayed after series value in the Data Legend.
        */
        get: function () {
            return this.i.sh;
        },
        set: function (v) {
            this.i.sh = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterContourSeries.prototype, "fillScale", {
        /**
         * Gets or sets the ValueBrushScale to use when determining Brushes for each contour line, based on the values found in ValueMemberPath.
        */
        get: function () {
            var r = this.i.r9;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrValueBrushScale._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.r9 = null : this.i.r9 = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterContourSeries.prototype, "actualFillScale", {
        /**
         * Gets actual fill scale that is set on the FillScale property or default FillScale
        */
        get: function () {
            var r = this.i.r8;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrValueBrushScale._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.r8 = null : this.i.r8 = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrScatterContourSeries.prototype, "valueResolver", {
        /**
         * Gets or set the ContourValueResolver used to determine the numeric values of contours.
        */
        get: function () {
            var r = this.i.r6;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrContourValueResolver._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.r6 = null : this.i.r6 = v.i;
        },
        enumerable: false,
        configurable: true
    });
    IgrScatterContourSeries.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.fillScale && this.fillScale.name && this.fillScale.name == name) {
            return this.fillScale;
        }
        if (this.actualFillScale && this.actualFillScale.name && this.actualFillScale.name == name) {
            return this.actualFillScale;
        }
        if (this.valueResolver && this.valueResolver.name && this.valueResolver.name == name) {
            return this.valueResolver;
        }
        return null;
    };
    IgrScatterContourSeries.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.fillScale && this.fillScale._styling) {
            this.fillScale._styling(container, component, this);
        }
        if (this.actualFillScale && this.actualFillScale._styling) {
            this.actualFillScale._styling(container, component, this);
        }
        if (this.valueResolver && this.valueResolver._styling) {
            this.valueResolver._styling(container, component, this);
        }
        this._inStyling = false;
    };
    IgrScatterContourSeries.prototype.getItemValue = function (item, memberPathName) {
        var iv = this.i.h1(item, memberPathName);
        return (iv);
    };
    return IgrScatterContourSeries;
}(IgrScatterTriangulationSeries));
export { IgrScatterContourSeries };
