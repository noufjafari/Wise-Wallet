/*
THIS INFRAGISTICS ULTIMATE SOFTWARE LICENSE  AGREEMENT ("AGREEMENT") LOCATED HERE:
https://www.infragistics.com/legal/license/igultimate-la
https://www.infragistics.com/legal/license/igultimate-eula
GOVERNS THE LICENSING, INSTALLATION AND USE OF INFRAGISTICS SOFTWARE. BY DOWNLOADING AND/OR INSTALLING AND USING INFRAGISTICS SOFTWARE:  you are indicating that you have read and understand this Agreement, and agree to be legally bound by it on behalf of the yourself and your company.
*/
import { __extends } from "tslib";
import { StrategyBasedIndicator } from "./StrategyBasedIndicator";
import { IShortPeriodLongPeriod_$type } from "./IShortPeriodLongPeriod";
import { MovingAverageConvergenceDivergenceIndicatorStrategy } from "./MovingAverageConvergenceDivergenceIndicatorStrategy";
import { typeGetValue, markType } from "igniteui-react-core";
import { Brush } from "igniteui-react-core";
/**
 * @hidden
 */
var MovingAverageConvergenceDivergenceIndicator = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(MovingAverageConvergenceDivergenceIndicator, _super);
    function MovingAverageConvergenceDivergenceIndicator() {
        var _this = _super.call(this) || this;
        _this.trendLineBrush = ((function () {
            var $ret = new Brush();
            $ret.fill = "#565656";
            return $ret;
        })());
        _this.trendLineType = 10;
        _this.trendLinePeriod = 9;
        return _this;
    }
    MovingAverageConvergenceDivergenceIndicator.prototype.get_tw = function () {
        return 1;
    };
    MovingAverageConvergenceDivergenceIndicator.prototype.get_up = function () {
        return new MovingAverageConvergenceDivergenceIndicatorStrategy();
    };
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "up", {
        get: function () {
            return this.get_up();
        },
        enumerable: false,
        configurable: true
    });
    MovingAverageConvergenceDivergenceIndicator.prototype.get_u2 = function () {
        return MovingAverageConvergenceDivergenceIndicator.$;
    };
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "u2", {
        get: function () {
            return this.get_u2();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "shortPeriod", {
        get: function () {
            return typeGetValue(this.c(MovingAverageConvergenceDivergenceIndicator.vd));
        },
        set: function (a) {
            this.h(MovingAverageConvergenceDivergenceIndicator.vd, a);
        },
        enumerable: false,
        configurable: true
    });
    MovingAverageConvergenceDivergenceIndicator.prototype.ux = function () {
        return this.shortPeriod;
    };
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "longPeriod", {
        get: function () {
            return typeGetValue(this.c(MovingAverageConvergenceDivergenceIndicator.vc));
        },
        set: function (a) {
            this.h(MovingAverageConvergenceDivergenceIndicator.vc, a);
        },
        enumerable: false,
        configurable: true
    });
    MovingAverageConvergenceDivergenceIndicator.prototype.uu = function () {
        return this.longPeriod;
    };
    Object.defineProperty(MovingAverageConvergenceDivergenceIndicator.prototype, "signalPeriod", {
        get: function () {
            return typeGetValue(this.c(MovingAverageConvergenceDivergenceIndicator.ve));
        },
        set: function (a) {
            this.h(MovingAverageConvergenceDivergenceIndicator.ve, a);
        },
        enumerable: false,
        configurable: true
    });
    MovingAverageConvergenceDivergenceIndicator.prototype.t5 = function () {
        return this.signalPeriod;
    };
    MovingAverageConvergenceDivergenceIndicator.$t = markType(MovingAverageConvergenceDivergenceIndicator, 'MovingAverageConvergenceDivergenceIndicator', StrategyBasedIndicator.$, [IShortPeriodLongPeriod_$type]);
    MovingAverageConvergenceDivergenceIndicator.vd = StrategyBasedIndicator.u9(10, MovingAverageConvergenceDivergenceIndicator.$);
    MovingAverageConvergenceDivergenceIndicator.vc = StrategyBasedIndicator.u5(30, MovingAverageConvergenceDivergenceIndicator.$);
    MovingAverageConvergenceDivergenceIndicator.ve = StrategyBasedIndicator.u8(9, MovingAverageConvergenceDivergenceIndicator.$, "SignalPeriod");
    return MovingAverageConvergenceDivergenceIndicator;
}(StrategyBasedIndicator));
export { MovingAverageConvergenceDivergenceIndicator };
