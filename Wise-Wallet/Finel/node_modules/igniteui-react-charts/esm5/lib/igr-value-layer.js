import { __extends } from "tslib";
import { ValueLayerValueMode_$type } from "./ValueLayerValueMode";
import { IgrSeries } from "./igr-series";
import { IgrAxis } from "./igr-axis";
import { IgrAnnotationLayer } from "./igr-annotation-layer";
import { ValueLayer } from "./ValueLayer";
import { ensureBool, ensureEnum, brushToString, stringToBrush } from "igniteui-react-core";
/**
 * Represents an annotation layer that displays crosshair lines that cross through the closest value of the target series under the cursor.
*/
var IgrValueLayer = /** @class */ /*@__PURE__*/ (function (_super) {
    __extends(IgrValueLayer, _super);
    function IgrValueLayer(props) {
        return _super.call(this, props) || this;
    }
    IgrValueLayer.prototype.createImplementation = function () {
        return new ValueLayer();
    };
    Object.defineProperty(IgrValueLayer.prototype, "i", {
        /**
                                     * @hidden
                                     */
        get: function () {
            return this._implementation;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "isAnnotationValueLayer", {
        /**
         * Gets whether the series is an crosshair annotation layer.
        */
        get: function () {
            return this.i.de;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "valueMode", {
        /**
         * Gets or sets the value mode for the overlay.
        */
        get: function () {
            return this.i.tg;
        },
        set: function (v) {
            this.i.tg = ensureEnum(ValueLayerValueMode_$type, v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "horizontalLineStroke", {
        /**
         * Gets or sets the color to use for the horizontal line. Leave null for an automatic value.
        */
        get: function () {
            return brushToString(this.i.v2);
        },
        set: function (v) {
            this.i.v2 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "verticalLineStroke", {
        /**
         * Gets or sets the color to use for vertical line. Leave null for an automatic value.
        */
        get: function () {
            return brushToString(this.i.v3);
        },
        set: function (v) {
            this.i.v3 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "targetSeriesName", {
        /**
         * Gets or sets the name of the series to target this annotation to. If null, this annotation targets all series simultaneously.
        */
        get: function () {
            return this.i.ub;
        },
        set: function (v) {
            this.i.ub = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "targetSeries", {
        /**
         * Gets or sets the series to target this annotation to. If null, this annotation targets all series simultaneously.
        */
        get: function () {
            var r = this.i.te;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrSeries._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.te = null : this.i.te = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "targetAxisName", {
        /**
         * Gets or sets the name of the axis to target this annotation to. If null, this annotation targets all axis simultaneously.
        */
        get: function () {
            return this.i.t8;
        },
        set: function (v) {
            this.i.t8 = v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "targetAxis", {
        /**
         * Gets or sets the axis to target this annotation to. If null, this annotation targets all value axis simultaneously.
        */
        get: function () {
            var r = this.i.tb;
            if (r == null) {
                return null;
            }
            if (!r.externalObject) {
                var e = IgrAxis._createFromInternal(r);
                if (e) {
                    e._implementation = r;
                }
                r.externalObject = e;
            }
            return r.externalObject;
        },
        set: function (v) {
            if (v != null && this._stylingContainer && v._styling)
                v._styling(this._stylingContainer, this, this);
            v == null ? this.i.tb = null : this.i.tb = v.i;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "useInterpolation", {
        /**
         * Gets or sets whether to use value interpolation when drawing a line through the best value for the cursor position.
        */
        get: function () {
            return this.i.tn;
        },
        set: function (v) {
            this.i.tn = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "isAxisAnnotationEnabled", {
        /**
         * Gets or sets whether to draw annotations over the axes where the crosshair meets with them.
        */
        get: function () {
            return this.i.tk;
        },
        set: function (v) {
            this.i.tk = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationTextColor", {
        /**
         * Gets or sets the color to use for the x axis annotation text. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.v6);
        },
        set: function (v) {
            this.i.v6 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationBackground", {
        /**
         * Gets or sets the color to use for the x axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.v4);
        },
        set: function (v) {
            this.i.v4 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationBackgroundCornerRadius", {
        /**
         * Gets or sets the corner radius to use for the x axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return this.i.tq;
        },
        set: function (v) {
            this.i.tq = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationInterpolatedValuePrecision", {
        /**
         * Gets or sets the precision to use displaying values for interpolated crosshair positions.
        */
        get: function () {
            return this.i.t2;
        },
        set: function (v) {
            this.i.t2 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationOutline", {
        /**
         * Gets or sets the color to use for the x axis annotation outline. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.v5);
        },
        set: function (v) {
            this.i.v5 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationPaddingLeft", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.ts;
        },
        set: function (v) {
            this.i.ts = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationPaddingTop", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.tu;
        },
        set: function (v) {
            this.i.tu = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationPaddingRight", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.tt;
        },
        set: function (v) {
            this.i.tt = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationPaddingBottom", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.tr;
        },
        set: function (v) {
            this.i.tr = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationPaddingLeft", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.ty;
        },
        set: function (v) {
            this.i.ty = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationPaddingTop", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.t0;
        },
        set: function (v) {
            this.i.t0 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationPaddingRight", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.tz;
        },
        set: function (v) {
            this.i.tz = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationPaddingBottom", {
        /**
         * Gets or sets the padding to use withing the axis annotation callout. Leaving this NaN will use an automatic value related to the axis label margins.
        */
        get: function () {
            return this.i.tx;
        },
        set: function (v) {
            this.i.tx = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "xAxisAnnotationStrokeThickness", {
        /**
         * Gets or sets the stroke thickness for the x axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return this.i.tv;
        },
        set: function (v) {
            this.i.tv = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationTextColor", {
        /**
         * Gets or sets the color to use for the y axis annotation text. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.v9);
        },
        set: function (v) {
            this.i.v9 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationBackground", {
        /**
         * Gets or sets the color to use for the y axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.v7);
        },
        set: function (v) {
            this.i.v7 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationBackgroundCornerRadius", {
        /**
         * Gets or sets the corner radius to use for the y axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return this.i.tw;
        },
        set: function (v) {
            this.i.tw = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationInterpolatedValuePrecision", {
        /**
         * Gets or sets the precision to use displaying values for interpolated crosshair positions.
        */
        get: function () {
            return this.i.t3;
        },
        set: function (v) {
            this.i.t3 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationOutline", {
        /**
         * Gets or sets the color to use for the y axis annotation outline. Leave unset for an automatic value.
        */
        get: function () {
            return brushToString(this.i.v8);
        },
        set: function (v) {
            this.i.v8 = stringToBrush(v);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "yAxisAnnotationStrokeThickness", {
        /**
         * Gets or sets the stroke thickness for the y axis annotation backing. Leave unset for an automatic value.
        */
        get: function () {
            return this.i.t1;
        },
        set: function (v) {
            this.i.t1 = +v;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(IgrValueLayer.prototype, "skipUnknownValues", {
        /**
         * Gets or sets whether to skip unknown values when searching for series values.
        */
        get: function () {
            return this.i.tm;
        },
        set: function (v) {
            this.i.tm = ensureBool(v);
        },
        enumerable: false,
        configurable: true
    });
    IgrValueLayer.prototype.findByName = function (name) {
        var baseResult = _super.prototype.findByName.call(this, name);
        if (baseResult) {
            return baseResult;
        }
        if (this.targetSeries && this.targetSeries.name && this.targetSeries.name == name) {
            return this.targetSeries;
        }
        if (this.targetAxis && this.targetAxis.name && this.targetAxis.name == name) {
            return this.targetAxis;
        }
        return null;
    };
    IgrValueLayer.prototype._styling = function (container, component, parent) {
        _super.prototype._styling.call(this, container, component, parent);
        this._inStyling = true;
        if (this.targetSeries && this.targetSeries._styling) {
            this.targetSeries._styling(container, component, this);
        }
        if (this.targetAxis && this.targetAxis._styling) {
            this.targetAxis._styling(container, component, this);
        }
        this._inStyling = false;
    };
    return IgrValueLayer;
}(IgrAnnotationLayer));
export { IgrValueLayer };
